<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vvotman</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://vvotman.github.io/"/>
  <updated>2016-09-10T05:30:01.315Z</updated>
  <id>http://vvotman.github.io/</id>
  
  <author>
    <name>vvotman(luowen)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单的mysql过程实现数据行累加</title>
    <link href="http://vvotman.github.io/2016/09/10/%E7%AE%80%E5%8D%95%E7%9A%84mysql%E8%BF%87%E7%A8%8B%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E8%A1%8C%E7%B4%AF%E5%8A%A0/"/>
    <id>http://vvotman.github.io/2016/09/10/简单的mysql过程实现数据行累加/</id>
    <published>2016-09-10T05:04:37.000Z</published>
    <updated>2016-09-10T05:30:01.315Z</updated>
    
    <content type="html">&lt;p&gt;今天碰到mysql的一个问题, 下一行的一个字段需要累加上一行的字段的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----+------+-----+           +----+------+--------------+
| id | name | age |           | id | name | age          |
+----+------+-----+           +----+------+--------------+
| 1  | lily | 10  |           | 1  | lily | 10           |
+----+------+-----+    =&amp;gt;     +----+------+--------------+
| 2  | lucy | 28  |           | 2  | lucy | 28 +10       |
+----+------+-----+           +----+------+--------------+
| 3  | tom  | 80  |           | 3  | tom  | 80 + 28 + 10 |
+----+------+-----+           +----+------+--------------+
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;如何实现它&quot;&gt;&lt;a href=&quot;#如何实现它&quot; class=&quot;headerlink&quot; title=&quot;如何实现它&quot;&gt;&lt;/a&gt;如何实现它&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;可以使用java, php, python等脚本语言轻松实现, 不讨论.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;今天讨论用sql语言实现它. 要实现这个东东, 第一感觉想到的是过程&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;编写过程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delimiter ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;procedure&lt;/span&gt; demo()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; done &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; prevalue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; vid &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; currentvalue &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 声明游标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; demo_cursor &lt;span class=&quot;keyword&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;, age &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; demo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt; continue &lt;span class=&quot;keyword&quot;&gt;handler&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;found&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; done = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 打开游标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;open demo_cursor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 循环操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read_loop: LOOP&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fetch invest into vid, currentvalue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; prevalue := prevalue+currentvalue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if done then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        leave read_loop;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;update&lt;/span&gt; demo &lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; age = prevalue &lt;span class=&quot;keyword&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;LOOP&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLOSE demo_cursor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delimiter ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行过程 &lt;code&gt;call demo();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;删除过程 &lt;code&gt;drop procedure demo;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;就这样实现了, 欢迎拍砖.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天碰到mysql的一个问题, 下一行的一个字段需要累加上一行的字段的值&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+----+------+-----+           +----+------+--------------+
| id | name | age |           | id | name | age          |
+----+------+-----+           +----+------+--------------+
| 1  | lily | 10  |           | 1  | lily | 10           |
+----+------+-----+    =&amp;gt;     +----+------+--------------+
| 2  | lucy | 28  |           | 2  | lucy | 28 +10       |
+----+------+-----+           +----+------+--------------+
| 3  | tom  | 80  |           | 3  | tom  | 80 + 28 + 10 |
+----+------+-----+           +----+------+--------------+
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用gitbook整合github快速构建文档</title>
    <link href="http://vvotman.github.io/2016/09/09/%E4%BD%BF%E7%94%A8gitbook%E6%95%B4%E5%90%88github%E5%BF%AB%E9%80%9F%E6%9E%84%E5%BB%BA%E6%96%87%E6%A1%A3/"/>
    <id>http://vvotman.github.io/2016/09/09/使用gitbook整合github快速构建文档/</id>
    <published>2016-09-08T22:17:59.000Z</published>
    <updated>2016-09-10T05:00:34.944Z</updated>
    
    <content type="html">&lt;p&gt;我们把markdown文档托管到github, 然后使用gitbook格式化后阅读. 感觉还是很酷的. 实例:&lt;a href=&quot;http://redux.js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;reduxjs&lt;/a&gt;. SO 实现这个玩意.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;github新建一个仓库.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://gitbook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;gitbook&lt;/a&gt; 新建一个&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/gitbook/0.png&quot; alt=&quot;新建文档&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;文档新建好了, 设置同步github仓库.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/gitbook/1.png&quot; alt=&quot;同步仓库&quot;&gt;&lt;br&gt; &lt;img src=&quot;/images/gitbook/2.png&quot; alt=&quot;同步&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;出现下图后, 说名搞成了, 就这么简单.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/gitbook/3.png&quot; alt=&quot;ok&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;上述操作是建立在你的github帐号已经授权给gitbook帐号读取仓库权限基础上的. 如果没有授权参看网站提示. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://help.gitbook.com/github/can-i-host-on-github.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文档&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我们把markdown文档托管到github, 然后使用gitbook格式化后阅读. 感觉还是很酷的. 实例:&lt;a href=&quot;http://redux.js.org/&quot;&gt;reduxjs&lt;/a&gt;. SO 实现这个玩意.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>批量删除redis制定键</title>
    <link href="http://vvotman.github.io/2016/08/15/%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4redis%E5%88%B6%E5%AE%9A%E9%94%AE/"/>
    <id>http://vvotman.github.io/2016/08/15/批量删除redis制定键/</id>
    <published>2016-08-15T13:42:40.000Z</published>
    <updated>2016-09-10T05:00:34.945Z</updated>
    
    <content type="html">&lt;p&gt;有时候需要删除redis中的制定key, 使用redis-descktop桌面软件虽然挺好要, 但要批量删除, 并不是那么好用. so 使用脚本吧. &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;脚本奉上-欢迎拍砖&quot;&gt;&lt;a href=&quot;#脚本奉上-欢迎拍砖&quot; class=&quot;headerlink&quot; title=&quot;脚本奉上, (欢迎拍砖)&quot;&gt;&lt;/a&gt;脚本奉上, (欢迎拍砖)&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis-cli -n &amp;#123;数据库&amp;#125; keys &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;glob 匹配, 参考官方文档有惊喜&amp;#125;&#39;&lt;/span&gt; | xargs -n 1 redis-cli del&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有时候需要删除redis中的制定key, 使用redis-descktop桌面软件虽然挺好要, 但要批量删除, 并不是那么好用. so 使用脚本吧. &lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bash shell 获取命令行参数</title>
    <link href="http://vvotman.github.io/2016/07/12/bashshell-case-syntax/"/>
    <id>http://vvotman.github.io/2016/07/12/bashshell-case-syntax/</id>
    <published>2016-07-12T02:42:00.000Z</published>
    <updated>2016-09-10T05:00:34.944Z</updated>
    
    <content type="html">&lt;p&gt;场景: 写bash脚本经长要获取命令行参数, so…&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;bash-自动获取-本文参考stackoverflow&quot;&gt;&lt;a href=&quot;#bash-自动获取-本文参考stackoverflow&quot; class=&quot;headerlink&quot; title=&quot;bash 自动获取 本文参考stackoverflow&quot;&gt;&lt;/a&gt;bash 自动获取 本文参考&lt;a href=&quot;http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;stackoverflow&lt;/a&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; [[ &lt;span class=&quot;variable&quot;&gt;$#&lt;/span&gt; &lt;span class=&quot;_&quot;&gt;-gt&lt;/span&gt; 0 ]] &lt;span class=&quot;comment&quot;&gt;# 判断有参数, 就获取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  key=&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -u|--user)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# get -u | --user value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -p|--password)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# get -p | --password value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    -h|--help)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Use: (-u | --user set username) : (-p | --password set passwod)&quot;&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# get --help&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;esac&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ps: &lt;code&gt;$#&lt;/code&gt; 获取参数个数. &lt;code&gt;$@&lt;/code&gt; 获取所有参数. &lt;code&gt;$1&lt;/code&gt;获取第1个参数. 脚本&lt;a href=&quot;http://unix.stackexchange.com/questions/174566/what-is-the-purpose-of-using-shift-in-shell-scripts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;shift&lt;/a&gt;关键字的作用就很好理解咯&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;场景: 写bash脚本经长要获取命令行参数, so…&lt;/p&gt;
    
    </summary>
    
    
      <category term="bash" scheme="http://vvotman.github.io/tags/bash/"/>
    
      <category term="case" scheme="http://vvotman.github.io/tags/case/"/>
    
      <category term="command" scheme="http://vvotman.github.io/tags/command/"/>
    
  </entry>
  
  <entry>
    <title>单点(SSO)登入实现</title>
    <link href="http://vvotman.github.io/2016/05/31/%E5%8D%95%E7%82%B9%E7%99%BB%E5%85%A5(SSO)%E5%AE%9E%E7%8E%B0/"/>
    <id>http://vvotman.github.io/2016/05/31/单点登入(SSO)实现/</id>
    <published>2016-05-31T12:40:00.000Z</published>
    <updated>2016-07-12T02:48:37.452Z</updated>
    
    <content type="html">&lt;p&gt;场景: 一公司旗下有很多网站，要求在旗下任意一个网站登入后，其他网站都处于登入状态．&lt;br&gt;说明: 本帖子不涉及代码实现，之说明重要的点．(阐述不恰当的，欢迎拍砖)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;理解登入原理&quot;&gt;&lt;a href=&quot;#理解登入原理&quot; class=&quot;headerlink&quot; title=&quot;理解登入原理&quot;&gt;&lt;/a&gt;理解登入原理&lt;/h3&gt;&lt;p&gt;就我个人理解，网站登入两种实现．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于session登入&lt;/li&gt;
&lt;li&gt;基于token登入&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;基于session登入原理&quot;&gt;&lt;a href=&quot;#基于session登入原理&quot; class=&quot;headerlink&quot; title=&quot;基于session登入原理&quot;&gt;&lt;/a&gt;基于session登入原理&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用户访问网站的一个页面, 服务器端随机生成一个标识sessionId, 更具服务端session配置，session数据可以保存在文件中(默认),也可保存在数据库(关系性或nosql)中 同时并把sessionId的值添加到响应头中，让用户浏览器已cookie的方式保存．&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用户再次访问其他网页时候，请求头中就会带上上一步中sessionID, 服务端根据sessionId到取得对应用户的信息．判断是否登入.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;session过期时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入浏览器cookie的过期时间．当浏览器的cookie过期了，会导致sessionId丢失，倒是session失效．需要重新登入．&lt;/li&gt;
&lt;li&gt;服务端的session过期，当服务端session过期，就算cookie没有过期，session也失效．　需要重新登入．&lt;/li&gt;
&lt;li&gt;注意，每次请求，服务端session如果有存在值的话，需要更新服务端session过期时间，这些都session都是默认帮我们做了(一直访问，session不会失效)．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;几天免登入实现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将session中的数据加密一起保存到cookie中，cookie的过期时间设置到对应几天失效，期间用户访问带上了cookie中的加密的值，实现免登入．&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;基于token登入原理&quot;&gt;&lt;a href=&quot;#基于token登入原理&quot; class=&quot;headerlink&quot; title=&quot;基于token登入原理&quot;&gt;&lt;/a&gt;基于token登入原理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;token验证有很多方式, (HTTP_BASIC Authorized, Auth0 auth2, jwt …)，那jwt(json web token)说明．&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户请求认证，认证服务器发放token(token中包含了用户信息).&lt;/li&gt;
&lt;li&gt;用户之后每个请求都在请求头中带上认证头信息.&lt;/li&gt;
&lt;li&gt;token过期，再次请求认证服务器，刷新token.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;单点-SSO-登入实现&quot;&gt;&lt;a href=&quot;#单点-SSO-登入实现&quot; class=&quot;headerlink&quot; title=&quot;单点(SSO)登入实现&quot;&gt;&lt;/a&gt;单点(SSO)登入实现&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;根据session,token登入原理，很明显基于token的方式无需要任何而外的配置，就实现了单点登入功能了．&lt;/li&gt;
&lt;li&gt;session实现单点登入．&lt;ul&gt;
&lt;li&gt;保证服务端session是共享的，默认文件存储需要设置保存session的目录共享，推荐使用数据库存储．&lt;/li&gt;
&lt;li&gt;设置cookie作用域，域名，是每个域名下都能读取到保存sessionId的cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;session-vs-token&quot;&gt;&lt;a href=&quot;#session-vs-token&quot; class=&quot;headerlink&quot; title=&quot;session vs token&quot;&gt;&lt;/a&gt;session vs token&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;实现复杂度　token &amp;gt; session&lt;/li&gt;
&lt;li&gt;性能　token &amp;gt; session &lt;/li&gt;
&lt;li&gt;扩展性 token &amp;gt; session&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;场景: 一公司旗下有很多网站，要求在旗下任意一个网站登入后，其他网站都处于登入状态．&lt;br&gt;说明: 本帖子不涉及代码实现，之说明重要的点．(阐述不恰当的，欢迎拍砖)&lt;/p&gt;
    
    </summary>
    
    
      <category term="SSO" scheme="http://vvotman.github.io/tags/SSO/"/>
    
      <category term="SESSION 共享" scheme="http://vvotman.github.io/tags/SESSION-%E5%85%B1%E4%BA%AB/"/>
    
      <category term="Cookie作用域" scheme="http://vvotman.github.io/tags/Cookie%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>如何实现6位数表示百亿</title>
    <link href="http://vvotman.github.io/2016/05/30/%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B06%E4%BD%8D%E6%95%B0%E8%A1%A8%E7%A4%BA%E7%99%BE%E4%BA%BF/"/>
    <id>http://vvotman.github.io/2016/05/30/如何实现6位数表示百亿/</id>
    <published>2016-05-30T03:47:46.000Z</published>
    <updated>2016-05-30T07:06:39.276Z</updated>
    
    <content type="html">&lt;p&gt;场景: 只能用6位数, 要表示0~百亿区间的数. etc. xabdex =&amp;gt; 2000000000.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;理解进制&quot;&gt;&lt;a href=&quot;#理解进制&quot; class=&quot;headerlink&quot; title=&quot;理解进制&quot;&gt;&lt;/a&gt;理解进制&lt;/h3&gt;&lt;p&gt;二进制, 逢2进1. &lt;code&gt;101 =&amp;gt; 1x2^2 + 0x2^1 + 1x2^0 = 5&lt;/code&gt; 二进制3为才能表示10进制的1位数.&lt;br&gt;16进制, 逢16进1. &lt;code&gt;101 =&amp;gt; 1x16^2 + 0x16^1 + 1x16^0 = 257&lt;/code&gt; 16进制101表示到了257.  &lt;/p&gt;
&lt;p&gt;64进制, 逢64进1. &lt;code&gt;101 =&amp;gt; 1x64^2 + 0x64^1 + 1x64^0 = 4160&lt;/code&gt; 64进制三位表示到了4位数, 就是我们想要的.  &lt;/p&gt;
&lt;h3 id=&quot;实现-php&quot;&gt;&lt;a href=&quot;#实现-php&quot; class=&quot;headerlink&quot; title=&quot;实现(php)&quot;&gt;&lt;/a&gt;实现(php)&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UIDUtils&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 用户唯一表示长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; CODE_LENGTH = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * if number is negative prefix with zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $negative = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * this character presentation zero&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $zeroCharacter = [ &lt;span class=&quot;string&quot;&gt;&#39;J&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;q&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;s&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;T&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;U&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;E&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * code dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; $dictionary = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;K&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;v&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;F&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;m&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;u&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;S&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;n&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;Y&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;e&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;O&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;j&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;14&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;x&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;y&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;V&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;X&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;W&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;Q&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;21&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;P&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;z&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;t&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;r&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;Z&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;26&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;R&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;27&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;w&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;p&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;I&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;31&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;G&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;k&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;34&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;h&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;35&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;f&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;l&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;37&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;i&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;38&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;o&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;39&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;N&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;L&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;41&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;M&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;D&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;43&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;44&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;g&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;number&quot;&gt;45&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;H&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * encrypt function get code&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $number&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; \Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($number)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $encodeString = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $numberType = $number &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;  ? &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $dictionaryLength = count(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$dictionary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;($number &amp;gt; $dictionaryLength)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $encodeString = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$dictionary[abs($number % $dictionaryLength)] . $encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $number = floor($number / $dictionaryLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($number &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $encodeString = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$dictionary[$number] . $encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $encodeStringLength = strlen($encodeString);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $padStringLength = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::CODE_LENGTH - $encodeStringLength;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// if number is negative number and encode length is six. number overflow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(($numberType &amp;amp;&amp;amp; $padStringLength &amp;lt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) || (!$numberType &amp;amp;&amp;amp; $padStringLength &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; \Error(&lt;span class=&quot;string&quot;&gt;&quot;加密数字溢出....&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// if number is positive and encode length is six. just return it.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($padStringLength == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// if number is positive and encode length small than six. pad random character left.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        shuffle(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$zeroCharacter);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($numberType)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $resultEncodeString = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$negative . implode(array_slice(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$zeroCharacter, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, $padStringLength + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) . $encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $resultEncodeString = implode(array_slice(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$zeroCharacter, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, $padStringLength)) . $encodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $resultEncodeString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *  decode string to number value&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@param&lt;/span&gt; $string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@return&lt;/span&gt; int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * &lt;span class=&quot;doctag&quot;&gt;@throws&lt;/span&gt; \Error&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($string)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $numberValue = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $dictionaryLength = count(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$dictionary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $decodeArr = array_reverse(str_split($string));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(count($decodeArr) != &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::CODE_LENGTH)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; \Error(&lt;span class=&quot;string&quot;&gt;&quot;字符长度错误.&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $dictionaryNumberMap = array_flip(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$dictionary);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt;($decodeArr &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; $key =&amp;gt; $value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(in_array($value, &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;::$zeroCharacter))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $numberValue += $dictionaryNumberMap[$value] * pow($dictionaryLength, $key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $numberValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$number = &lt;span class=&quot;number&quot;&gt;10000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$string = UIDUtils::encode($number);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$number = UIDUtils::decode($string);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump($number);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;思路很重要-实现很简单&quot;&gt;&lt;a href=&quot;#思路很重要-实现很简单&quot; class=&quot;headerlink&quot; title=&quot;思路很重要, 实现很简单.&quot;&gt;&lt;/a&gt;思路很重要, 实现很简单.&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;场景: 只能用6位数, 要表示0~百亿区间的数. etc. xabdex =&amp;gt; 2000000000.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vagrant搭建lamp开发环境</title>
    <link href="http://vvotman.github.io/2016/05/09/vagrant%E6%90%AD%E5%BB%BAlamp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://vvotman.github.io/2016/05/09/vagrant搭建lamp开发环境/</id>
    <published>2016-05-09T05:20:00.000Z</published>
    <updated>2016-05-30T02:28:08.218Z</updated>
    
    <content type="html">&lt;h1 id=&quot;使用vagrant快速搭建分享开发环境&quot;&gt;&lt;a href=&quot;#使用vagrant快速搭建分享开发环境&quot; class=&quot;headerlink&quot; title=&quot;使用vagrant快速搭建分享开发环境&quot;&gt;&lt;/a&gt;使用vagrant快速搭建分享开发环境&lt;/h1&gt;&lt;h3 id=&quot;本案列操作环境&quot;&gt;&lt;a href=&quot;#本案列操作环境&quot; class=&quot;headerlink&quot; title=&quot;本案列操作环境&quot;&gt;&lt;/a&gt;本案列操作环境&lt;/h3&gt;&lt;p&gt;1. windows7 vagrant1.8.1 virtualbox4.3&lt;/p&gt;
&lt;h3 id=&quot;安装virtualbox4-x-或更高&quot;&gt;&lt;a href=&quot;#安装virtualbox4-x-或更高&quot; class=&quot;headerlink&quot; title=&quot;安装virtualbox4.x(或更高)&quot;&gt;&lt;/a&gt;安装virtualbox4.x(或更高)&lt;/h3&gt;&lt;p&gt;1. virtualbox, win7下傻瓜式安装, 无需配置, 略过.  &lt;/p&gt;
&lt;h3 id=&quot;安装vagrant&quot;&gt;&lt;a href=&quot;#安装vagrant&quot; class=&quot;headerlink&quot; title=&quot;安装vagrant&quot;&gt;&lt;/a&gt;安装vagrant&lt;/h3&gt;&lt;p&gt;1. 下载vagrant软件包 &lt;a href=&quot;https://www.vagrantup.com/downloads.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;地址&lt;/a&gt;, 安装(windows傻瓜式安装, 不多说).  &lt;/p&gt;
&lt;p&gt;2. 创建vagrant工程目录, 初始化Vagrantfile.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;F:\&amp;gt; mkdir vagrant
F:\&amp;gt; cd vagrant
F:\vagrant&amp;gt;vagrant.exe init
    A `Vagrantfile` has been placed in this directory. You are now
    ready to `vagrant up` your first virtual environment! Please read
    the comments in the Vagrantfile as well as documentation on
    `vagrantup.com` for more information on using Vagrant.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 添加box(类似docker的容器), 到&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方源&lt;/a&gt;下载需要的box, 本案例下载(puppetlabs/centos-6.6-64-nocm)(&lt;a href=&quot;https://atlas.hashicorp.com/puppetlabs/boxes/centos-6.6-64-nocm),公司服务器是centos6.x&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://atlas.hashicorp.com/puppetlabs/boxes/centos-6.6-64-nocm),公司服务器是centos6.x&lt;/a&gt;.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    F:\vagrant&amp;gt;vagrant box add puppetlabs/centos-6.6-64-nocm
    ==&amp;gt; box: Loading metadata for box &amp;apos;puppetlabs/centos-6.6-64-nocm&amp;apos;
        box: URL: https://atlas.hashicorp.com/puppetlabs/centos-6.6-64-nocm
    This box can work with multiple providers! The providers that it
    can work with are listed below. Please review the list and choose
    the provider you will be working with.

    1) virtualbox
    2) vmware_desktop

    Enter your choice: 1
    ==&amp;gt; box: Adding box &amp;apos;puppetlabs/centos-6.6-64-nocm&amp;apos; (v1.0.3) for provider: virtualbox
        box: Downloading: https://atlas.hashicorp.com/puppetlabs/boxes/centos-6.6-64-nocm/versions/1.0.3/providers/virtualbox.box
        box: Progress: 0% (Rate: 27052/s, Estimated time remaining: 3:23:32)==&amp;gt; box: Waiting for cleanup before exiting...

        box: Progress: 0% (Rate: 23813/s, Estimated time remaining: 3:26:33)
    ==&amp;gt; box: Box download was interrupted. Exiting.

ps: 慢的有的一B啊, 果断复制链接, 迅雷下载, 安装*.box文件. 速度还能接受.  
    ![download](http://images2015.cnblogs.com/blog/451327/201605/451327-20160509131846359-688138673.png)

box命令略解: `vagrant box add [可选参数] &amp;lt;官方源名称, url链接地址, 下载后的*.box文件&amp;gt;`   

安装box文件(秒干):  

        F:\vagrant&amp;gt;vagrant box add --name puppetlabs/centos-6.6-64-nocm  F:\boxes\virtualbox.box
        ==&amp;gt; box: Box file was not detected as metadata. Adding it directly...
        ==&amp;gt; box: Adding box &amp;apos;puppetlabs/centos-6.6-64-nocm&amp;apos; (v0) for provider:
            box: Unpacking necessary files from: file://F:/boxes/virtualbox.box
            box: Progress: 100% (Rate: 658M/s, Estimated time remaining: --:--:--)
        ==&amp;gt; box: Successfully added box &amp;apos;puppetlabs/centos-6.6-64-nocm&amp;apos; (v0) for &amp;apos;virtualbox&amp;apos;!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4. 使用刚下在的box&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1\. 编辑vagrant工程目录下的Vagrantfile文件  

        15行: config.vm.box = &amp;quot;puppetlabs/centos-6.6-64-nocm&amp;quot;

2\. 启动vagrant(此处会启动virtualbox, 预先安装virtualbox, win7安装有点小问题, 请自行google或百度解决)  

        vagrant up

3\. ssh上去(默认F:/vagrant 自动挂载到/vagrant)上  

        F:\vagrant&amp;gt;vagrant ssh
        Last login: Fri May  6 02:33:11 2016 from 10.0.2.2
        [vagrant@localhost ~]$ ls /
        bin  boot  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  sbin  selinux  srv  sys  tmp  usr  vagrant  var
        [vagrant@localhost ~]$

4\. 在/vagrant创建的文件, 会同步到 F:\&amp;gt;vagrant下.  
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Centos-Box-安装lamp环境&quot;&gt;&lt;a href=&quot;#Centos-Box-安装lamp环境&quot; class=&quot;headerlink&quot; title=&quot;Centos Box 安装lamp环境&quot;&gt;&lt;/a&gt;Centos Box 安装lamp环境&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本案列使用 apache2.4, php5.6.12 mysql5.7 编译安装, 源文件都一打包好, 有需要可以找我要&lt;a href=&quot;&amp;#x6d;&amp;#x61;&amp;#105;&amp;#108;&amp;#116;&amp;#x6f;&amp;#x3a;&amp;#x6c;&amp;#x6f;&amp;#111;&amp;#x76;&amp;#x69;&amp;#101;&amp;#110;&amp;#x40;&amp;#49;&amp;#x36;&amp;#x33;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&quot;&gt;&amp;#x6c;&amp;#x6f;&amp;#111;&amp;#x76;&amp;#x69;&amp;#101;&amp;#110;&amp;#x40;&amp;#49;&amp;#x36;&amp;#x33;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1. 默认所有服务安装到/usr/local/webserver目录下.  &lt;/p&gt;
&lt;p&gt;2. 安装必要的依赖.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo yum groupinstall &amp;quot;Development tools&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. apache2.4 编译.  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1\. http2.4.x源码包中不含有apr apr-util [下载它们](http://apr.apache.org/download.cgi), 解压到http2.4.x/srclib下.  
2\. 下载pcre-8.3.x.tar.gz, 解压 执行 `./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install`.  
3\. 编译apache2.4.x 定位到httpd源码目录, 执行编译`./configure --enable-file-cache --enable-cache --enable-disk-cache --enable-mem-cache --enable-expires --enable-headers --enable-usertrack  --enable-cgi --enable-vhost-alias --enable-rewrite --enable-so --with-include-apr --prefix=/usr/local/webserver`, `make &amp;amp;&amp;amp; make install`
4\. 配置httpd DocumentRoot =\&amp;gt; /vagrant/www目录下.  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4. 编译php&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1\. 安装依赖, 没办法, 编译就是这样, 少了什么依赖就安装什么依赖, 编译安装.  

    $ sudo yum install libxml2 libxml-devel
    $ ./configure --prefix=/usr/local/webserver/php --with-mysql
    $ make &amp;amp;&amp;amp; make install
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5. 编译mysql  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1\. 完全编译mysql5.5工程量比较大, 本例下载二进制包, [下载](http://dev.mysql.com/downloads/mysql/).  
2\. 解压后查看README文档安装即可
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6. 运行项目可能需要编译php扩展, 自行安装即可, 使用 &lt;code&gt;phpize&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;7. 在/etc/rc.local, 添加apache2, mysql 启动命令, 是开机启动.  &lt;/p&gt;
&lt;h3 id=&quot;开发&quot;&gt;&lt;a href=&quot;#开发&quot; class=&quot;headerlink&quot; title=&quot;开发&quot;&gt;&lt;/a&gt;开发&lt;/h3&gt;&lt;p&gt;1. 后期自动把项目挂载F:\vagrant下, 让虚拟box的http Document目录软链接到 /vagrant目录即可.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用vagrant快速搭建分享开发环境&quot;&gt;&lt;a href=&quot;#使用vagrant快速搭建分享开发环境&quot; class=&quot;headerlink&quot; title=&quot;使用vagrant快速搭建分享开发环境&quot;&gt;&lt;/a&gt;使用vagrant快速搭建分享开发环境&lt;/h1&gt;&lt;h3 i
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>chrome vimium 插件简单使用</title>
    <link href="http://vvotman.github.io/2016/05/08/%EF%BC%BBchrome%EF%BC%8Fchromium%EF%BC%BD%E6%8F%92%E4%BB%B6-vimium-%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://vvotman.github.io/2016/05/08/［chrome／chromium］插件-vimium-简单使用/</id>
    <published>2016-05-08T10:07:00.000Z</published>
    <updated>2016-05-30T05:09:27.045Z</updated>
    
    <content type="html">&lt;h3 id=&quot;vimium插件是一个了让你不用鼠标浏览网页的炸天的插件&quot;&gt;&lt;a href=&quot;#vimium插件是一个了让你不用鼠标浏览网页的炸天的插件&quot; class=&quot;headerlink&quot; title=&quot;ｖｉｍｉｕｍ插件是一个了让你不用鼠标浏览网页的炸天的插件&quot;&gt;&lt;/a&gt;ｖｉｍｉｕｍ插件是一个了让你不用鼠标浏览网页的炸天的插件&lt;/h3&gt;&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;1. 打开chrome设置&lt;br&gt;2. 搜索vimium插件，安装它&lt;/p&gt;
&lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;p&gt;1. 快捷键列表，列出常用部分，其他的可以敲？查看所有列表．也可自己定制．&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;? =&amp;gt; 打开帮助
j, &amp;lt;c-e&amp;gt; =&amp;gt; 向下滚动
k, &amp;lt;c-y&amp;gt; =&amp;gt; 向上滚动
h =&amp;gt; 向做滚动，页面很宽
l =&amp;gt; 向右滚动
gg =&amp;gt; 滚动到顶部
G =&amp;gt; 滚动到底部
zH =&amp;gt; 滚动到最左边
zL =&amp;gt; 滚动到最右边
d =&amp;gt; 向下滚一页
u =&amp;gt; 向上滚一页
r =&amp;gt; 刷新
gs, &amp;lt;c-u&amp;gt; =&amp;gt; 查看源码
yy =&amp;gt; 复制当前ｕｒｌ到剪切板
yf =&amp;gt; 复制页面中的某一个ｕｒｌ到剪切板
p =&amp;gt; 当前页打开ｕｒｌ
P =&amp;gt; 新开一个ｔａｂ页面打开复制的ｕｒｌ
f =&amp;gt; 打开一个ｕｒｌ在当前页面
F =&amp;gt; 新开一个页面打开需要的页面
o =&amp;gt; 打开历史中的一个ｕｒｌ，在当前页面
O =&amp;gt; 打开历史中的一个ｕｒｌ，在当前页面,新开ｔａｂ
T =&amp;gt; 打开的页面搜索
b =&amp;gt; 打开一个标签, 在当前页面
B =&amp;gt; 打开一个标签, 在新的ｔａｂ
H =&amp;gt; 历史回退
L =&amp;gt; 历史前进
K, gt =&amp;gt; 定位前一个ｔａｂ
J, gT =&amp;gt; 定位后一个ｔａｂ
t =&amp;gt; 创建一个新的ｔａｂ
yt =&amp;gt; 复制当前ｕｒｌ
x &amp;lt;c-w&amp;gt; =&amp;gt; 关闭当前ｕｒｌ
X&amp;lt;c-s-t&amp;gt; =&amp;gt; 回复打开的ｕｒｌ
&amp;lt;&amp;lt; =&amp;gt; 移动ｔａｂ到左边
&amp;gt;&amp;gt; =&amp;gt; 移动ｔａｂ到右边
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;vimium插件是一个了让你不用鼠标浏览网页的炸天的插件&quot;&gt;&lt;a href=&quot;#vimium插件是一个了让你不用鼠标浏览网页的炸天的插件&quot; class=&quot;headerlink&quot; title=&quot;ｖｉｍｉｕｍ插件是一个了让你不用鼠标浏览网页的炸天的插件&quot;&gt;&lt;/a&gt;ｖｉ
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>时间戳转日期，日期装时间戳快速tempermonkey脚本</title>
    <link href="http://vvotman.github.io/2016/04/13/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%AC%E6%97%A5%E6%9C%9F%EF%BC%8C%E6%97%A5%E6%9C%9F%E8%A3%85%E6%97%B6%E9%97%B4%E6%88%B3%E5%BF%AB%E9%80%9Ftempermonkey%E8%84%9A%E6%9C%AC/"/>
    <id>http://vvotman.github.io/2016/04/13/时间戳转日期，日期装时间戳快速tempermonkey脚本/</id>
    <published>2016-04-13T15:52:00.000Z</published>
    <updated>2016-05-30T02:28:08.219Z</updated>
    
    <content type="html">&lt;p&gt;####　使用　####&lt;br&gt;１．安装ｃｈｒｏｍｅ　ｔｅｍｐｅｒｍｏｎｋｅｙ插件．&lt;br&gt;２．安装此脚本．&lt;br&gt;３．连续按ｔ键３次，　调出时间戳转日期输入框，按回车转换，按ｅｓｃ退出．&lt;br&gt;４．连续按ｄ键３次，调出日期转时间戳选择框，按回车转化，按ｅｓｃ退出．&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// ==UserScript==&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @name         time-date-convertor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @namespace    http://tampermonkey.net/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @version      0.1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @description  press [t/d] key three time then show [timestamp/date] convertor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @author       arvim.lo &amp;lt;bigpao.luo@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @require       http://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @match        http*://*/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// @grant        none&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// ==/UserScript==&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &#39;use strict&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var timeTemplateEle = $(&#39;&amp;lt;div  style=&quot;display: inline; position: fixed; z-index:10000; right: 10px; top: 10px;&quot;&amp;gt;&amp;lt;input type=&quot;number&quot; id=&quot;time-ipt&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;span id=&quot;time-result&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var dateTemplateEle = $(&#39;&amp;lt;div  style=&quot; display: inline; position: fixed; z-index: 10000; right: 10px; top: 10px;&quot;&amp;gt;&amp;lt;input type=&quot;date&quot; id=&quot;date-ipt&quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;span id=&quot;date-result&quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var bodyEle = $(&quot;body&quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var timeResultEle = $(&quot;#time-result&quot;, timeTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var timeIptEle = $(&quot;#time-ipt&quot;, timeTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var cssStyle =  &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;font-size&quot;: &quot;12px&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;padding&quot;: &quot; 5px&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;color&quot;: &quot;#555&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;vertial-align&quot;: &quot;middle&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;border&quot;: &quot;1px solid #ccc&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;border-radius&quot;: &quot;3px&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIptEle.css(cssStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var dateResultEle = $(&quot;#date-result&quot;, dateTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var dateIptEle = $(&quot;#date-ipt&quot;, dateTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dateIptEle.css(cssStyle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var keyCounter = new Map();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 响应ｔ事件，　当ｔ连续三次后，　调出输入框，　输入时间戳，　回车时间计算，　ｅｓｃ键干掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bodyEle.on(&quot;keyup&quot;, &quot;#time-ipt&quot;, function (evt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var timeIptEle = $(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (evt.keyCode == 13) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var value = timeIptEle.val();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ($.trim(value) === &quot;&quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alert(&quot; Please Input Value ! &quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var dateObj = new Date(value * 1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                timeResultEle.html(dateObj.getFullYear() + &#39;/&#39; + (dateObj.getMonth() + 1) + &#39;/&#39; + dateObj.getDate() + &#39; &#39; + dateObj.getHours() + &#39;:&#39; + dateObj.getMinutes() + &#39;:&#39; + dateObj.getSeconds());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (evt.keyCode == 27) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            timeTemplateEle.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 响应ｄ事件，　当日期选择好后，　回车转换成时间ＪａｖａＳｃｒｉｐｔ时间戳,ｅｓｃ键干掉&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bodyEle.on(&quot;keyup&quot;, &quot;#date-ipt&quot;, function (evt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var dateIptEle = $(this);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (evt.keyCode == 13) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var value = dateIptEle.val();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if ($.trim(value) === &quot;&quot;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                alert(&quot; Please Input Date ! &quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var dateObj = new Date(value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dateResultEle.html(dateObj.getTime());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                return;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (evt.keyCode == 27) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dateTemplateEle.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 响应　ｔ，ｄ事件，　当ｔ，ｄ连续三次，　调出时间，日期转ｉｎｐｕｔ框&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bodyEle.on(&quot;keyup&quot;, function (evt) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var keyCode = evt.keyCode,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyFlag = &#39;key-&#39; + keyCode,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        keyCount = keyCounter.get(keyFlag) || 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if (keyCode == 84) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyCounter.set(keyFlag, ++keyCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (keyCount == 3) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bodyEle.prepend(timeTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                timeIptEle.focus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                keyCounter.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else if (keyCode == 68) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyCounter.set(keyFlag, ++keyCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if (keyCount === 3) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                bodyEle.prepend(dateTemplateEle);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                dateIptEle.focus();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                keyCounter.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            keyCounter.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;####　使用　####&lt;br&gt;１．安装ｃｈｒｏｍｅ　ｔｅｍｐｅｒｍｏｎｋｅｙ插件．&lt;br&gt;２．安装此脚本．&lt;br&gt;３．连续按ｔ键３次，　调出时间戳转日期输入框，按回车转换，按ｅｓｃ退出．&lt;br&gt;４．连续按ｄ键３次，调出日期转时间戳选择框，按回车转化，按ｅｓｃ退出．&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>自动更新hosts文件, 访问google, facebook</title>
    <link href="http://vvotman.github.io/2015/12/28/%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0hosts%E6%96%87%E4%BB%B6-%E8%AE%BF%E9%97%AEgoogle-facebook/"/>
    <id>http://vvotman.github.io/2015/12/28/自动更新hosts文件-访问google-facebook/</id>
    <published>2015-12-28T08:39:00.000Z</published>
    <updated>2016-05-30T02:28:08.219Z</updated>
    
    <content type="html">&lt;h5 id=&quot;脚本自动获取-racaljk-project-hosts文件-racaljk自带更新脚本-个人嫌复杂-写此简单能用版本-和本地hosts文件合并-使用–start-–line-保留本地hosts文件行数&quot;&gt;&lt;a href=&quot;#脚本自动获取-racaljk-project-hosts文件-racaljk自带更新脚本-个人嫌复杂-写此简单能用版本-和本地hosts文件合并-使用–start-–line-保留本地hosts文件行数&quot; class=&quot;headerlink&quot; title=&quot;脚本自动获取 racaljk project hosts文件(racaljk自带更新脚本, 个人嫌复杂, 写此简单能用版本), 和本地hosts文件合并, 使用–start, –line 保留本地hosts文件行数&quot;&gt;&lt;/a&gt;脚本自动获取 &lt;a href=&quot;https://github.com/racaljk/hosts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;racaljk project&lt;/a&gt; hosts文件(racaljk自带更新脚本, 个人嫌复杂, 写此简单能用版本), 和本地hosts文件合并, 使用–start, –line 保留本地hosts文件行数&lt;/h5&gt;&lt;h5 id=&quot;基本要求系统&quot;&gt;&lt;a href=&quot;#基本要求系统&quot; class=&quot;headerlink&quot; title=&quot;基本要求系统&quot;&gt;&lt;/a&gt;基本要求系统&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;Python3.x.x&lt;/li&gt;
&lt;li&gt;应hosts文件权限关系&lt;/li&gt;
&lt;li&gt;windows需要使用administrator 权限&lt;/li&gt;
&lt;li&gt;linux需要使用root权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;加入计划任务-windows&quot;&gt;&lt;a href=&quot;#加入计划任务-windows&quot; class=&quot;headerlink&quot; title=&quot;加入计划任务(windows)&quot;&gt;&lt;/a&gt;加入计划任务(windows)&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开开始菜单, 搜索框输入&lt;strong&gt;计划任务&lt;/strong&gt; 或快捷键[win + r] 粘贴 &lt;code&gt;%windir%\system32\taskschd.msc /s&lt;/code&gt;&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/451327/201512/451327-20151228170213417-181074786.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;右击 [任务计划库] -&amp;gt; [创建任务]&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/451327/201512/451327-20151228170224932-659219118.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;常规选项卡, 添加名称, 描述&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/451327/201512/451327-20151228170321089-2002023170.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击触发器选项卡 [新建] 添加触发器, 比如多久运行, 什么时候执行&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/451327/201512/451327-20151228165952292-1171750287.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;点击操作选项卡   [新建] 添加脚本执行&lt;br&gt;&lt;img src=&quot;http://images2015.cnblogs.com/blog/451327/201512/451327-20151228170603885-700230869.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;Linux安装方法&quot;&gt;&lt;a href=&quot;#Linux安装方法&quot; class=&quot;headerlink&quot; title=&quot;Linux安装方法&quot;&gt;&lt;/a&gt;Linux安装方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;添加执行权限. &lt;code&gt;shell&amp;gt; chmod +x UpdateHosts.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;添加计划任务. &lt;code&gt;shell&amp;gt; echo &amp;#39; 0 09 * * * python /path/to/UpdateHosts.py --line 60 --os linux 2&amp;gt;&amp;amp;1 &amp;gt;/dev/null&amp;#39; &amp;gt;&amp;gt; /var/spool/cron/root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;每天9点半更新, 根据自己时间更新&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;UpdateHosts-py-代码如下-欢迎拍砖&quot;&gt;&lt;a href=&quot;#UpdateHosts-py-代码如下-欢迎拍砖&quot; class=&quot;headerlink&quot; title=&quot;UpdateHosts.py 代码如下(欢迎拍砖)&quot;&gt;&lt;/a&gt;UpdateHosts.py 代码如下(欢迎拍砖)&lt;/h5&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/bin/python env&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; argparse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; urllib &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; request&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    The Script get from github racaljk&#39;s hosts project and merge localhost host file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Used: python UPdateHosts.py --help get detail information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Author: Gawim &amp;lt;bigpao.luo@gmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Time: 2015-12-28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Require: python3.x.x&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Notes: please use administrator execute it. before execute script remember backup your hosts file.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    in the first line of hosts, you can set how many line you don&#39;t want replace. for example &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ```hosts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # 11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # Copyright (c) 1993-2009 Microsoft Corp.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        #&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        # This is a sample HOSTS file used by Microsoft TCP/IP for Windows.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;pre&gt;&lt;code&gt;that will keep 11 line
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“””&lt;/p&gt;
&lt;p&gt;WINDOWS_HOST = “C:\Windows\System32\drivers\etc\hosts”&lt;br&gt;LINUX_HOST = “/etc/hosts”&lt;br&gt;GITHUB_HOSTS = “&lt;a href=&quot;https://raw.githubusercontent.com/racaljk/hosts/master/hosts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://raw.githubusercontent.com/racaljk/hosts/master/hosts&lt;/a&gt;“  # copy github racaljk hosts project&lt;/p&gt;
&lt;p&gt;def getParam():&lt;br&gt;    “Obtain The Extran Parameters”&lt;br&gt;    parser = argparse.ArgumentParser()&lt;br&gt;    parser.add_argument(“–start”, help=”Input The Line Which You Need Not To Replace”, default=”0”, type=int)&lt;br&gt;    parser.add_argument(“–line”, help=”Input The Line Which You Need Not To Replace”, default=”50”, type=int)&lt;br&gt;    parser.add_argument(“–os”, help=”What System You Use”, default=”windows”, choices=[“linux”, “window”, “OSX”])&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return parser.parse_args()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;def getHostsNeedContent(hostsPath, lineStart, lineOffset):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;needHostDomain = []
with open(hostsPath, mode=&amp;quot;r+&amp;quot;, encoding=&amp;quot;utf-8&amp;quot;) as fileHandle:
    customerLineNumStr = fileHandle.readline().strip(&amp;quot;#&amp;quot;).strip();
    try:
        customerLineNum = int(customerLineNumStr)
    except ValueError:
        customerLineNum = lineOffset
    fileHandle.seek(lineStart)
    i = 0
    while i &amp;lt; customerLineNum:
        needHostDomain.append(fileHandle.readline())
        i += 1
    return &amp;quot;&amp;quot;.join(needHostDomain)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;def getGitHubHostsAndWriteNewHots(needHostContents, hostsPath):&lt;br&gt;    fileHandle = open(hostsPath, mode=”w”, encoding=”utf-8”)&lt;br&gt;    fileHandle.write(needHostContents)&lt;br&gt;    with request.urlopen(GITHUB_HOSTS) as socketHandle:&lt;br&gt;        for contents in socketHandle:&lt;br&gt;            fileHandle.write(contents.decode(“utf-8”))&lt;br&gt;    fileHandle.close()&lt;br&gt;    return True&lt;/p&gt;
&lt;p&gt;def main():&lt;br&gt;    options = getParam()&lt;br&gt;    if options.os == “windows”:&lt;br&gt;        hostsPath = WINDOWS_HOST&lt;br&gt;    elif options.os == “linux”:&lt;br&gt;        hostsPath = LINUX_HOST&lt;br&gt;    elif options.os == “OSX”:&lt;br&gt;        hostsPath = LINUX_HOST&lt;br&gt;    else:&lt;br&gt;        raise ValueError(“Please Tell Me What System You Used”)&lt;br&gt;    lineStart = options.start&lt;br&gt;    lineOffset = options.line&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;needHostContents = getHostsNeedContent(hostsPath, lineStart, lineOffset)  # get localhost hosts line need merge default start 0 line 50

resultSet = getGitHubHostsAndWriteNewHots(needHostContents, hostsPath)  # get github hosts and merge localhost hosts
print(resultSet);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;“:&lt;br&gt;    main()&lt;/p&gt;
&lt;p&gt;```&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;脚本自动获取-racaljk-project-hosts文件-racaljk自带更新脚本-个人嫌复杂-写此简单能用版本-和本地hosts文件合并-使用–start-–line-保留本地hosts文件行数&quot;&gt;&lt;a href=&quot;#脚本自动获取-racaljk-proj
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP5.4 Trait 使用</title>
    <link href="http://vvotman.github.io/2015/12/25/PHP5-4-Trait-%E4%BD%BF%E7%94%A8/"/>
    <id>http://vvotman.github.io/2015/12/25/PHP5-4-Trait-使用/</id>
    <published>2015-12-25T07:36:00.000Z</published>
    <updated>2016-05-30T02:28:08.215Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Trait-是个什么鬼&quot;&gt;&lt;a href=&quot;#Trait-是个什么鬼&quot; class=&quot;headerlink&quot; title=&quot;Trait 是个什么鬼&quot;&gt;&lt;/a&gt;Trait 是个什么鬼&lt;/h3&gt;&lt;p&gt;PHP Trait 是一个抽象类, 不能实例化, 简单理解就是将trait的代码复制, 粘贴到你使用trait的类中. 和接口对比, 还是有区别的&lt;br&gt;有这么个问题.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
class DbReader extends Mysqli
{
}

class FileReader extends SplFileObject
{
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DbReader, FileReader 都需要些公共方法, 假设都设计为单列模式, 两个类都需要getInstance方法, php不支持多继承, 怎么办?  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
interface Singleton
{
    public static function getInstance();
}

class DbReader extends Mysqli implements Singleton
{
    public static function getInstance(){ return &amp;quot;instanceOfDbReader&amp;quot;;}
}

class FileReader extends SplFileObject implements Singleton
{
    public static function getInstance(){ return &amp;quot;instanceOfFileReader&amp;quot;;}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是你想要的吗? 显然是NO  &lt;/p&gt;
&lt;p&gt;SO PHP特性 Trait  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
trait Singleton
{
    private static $instance;

    public static function getInstance() {
        if (!(self::$instance instanceof self)) {
            self::$instance = new self;
        }
        return self::$instance;
    }
}

class DbReader extends ArrayObject
{
    use Singleton;
}

class  FileReader
{
    use Singleton;
}
$a = DbReader::getInstance();
$b = FileReader::getInstance();
var_dump($a);  //object(DbReader)
var_dump($b);  //object(FileReader)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是不是爽了!!!. &lt;/p&gt;
&lt;h3 id=&quot;使用多个Trait&quot;&gt;&lt;a href=&quot;#使用多个Trait&quot; class=&quot;headerlink&quot; title=&quot;使用多个Trait&quot;&gt;&lt;/a&gt;使用多个Trait&lt;/h3&gt;&lt;p&gt;PHP Trait 是可以多个使用的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
trait Hello
{
    function sayHello() {
        echo &amp;quot;Hello&amp;quot;;
    }
}

trait World
{
    function sayWorld() {
        echo &amp;quot;World&amp;quot;;
    }
}

class MyWorld
{
    use Hello, World;
}

$world = new MyWorld();
echo $world-&amp;gt;sayHello() . &amp;quot; &amp;quot; . $world-&amp;gt;sayWorld(); //Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;是不是很方便!!!  &lt;/p&gt;
&lt;h3 id=&quot;Trait-组装-Trait&quot;&gt;&lt;a href=&quot;#Trait-组装-Trait&quot; class=&quot;headerlink&quot; title=&quot;Trait 组装 Trait&quot;&gt;&lt;/a&gt;Trait 组装 Trait&lt;/h3&gt;&lt;p&gt;多个Trait可以组装成一个Trait  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
trait Hello
{
    function sayHello() {
        echo &amp;quot;Hello&amp;quot;;
    }
}

trait World
{
    function sayWorld() {
        echo &amp;quot;World&amp;quot;;
    }
}
trait HelloWorld
{
    use Hello, World;
}

class MyWorld
{
    use HelloWorld;
}

$world = new MyWorld();
echo $world-&amp;gt;sayHello() . &amp;quot; &amp;quot; . $world-&amp;gt;sayWorld(); //Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Trait-优先级&quot;&gt;&lt;a href=&quot;#Trait-优先级&quot; class=&quot;headerlink&quot; title=&quot;Trait 优先级&quot;&gt;&lt;/a&gt;Trait 优先级&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Trait中的方法重写继承父类的方法.  
当前类中方法复写trait中的方法  

&amp;lt;?php
trait Hello
{
    function sayHello() {
        return &amp;quot;Hello&amp;quot;;
    }

    function sayWorld() {
        return &amp;quot;Trait World&amp;quot;;
    }

    function sayHelloWorld() {
        echo $this-&amp;gt;sayHello() . &amp;quot; &amp;quot; . $this-&amp;gt;sayWorld();
    }

    function sayBaseWorld() {
        echo $this-&amp;gt;sayHello() . &amp;quot; &amp;quot; . parent::sayWorld();
    }
}

class Base
{
    function sayWorld(){
        return &amp;quot;Base World&amp;quot;;
    }
}

class HelloWorld extends Base
{
    use Hello;
    function sayWorld() {
        return &amp;quot;World&amp;quot;;
    }
}

$h =  new HelloWorld();
$h-&amp;gt;sayHelloWorld(); // Hello World
$h-&amp;gt;sayBaseWorld(); // Hello Base World
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;解决Trait冲突&quot;&gt;&lt;a href=&quot;#解决Trait冲突&quot; class=&quot;headerlink&quot; title=&quot;解决Trait冲突&quot;&gt;&lt;/a&gt;解决Trait冲突&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?php
trait Game
{
    function play() {
        echo &amp;quot;Playing a game&amp;quot;;
    }
}

trait Music
{
    function play() {
        echo &amp;quot;Playing music&amp;quot;;
    }
}

class Player
{
    use Game, Music;
}

$player = new Player();
$player-&amp;gt;play(); // Fatal Error

// resolve one
class Player
{
    use Game, Music {
        Music::play insteadof Game;
    }
}

$player = new Player();
$player-&amp;gt;play(); //Playing music

// resolve two
class Player
{
    use Game, Music {
        Game::play as gamePlay;
        Music::play insteadof Game;
    }
}

$player = new Player();
$player-&amp;gt;play(); //Playing music
$player-&amp;gt;gamePlay(); //Playing a game
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用PHP Reflection类 &lt;code&gt;ReflectionClass::getTraits()&lt;/code&gt; 获取类使用的traits. &lt;code&gt;ReflectionClass::getTraitNames()&lt;/code&gt; 获取类中trait名称 &lt;code&gt;ReflectionClass::isTrait()&lt;/code&gt; 此类是否是trait&lt;/p&gt;
&lt;h3 id=&quot;其他特性&quot;&gt;&lt;a href=&quot;#其他特性&quot; class=&quot;headerlink&quot; title=&quot;其他特性&quot;&gt;&lt;/a&gt;其他特性&lt;/h3&gt;&lt;p&gt;trait中的 &lt;code&gt;protected, private&lt;/code&gt; 可以随便访问  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php
trait Message
{
    private $message;

    function alert() {
        $this-&amp;gt;define();
        echo $this-&amp;gt;message;
    }
    abstract function define();
}

class Messenger
{
    use Message;
    function define() {
        $this-&amp;gt;message = &amp;quot;Custom Message&amp;quot;;
    }
}

$messenger = new Messenger;
$messenger-&amp;gt;alert(); //Custom Message
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&quot;http://www.sitepoint.com/using-traits-in-php-5-4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考Shameer C’s Blog&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Trait-是个什么鬼&quot;&gt;&lt;a href=&quot;#Trait-是个什么鬼&quot; class=&quot;headerlink&quot; title=&quot;Trait 是个什么鬼&quot;&gt;&lt;/a&gt;Trait 是个什么鬼&lt;/h3&gt;&lt;p&gt;PHP Trait 是一个抽象类, 不能实例化, 简单理解就是将tr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL单台服务器跑多个实例子</title>
    <link href="http://vvotman.github.io/2015/12/22/MySQL%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%B7%91%E5%A4%9A%E4%B8%AA%E5%AE%9E%E4%BE%8B%E5%AD%90/"/>
    <id>http://vvotman.github.io/2015/12/22/MySQL单台服务器跑多个实例子/</id>
    <published>2015-12-22T08:18:00.000Z</published>
    <updated>2016-05-30T02:28:08.214Z</updated>
    
    <content type="html">&lt;h5 id=&quot;mysqld-multi-命令实现管理&quot;&gt;&lt;a href=&quot;#mysqld-multi-命令实现管理&quot; class=&quot;headerlink&quot; title=&quot;mysqld_multi 命令实现管理&quot;&gt;&lt;/a&gt;mysqld_multi 命令实现管理&lt;/h5&gt;&lt;p&gt;1. 每个mysql实例都需要有独立的数据目录, socket链接, 端口. 所以, 为每个实例创建数据目录  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;到mysql的数据目录下, 复制整个目录(有几个实例,就复制几份), 命名为新的实例名字(任意) (本例子拷贝了3份,分别放在/var/data/data{1,2,3}, Unix, Unix-like 注意文件权限)  
多个实例可以共享一份数据目录, 但强烈不建议, 会有意想不到的问到[mysql官方](http://dev.mysql.com/doc/refman/5.7/en/multiple-data-directories.html)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2. 修改my.cnf文件(本例子跑了3个实例子分别[1,2,3])&lt;br&gt;    &lt;pre&gt;&lt;br&gt;            [client]&lt;/pre&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        # 默认 使用/tmp/mysql.sock1
        socket = /tmp/mysql.sock1

        [mysqld1]
        socket     = /tmp/mysql.sock1
        port       = 3306
        pid-file   = /var/data/data1/data1.pid
        datadir    = /var/data/data1
        user       = mysql

        [mysqld2]
        #mysqld     = /usr/bin/mysqld_safe
        #mysqladmin = /usr/bin/mysqladmin
        socket     = /tmp/mysql.sock2
        port       = 3307
        pid-file   = /var/data/data2/data2.pid
        datadir    = /var/data/data2
        user       = mysql

        [mysqld3]
        #mysqld     = /usr/bin/mysqld_safe
        #mysqladmin = /usr/bin/mysqladmin
        socket     = /tmp/mysql.sock3
        port       = 3308
        pid-file   = /var/data/data3/data3.pid
        datadir    = /var/data/data3
        user       = mysql
&amp;lt;/pre&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3. 启动/停止&lt;br&gt;    &lt;code&gt;mysqld_multi [OPTIONS] {start|stop|report} [GNR,GNR,GNR...]&lt;/code&gt;&lt;br&gt;    &lt;strong&gt;GNR&lt;/strong&gt; 表示组名,本例子 启动所有 为 &lt;code&gt;mysqld_multi start 1-3&lt;/code&gt;, 启动单个 &lt;code&gt;mysqld_multi start 1&lt;/code&gt;&lt;br&gt;    同理 停止 &lt;code&gt;mysqld_multi stop 1-3&lt;/code&gt;  &lt;/p&gt;
&lt;h4 id=&quot;mysqld-safe-实现&quot;&gt;&lt;a href=&quot;#mysqld-safe-实现&quot; class=&quot;headerlink&quot; title=&quot;mysqld_safe 实现&quot;&gt;&lt;/a&gt;mysqld_safe 实现&lt;/h4&gt;&lt;p&gt;1. 这种方式实现很简单了, 直接使用命令&lt;br&gt;    &lt;pre&gt;&lt;br&gt;        mysqld_safe –defaults-file=/etc/my1.cnf –user=mysql &amp;amp;&lt;br&gt;        mysqld_safe –defaults-file=/etc/my2.cnf –user=mysql &amp;amp;&lt;br&gt;        mysqld_safe –datadir=/var/data/data3 –pid-file=/var/data/data3/data3.pid –socket=/tmp/mysql.sock3 –user=mysql &amp;amp;&lt;br&gt;    &lt;/pre&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;mysqld-multi-命令实现管理&quot;&gt;&lt;a href=&quot;#mysqld-multi-命令实现管理&quot; class=&quot;headerlink&quot; title=&quot;mysqld_multi 命令实现管理&quot;&gt;&lt;/a&gt;mysqld_multi 命令实现管理&lt;/h5&gt;&lt;p&gt;1.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RazorSQL 注册码</title>
    <link href="http://vvotman.github.io/2015/09/29/RazorSQL-%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    <id>http://vvotman.github.io/2015/09/29/RazorSQL-注册码/</id>
    <published>2015-09-29T15:25:00.000Z</published>
    <updated>2016-05-30T02:28:08.215Z</updated>
    
    <content type="html">&lt;p&gt;RazorSQL 是一个非开源的功能非常强大数据库查询工具、SQL的编辑、数据库管理工具。支持通过 JDBC 和 ODBC 连接超过 29 种的数据库。&lt;/p&gt;
&lt;p&gt;RazorSQL是一个SQL查询工具，数据库浏览器，SQL编辑器和数据库管理工具，在Windows，Mac OS X，Linux上，和Solaris。&lt;/p&gt;
&lt;p&gt;RazorSQL is an SQL query tool, database browser, SQL editor, and database administration tool for Windows, Mac OS X, Linux, and Solaris.&lt;/p&gt;
&lt;p&gt;RYVBTQFCNUEHE7XARCD78VR&lt;/p&gt;
&lt;p&gt;FF6J4RYVNXJXSUYSZJV49BZ&lt;/p&gt;
&lt;p&gt;FUQSCFTPF4Z4XZMYZJV49BR&lt;/p&gt;
&lt;p&gt;FGBMVYETCKBHHTNGBHD43KB&lt;/p&gt;
&lt;p&gt;FUBKZXPQ4STUL24GVMJ43KV&lt;/p&gt;
&lt;p&gt;F6ZEYD8WAJSZGERCRKJ67BR&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;RazorSQL 是一个非开源的功能非常强大数据库查询工具、SQL的编辑、数据库管理工具。支持通过 JDBC 和 ODBC 连接超过 29 种的数据库。&lt;/p&gt;
&lt;p&gt;RazorSQL是一个SQL查询工具，数据库浏览器，SQL编辑器和数据库管理工具，在Windows，Mac
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS jemalloc库缺失问题</title>
    <link href="http://vvotman.github.io/2015/09/14/CentOS-jemalloc%E5%BA%93%E7%BC%BA%E5%A4%B1%E9%97%AE%E9%A2%98/"/>
    <id>http://vvotman.github.io/2015/09/14/CentOS-jemalloc库缺失问题/</id>
    <published>2015-09-14T03:45:00.000Z</published>
    <updated>2016-05-30T04:01:07.959Z</updated>
    
    <content type="html">&lt;h4 id=&quot;jemalloc-库安装&quot;&gt;&lt;a href=&quot;#jemalloc-库安装&quot; class=&quot;headerlink&quot; title=&quot;jemalloc 库安装&quot;&gt;&lt;/a&gt;jemalloc 库安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近编译redis, varnish老薄jemalloc缺失.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;到&lt;a href=&quot;https://dl.fedoraproject.org/pub/epel/6/x86_64/repoview/jemalloc.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网站&lt;/a&gt;下载对应的rpm包&lt;/p&gt;
&lt;p&gt; rpm -ivh jemalloc-3.6.0-1.el6.{i686 | X86_64}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在编译一次&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;jemalloc-库安装&quot;&gt;&lt;a href=&quot;#jemalloc-库安装&quot; class=&quot;headerlink&quot; title=&quot;jemalloc 库安装&quot;&gt;&lt;/a&gt;jemalloc 库安装&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最近编译redis, varnish老薄j
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>判断ip是内网还是外网, 判断请求来之pc还是mobile</title>
    <link href="http://vvotman.github.io/2015/09/10/%E5%88%A4%E6%96%ADip%E6%98%AF%E5%86%85%E7%BD%91%E8%BF%98%E6%98%AF%E5%A4%96%E7%BD%91-%E5%88%A4%E6%96%AD%E8%AF%B7%E6%B1%82%E6%9D%A5%E4%B9%8Bpc%E8%BF%98%E6%98%AFmobile/"/>
    <id>http://vvotman.github.io/2015/09/10/判断ip是内网还是外网-判断请求来之pc还是mobile/</id>
    <published>2015-09-10T07:01:00.000Z</published>
    <updated>2016-05-30T04:01:07.961Z</updated>
    
    <content type="html">&lt;h3 id=&quot;判断内网ip&quot;&gt;&lt;a href=&quot;#判断内网ip&quot; class=&quot;headerlink&quot; title=&quot;判断内网ip&quot;&gt;&lt;/a&gt;判断内网ip&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_internal_id&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($ip_address)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $get_ip_number = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($ip)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ip_segment = explode(&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, $ip);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!is_array($ip_segment) || count($ip_segment) != &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $ip_num = $ip_segment[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; + $ip_segment[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; + $ip_segment[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] * &lt;span class=&quot;number&quot;&gt;256&lt;/span&gt; + $ip_segment[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $ip_num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $process_ip = $get_ip_number($ip_address);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         * 私有IP：A类  10.0.0.0    -10.255.255.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *       B类  172.16.0.0  -172.31.255.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *       C类  192.168.0.0 -192.168.255.255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         *       D类   127.0.0.0   -127.255.255.255(环回地址)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $a_begin = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;10.0.0.0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $a_end = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;10.255.255.255&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($process_ip &amp;gt;= $a_begin &amp;amp;&amp;amp; $process_ip &amp;lt;= $a_end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $b_begin = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;172.16.0.0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $b_end = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;172.31.255.255&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($process_ip &amp;gt;= $b_begin &amp;amp;&amp;amp; $process_ip &amp;lt;= $b_end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $c_begin = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;192.168.0.0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $c_end = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;192.168.255.255&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($process_ip &amp;gt;= $c_begin &amp;amp;&amp;amp; $process_ip &amp;lt;= $c_end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $d_begin = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;127.0.0.0&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $d_end = $get_ip_number(&lt;span class=&quot;string&quot;&gt;&quot;127.255.255.255&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;($process_ip &amp;gt;= $d_begin &amp;amp;&amp;amp; $process_ip &amp;lt;= $d_end)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;PHP-自带判断私有ip-方法&quot;&gt;&lt;a href=&quot;#PHP-自带判断私有ip-方法&quot; class=&quot;headerlink&quot; title=&quot;PHP 自带判断私有ip 方法&quot;&gt;&lt;/a&gt;PHP 自带判断私有ip 方法&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;is_private_ip&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;($ip)&lt;/span&gt; &lt;/span&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;判断Mobile-还是pc&quot;&gt;&lt;a href=&quot;#判断Mobile-还是pc&quot; class=&quot;headerlink&quot; title=&quot;判断Mobile,还是pc&quot;&gt;&lt;/a&gt;判断Mobile,还是pc&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ismobile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $is_mobile = &lt;span class=&quot;string&quot;&gt;&#39;0&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(preg_match(&lt;span class=&quot;string&quot;&gt;&#39;/(android|up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone)/i&#39;&lt;/span&gt;, strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_USER_AGENT&#39;&lt;/span&gt;]))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $is_mobile=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((strpos(strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_ACCEPT&#39;&lt;/span&gt;]),&lt;span class=&quot;string&quot;&gt;&#39;application/vnd.wap.xhtml+xml&#39;&lt;/span&gt;)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; ((&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_X_WAP_PROFILE&#39;&lt;/span&gt;]) &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_PROFILE&#39;&lt;/span&gt;])))) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $is_mobile=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $mobile_ua = strtolower(substr($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_USER_AGENT&#39;&lt;/span&gt;],&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $mobile_agents = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;w3c &#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;acs-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;alav&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;alca&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;amoi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;andr&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;audi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;avan&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;benq&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;bird&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;blac&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;blaz&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;brew&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;cell&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;cldc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;cmd-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;dang&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;doco&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;eric&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;hipt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;inno&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;ipaq&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;java&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;jigs&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;kddi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;keji&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;leno&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;lg-c&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;lg-d&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;lg-g&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;lge-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;maui&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;maxo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;midp&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mits&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mmef&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mobi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mot-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;moto&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;mwbp&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;nec-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;newt&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;noki&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;oper&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;palm&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;pana&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;pant&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;phil&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;play&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;port&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;prox&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;qwap&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sage&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sams&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sany&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sch-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sec-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;send&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;seri&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sgh-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;shar&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sie-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;siem&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;smal&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;smar&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sony&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;sph-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;symb&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;t-mo&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;teli&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;tim-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;tosh&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;tsm-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;upg1&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;upsi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;vk-v&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;voda&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wap-&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wapa&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wapi&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wapp&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;wapr&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;webc&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;winw&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;winw&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;xda&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;xda-&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(in_array($mobile_ua,$mobile_agents)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $is_mobile=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;ALL_HTTP&#39;&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strpos(strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;ALL_HTTP&#39;&lt;/span&gt;]),&lt;span class=&quot;string&quot;&gt;&#39;OperaMini&#39;&lt;/span&gt;)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $is_mobile=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (strpos(strtolower($_SERVER[&lt;span class=&quot;string&quot;&gt;&#39;HTTP_USER_AGENT&#39;&lt;/span&gt;]),&lt;span class=&quot;string&quot;&gt;&#39;windows&#39;&lt;/span&gt;)&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $is_mobile=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $is_mobile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var_dump(ismobile());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;判断内网ip&quot;&gt;&lt;a href=&quot;#判断内网ip&quot; class=&quot;headerlink&quot; title=&quot;判断内网ip&quot;&gt;&lt;/a&gt;判断内网ip&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CentOS6.5(Kernel2.6) Compile PHP5.6</title>
    <link href="http://vvotman.github.io/2015/08/30/CentOS6-5-Kernel2-6-Compile-PHP5-6-1/"/>
    <id>http://vvotman.github.io/2015/08/30/CentOS6-5-Kernel2-6-Compile-PHP5-6-1/</id>
    <published>2015-08-29T16:15:00.000Z</published>
    <updated>2016-05-30T02:28:08.206Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;CentOS的镜像源php版本是5.3,好旧，使用5.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;到php官方网站下载最新的phpxxx.tar.bz2 &lt;a href=&quot;http://php.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;php official website&lt;/a&gt;,后使用命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   wget &lt;a href=&quot;http://bg2.php.net/get/php-5.6.12.tar.bz2/from/this/mirror&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bg2.php.net/get/php-5.6.12.tar.bz2/from/this/mirror&lt;/a&gt; php-5.6.12.tar.bz2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;解压包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   tar -jxvf php-5.6.12.tar.bz2 &amp;amp;&amp;amp; cd php-5.6.12&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;安装编译php依赖&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum install gcc bison bison-devel zlib-devel libmcrypt-devel mcrypt mhash-devel openssl-devel libxml2-devel libcurl-devel bzip2-devel readline-devel libedit-devel sqlite-devel
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;编译&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--prefix=/usr/local/php56 \
-with-config-file-path=/usr/local/php56/etc \
  --enable-inline-optimization \
  --disable-debug \
  --disable-rpath \
  --enable-shared \
  --enable-opcache \
  --enable-fpm \
  --with-fpm-user=www \
  --with-fpm-group=www \
  --with-mysql=mysqlnd \
  --with-mysqli=mysqlnd \
  --with-pdo-mysql=mysqlnd \
  --with-gettext \
  --enable-mbstring \
  --with-iconv \
  --with-mcrypt \
  --with-mhash \
  --with-openssl \
  --enable-bcmath \
  --enable-soap \
  --with-libxml-dir \
  --enable-pcntl \
  --enable-shmop \
  --enable-sysvmsg \
  --enable-sysvsem \
  --enable-sysvshm \
  --enable-sockets \
  --with-curl \
  --with-zlib \
  --enable-zip \
  --with-bz2 \
  --with-readline   \
 --with-apxs2=/usr/sbin/apxs \ 

(参数[**_--with-apxs2=FILE _**]php是以模块形式加入到httpd服务中运行需要家此参数, (nginx做web服务时候是不需要的) 如果没有apxs命令,使用yum install httpd-devel包)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;httpd添加php模块支持,找多对应httpd配置文件,(etc. vim /etc/httpd/conf/httpd.conf)添加如下行&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DirectoryIndex index.html index.html.var index.php

LoadModule php5_module        /usr/lib64/httpd/modules/libphp5.so

PHPIniDir /usr/local/php56/etc/php.ini

AddType application/x-httpd-php .php   
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;测试是否成功&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[sudo] service httpd start

echo &amp;apos;&amp;lt;?php phpinfo();&amp;apos; &amp;gt; /var/www/html/index.php (ps: /var/www/html 为CentOS默认路径,根据自己配置的,对应配置即可)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS的镜像源php版本是5.3,好旧，使用5.6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;到php官方网站下载最新的phpxxx.tar.bz2 &lt;a href=&quot;http://php.net&quot; targ
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PHP分页算法</title>
    <link href="http://vvotman.github.io/2015/08/27/PHP%E5%88%86%E9%A1%B5%E7%AE%97%E6%B3%95/"/>
    <id>http://vvotman.github.io/2015/08/27/PHP分页算法/</id>
    <published>2015-08-27T14:32:00.000Z</published>
    <updated>2016-05-30T02:28:08.215Z</updated>
    
    <content type="html">&lt;h3 id=&quot;PHP分页算法&quot;&gt;&lt;a href=&quot;#PHP分页算法&quot; class=&quot;headerlink&quot; title=&quot;PHP分页算法&quot;&gt;&lt;/a&gt;PHP分页算法&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;script src=&quot;//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/head&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div class=&quot;container&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo getPaginationString($page, $total = 80, $limit = 5, $adjacents = 1, $targetpage = &#39;/php/demo.php&#39;, $pagestring = &#39;?page=&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//$page = isset($_GET[&#39;page&#39;]) ? $_GET[&#39;page&#39;] : 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//echo getPaginationString2($page, $total = 80, $limit = 5, $showPageCount = 5, $targetpage = &#39;/php/demo.php&#39;, $pagestring = &#39;?page=&#39;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//function to return the pagination string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getPaginationString($page = 1, $totalitems, $limit = 15, $adjacents = 3, $targetpage = &quot;/&quot;, $pagestring = &quot;?page=&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //defaults&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(!$adjacents) $adjacents = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(!$limit) $limit = 15;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(!$page) $page = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(!$targetpage) $targetpage = &quot;/&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //other vars&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $prev = $page - 1;                                    //previous page is page - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $next = $page + 1;                                    //next page is page + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $lastpage = ceil($totalitems / $limit);                //lastpage is = total items / items per page, rounded up.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $lpm1 = $lastpage - 1;                                //last page minus 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Now we apply our rules and draw the pagination object.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        We&#39;re actually saving the code to a variable in case we want to draw it more than once.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $pagination = &quot;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if($lastpage &amp;gt; 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $pagination .= &quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //previous button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ($page &amp;gt; 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $pagination .= &quot;*   [« prev](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $pagination .= &quot;*   &amp;lt;span class=\&quot;disabled\&quot;&amp;gt;« prev&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ($lastpage &amp;lt; 7 + ($adjacents * 2))    //not enough pages to bother breaking it up&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            for ($counter = 1; $counter &amp;lt;= $lastpage; $counter++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                if ($counter == $page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    $pagination .= &quot;*   &amp;lt;span class=\&quot;current\&quot;&amp;gt;$counter&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    $pagination .= &quot;*   [$counter](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        elseif($lastpage &amp;gt;= 7 + ($adjacents * 2))    //enough pages to hide some&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //close to beginning; only hide later pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            if($page &amp;lt; 1 + ($adjacents * 3))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for ($counter = 1; $counter &amp;lt; 4 + ($adjacents * 2); $counter++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if ($counter == $page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   &amp;lt;span class=\&quot;current\&quot;&amp;gt;$counter&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   [$counter](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   &amp;lt;span class=\&quot;elipses\&quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [$lpm1](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [$lastpage](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //in middle; hide some front and some back&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            elseif($lastpage - ($adjacents * 2) &amp;gt; $page &amp;amp;&amp;amp; $page &amp;gt; ($adjacents * 2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [1](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [2](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   &amp;lt;span class=\&quot;elipses\&quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for ($counter = $page - $adjacents; $counter &amp;lt;= $page + $adjacents; $counter++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if ($counter == $page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   &amp;lt;span class=\&quot;current\&quot;&amp;gt;$counter&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   [$counter](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [...](javascript:;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [$lpm1](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [$lastpage](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            //close to end; only hide early pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [1](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   [2](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $pagination .= &quot;*   &amp;lt;span class=\&quot;elipses\&quot;&amp;gt;...&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                for ($counter = $lastpage - (1 + ($adjacents * 3)); $counter &amp;lt;= $lastpage; $counter++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    if ($counter == $page)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   &amp;lt;span class=\&quot;current\&quot;&amp;gt;$counter&amp;lt;/span&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        $pagination .= &quot;*   [$counter](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //next button&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if ($page &amp;lt; $counter - 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $pagination .= &quot;*   [next »](\)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $pagination .= &quot;*   &amp;lt;span class=\&quot;disabled\&quot;&amp;gt;next &amp;amp;raquo;&amp;lt;/span&amp;gt;\n&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return $pagination;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function getPaginationString2($page = null, $totalItems = null, $limit = 5, $showPageCount = 4, $target = &#39;/&#39;, $pageString = &#39;?page=&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $totalPage = ceil($totalItems / $limit); // compute total page&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if(($offset = ($page + floor($showPageCount / 2))) &amp;gt; $totalPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $offset = $totalPage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if($page + floor($showPageCount / 2) &amp;gt; $totalPage)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $counter = $totalPage - floor($showPageCount / 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $counter = ($computerPage = $page - floor($showPageCount / 2)) &amp;gt; 0 ? $computerPage : 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $pagination = &#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    for($counter; $counter &amp;lt; $offset; $counter++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        $pagination .= &#39;*   [&#39;.$counter . &#39;]()&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return $pagination;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog2015/451327/201508/272231215945352.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;PHP分页算法&quot;&gt;&lt;a href=&quot;#PHP分页算法&quot; class=&quot;headerlink&quot; title=&quot;PHP分页算法&quot;&gt;&lt;/a&gt;PHP分页算法&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Knockoutjs 实现省市联动</title>
    <link href="http://vvotman.github.io/2015/08/25/Knockoutjs-%E5%AE%9E%E7%8E%B0%E7%9C%81%E5%B8%82%E8%81%94%E5%8A%A8/"/>
    <id>http://vvotman.github.io/2015/08/25/Knockoutjs-实现省市联动/</id>
    <published>2015-08-24T16:22:00.000Z</published>
    <updated>2016-05-30T02:28:08.214Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Knockoutjs-实现省市联动&quot;&gt;&lt;a href=&quot;#Knockoutjs-实现省市联动&quot; class=&quot;headerlink&quot; title=&quot;Knockoutjs 实现省市联动&quot;&gt;&lt;/a&gt;Knockoutjs 实现省市联动&lt;/h2&gt;&lt;p&gt;html code&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bower_components/bootstrap/dist/css/bootstrap.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;rel&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bower_components/bootstrap/dist/css/bootstrap-theme.css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bower_components/jquery/dist/jquery.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bower_components/bootstrap/dist/js/bootstrap.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;bower_components/knockoutjs/dist/knockout.debug.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;row&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;col-md-3&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;country&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form-control&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;options: countryArray, optionsText: &#39;countryName&#39;, optionsValue: &#39;countryId&#39;, value: countryValue, optionsCaption: &#39;please select&#39;, event:&amp;#123;&#39;change&#39;: getCity&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;col-md-2&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;village&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form-control&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data-bind&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;visible: countryValue, options: cityArray, optionsText: &#39;cityName&#39;, optionsCaption: &#39;Please select&#39;, optionsValue: &#39;cityId&#39;, value: &#39;cityValue&#39;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;select&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        var countryModel = function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var that = this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            that.countryArray = ko.observableArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            that.countryValue = ko.observable();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $.getJSON(&#39;http://localhost/demo.php&#39;, function(response) &amp;#123;//动态获取国家&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                that.countryArray(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            that.getCity = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                var id = that.countryValue();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $.getJSON(&#39;http://localhost/demo.php&#39;, &amp;#123;id: id&amp;#125;, function(response)&amp;#123;//动态获取城市&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    that.cityArray(response);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            that.cityArray = ko.observableArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ko.applyBindings(new countryModel());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;javascript code&lt;/p&gt;
&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?php&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$country = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;china&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;japan&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;korean&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;countryId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;] == &lt;span class=&quot;string&quot;&gt;&#39;1&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $city = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;beijing&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;shanghai&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode($city);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $city = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;dongjing&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;daban&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode($city);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;isset&lt;/span&gt;($_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;]) &amp;amp;&amp;amp; $_GET[&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $city = &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;首尔&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;array&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityName&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;string&quot;&gt;&#39;ahha&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&#39;cityId&#39;&lt;/span&gt; =&amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode($city);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; json_encode($country);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Knockoutjs-实现省市联动&quot;&gt;&lt;a href=&quot;#Knockoutjs-实现省市联动&quot; class=&quot;headerlink&quot; title=&quot;Knockoutjs 实现省市联动&quot;&gt;&lt;/a&gt;Knockoutjs 实现省市联动&lt;/h2&gt;&lt;p&gt;html code&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL InnoDB存储引擎外键约束</title>
    <link href="http://vvotman.github.io/2015/08/14/MySQL-InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F/"/>
    <id>http://vvotman.github.io/2015/08/14/MySQL-InnoDB存储引擎外键约束/</id>
    <published>2015-08-14T03:22:00.000Z</published>
    <updated>2016-05-30T02:28:08.214Z</updated>
    
    <content type="html">&lt;h2 id=&quot;InnoDB存储引擎-外键约束&quot;&gt;&lt;a href=&quot;#InnoDB存储引擎-外键约束&quot; class=&quot;headerlink&quot; title=&quot;InnoDB存储引擎 外键约束&quot;&gt;&lt;/a&gt;InnoDB存储引擎 外键约束&lt;/h2&gt;&lt;p&gt;语法:&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;TEMPORARY&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt;] tbl_name [&lt;span class=&quot;keyword&quot;&gt;CONSTRAINT&lt;/span&gt; [symbol]] FOREIGN &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; [index_name] (index_col_name,...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;REFERENCES&lt;/span&gt; tbl_name(index_col_name,...) &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;DELETE&lt;/span&gt;  [RESTRICT | &lt;span class=&quot;keyword&quot;&gt;CASCADE&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;NO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ACTION&lt;/span&gt;] &lt;span class=&quot;keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;UPDATE&lt;/span&gt; [RESTRICT | &lt;span class=&quot;keyword&quot;&gt;CASCADE&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;SET&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; | &lt;span class=&quot;keyword&quot;&gt;NO&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ACTION&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方文档参考&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文讨论 ON {DELETE , UPDATE} [RESTRICT | CASCADE | SET DEFAULT | NO ACTION | SET NULL]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ON DELETE | UPDATE 表示父表在发生删除, 更新事件的时候,子表对应的操作&lt;/li&gt;
&lt;li&gt;RESTRICT 表示当子表有数据关联到父表的数据时候, 不能删除父表的数据&lt;/li&gt;
&lt;li&gt;CASCADE  表示删除或更新父表数据的时候, 对应也会相应跟删除或更新子表的数据. Note: 到5.6版本为止, 还不支持事务&lt;/li&gt;
&lt;li&gt;SET DEFAULT MySQL占不支持InnoDB表&lt;/li&gt;
&lt;li&gt;NO ACTION MySQL中的NO ACTION可理解为RESTRICT, 有些数据库延迟检查功能, MySQL是即时检查,所以和RESTRICT一样的&lt;/li&gt;
&lt;li&gt;SET NULL 父表中的删除或更新数据, 子表中的有关联约束的字段设置为NULL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.mysql.com/doc/refman/5.6/en/create-table-foreign-keys.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方参考文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;InnoDB存储引擎-外键约束&quot;&gt;&lt;a href=&quot;#InnoDB存储引擎-外键约束&quot; class=&quot;headerlink&quot; title=&quot;InnoDB存储引擎 外键约束&quot;&gt;&lt;/a&gt;InnoDB存储引擎 外键约束&lt;/h2&gt;&lt;p&gt;语法:&lt;/p&gt;
&lt;figure cl
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Haproxy Configuration</title>
    <link href="http://vvotman.github.io/2015/07/27/Haproxy-Configuration/"/>
    <id>http://vvotman.github.io/2015/07/27/Haproxy-Configuration/</id>
    <published>2015-07-27T07:52:00.000Z</published>
    <updated>2016-05-30T02:28:08.213Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;pre&gt;&lt;code&gt;       haproxy
 configuration manual
----------------------
     version 1.6
    willy tarreau
     2015/07/22
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;this document covers the configuration language as implemented in the version&lt;br&gt;specified above. it does not provide any hint, example or advice. for such&lt;br&gt;documentation, please refer to the reference manual or the architecture manual.&lt;br&gt;the summary below is meant to help you search sections by name and navigate&lt;br&gt;through the document.&lt;/p&gt;
&lt;p&gt;note to documentation contributors :&lt;br&gt;    this document is formatted with 80 columns per line, with even number of&lt;br&gt;    spaces for indentation and without tabs. please follow these rules strictly&lt;br&gt;    so that it remains easily printable everywhere. if a line needs to be&lt;br&gt;    printed verbatim and does not fit, please end each line with a backslash&lt;br&gt;    (‘\’) and continue on next line, indented by two characters. it is also&lt;br&gt;    sometimes useful to prefix all output lines (logs, console outs) with 3&lt;br&gt;    closing angle brackets (‘&amp;gt;&amp;gt;&amp;gt;’) in order to help get the difference between&lt;br&gt;    inputs and outputs when it can become ambiguous. if you add sections,&lt;br&gt;    please update the summary below for easier searching.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;&lt;a href=&quot;#summary&quot; class=&quot;headerlink&quot; title=&quot;summary&quot;&gt;&lt;/a&gt;summary&lt;/h2&gt;&lt;p&gt;1.    quick reminder about http&lt;br&gt;1.1.      the http transaction model&lt;br&gt;1.2.      http request&lt;br&gt;1.2.1.        the request line&lt;br&gt;1.2.2.        the request headers&lt;br&gt;1.3.      http response&lt;br&gt;1.3.1.        the response line&lt;br&gt;1.3.2.        the response headers&lt;/p&gt;
&lt;p&gt;2.    configuring haproxy&lt;br&gt;2.1.      configuration file format&lt;br&gt;2.2.      quoting and escaping&lt;br&gt;2.3.      environment variables&lt;br&gt;2.4.      time format&lt;br&gt;2.5.      examples&lt;/p&gt;
&lt;p&gt;3.    global parameters&lt;br&gt;3.1.      process management and security&lt;br&gt;3.2.      performance tuning&lt;br&gt;3.3.      debugging&lt;br&gt;3.4.      userlists&lt;br&gt;3.5.      peers&lt;/p&gt;
&lt;p&gt;4.    proxies&lt;br&gt;4.1.      proxy keywords matrix&lt;br&gt;4.2.      alphabetically sorted keywords reference&lt;/p&gt;
&lt;p&gt;5.    bind and server options&lt;br&gt;5.1.      bind options&lt;br&gt;5.2.      server and default-server options&lt;br&gt;5.3.      server dns resolution&lt;br&gt;5.3.1.      global overview&lt;br&gt;5.3.2.      the resolvers section&lt;/p&gt;
&lt;p&gt;6.    http header manipulation&lt;/p&gt;
&lt;p&gt;7.    using acls and fetching samples&lt;br&gt;7.1.      acl basics&lt;br&gt;7.1.1.      matching booleans&lt;br&gt;7.1.2.      matching integers&lt;br&gt;7.1.3.      matching strings&lt;br&gt;7.1.4.      matching regular expressions (regexes)&lt;br&gt;7.1.5.      matching arbitrary data blocks&lt;br&gt;7.1.6.      matching ipv4 and ipv6 addresses&lt;br&gt;7.2.      using acls to form conditions&lt;br&gt;7.3.      fetching samples&lt;br&gt;7.3.1.        converters&lt;br&gt;7.3.2.        fetching samples from internal states&lt;br&gt;7.3.3.        fetching samples at layer 4&lt;br&gt;7.3.4.        fetching samples at layer 5&lt;br&gt;7.3.5.        fetching samples from buffer contents (layer 6)&lt;br&gt;7.3.6.        fetching http samples (layer 7)&lt;br&gt;7.4.      pre-defined acls&lt;/p&gt;
&lt;p&gt;8.    logging&lt;br&gt;8.1.      log levels&lt;br&gt;8.2.      log formats&lt;br&gt;8.2.1.        default log format&lt;br&gt;8.2.2.        tcp log format&lt;br&gt;8.2.3.        http log format&lt;br&gt;8.2.4.        custom log format&lt;br&gt;8.2.5.        error log format&lt;br&gt;8.3.      advanced logging options&lt;br&gt;8.3.1.        disabling logging of external tests&lt;br&gt;8.3.2.        logging before waiting for the session to terminate&lt;br&gt;8.3.3.        raising log level upon errors&lt;br&gt;8.3.4.        disabling logging of successful connections&lt;br&gt;8.4.      timing events&lt;br&gt;8.5.      session state at disconnection&lt;br&gt;8.6.      non-printable characters&lt;br&gt;8.7.      capturing http cookies&lt;br&gt;8.8.      capturing http headers&lt;br&gt;8.9.      examples of logs&lt;/p&gt;
&lt;p&gt;9.    statistics and monitoring&lt;br&gt;9.1.      csv format&lt;br&gt;9.2.      unix socket commands&lt;/p&gt;
&lt;h2 id=&quot;1-quick-reminder-about-http&quot;&gt;&lt;a href=&quot;#1-quick-reminder-about-http&quot; class=&quot;headerlink&quot; title=&quot;1. quick reminder about http&quot;&gt;&lt;/a&gt;1. quick reminder about http&lt;/h2&gt;&lt;p&gt;when haproxy is running in http mode, both the request and the response are&lt;br&gt;fully analyzed and indexed, thus it becomes possible to build matching criteria&lt;br&gt;on almost anything found in the contents.&lt;/p&gt;
&lt;p&gt;however, it is important to understand how http requests and responses are&lt;br&gt;formed, and how haproxy decomposes them. it will then become easier to write&lt;br&gt;correct rules and to debug existing configurations.&lt;/p&gt;
&lt;h2 id=&quot;1-1-the-http-transaction-model&quot;&gt;&lt;a href=&quot;#1-1-the-http-transaction-model&quot; class=&quot;headerlink&quot; title=&quot;1.1. the http transaction model&quot;&gt;&lt;/a&gt;1.1. the http transaction model&lt;/h2&gt;&lt;p&gt;the http protocol is transaction-driven. this means that each request will lead&lt;br&gt;to one and only one response. traditionally, a tcp connection is established&lt;br&gt;from the client to the server, a request is sent by the client on the&lt;br&gt;connection, the server responds and the connection is closed. a new request&lt;br&gt;will involve a new connection :&lt;/p&gt;
&lt;p&gt;  [con1] [req1] … [resp1] [clo1] [con2] [req2] … [resp2] [clo2] …&lt;/p&gt;
&lt;p&gt;in this mode, called the “http close” mode, there are as many connection&lt;br&gt;establishments as there are http transactions. since the connection is closed&lt;br&gt;by the server after the response, the client does not need to know the content&lt;br&gt;length.&lt;/p&gt;
&lt;p&gt;due to the transactional nature of the protocol, it was possible to improve it&lt;br&gt;to avoid closing a connection between two subsequent transactions. in this mode&lt;br&gt;however, it is mandatory that the server indicates the content length for each&lt;br&gt;response so that the client does not wait indefinitely. for this, a special&lt;br&gt;header is used: “content-length”. this mode is called the “keep-alive” mode :&lt;/p&gt;
&lt;p&gt;  [con] [req1] … [resp1] [req2] … [resp2] [clo] …&lt;/p&gt;
&lt;p&gt;its advantages are a reduced latency between transactions, and less processing&lt;br&gt;power required on the server side. it is generally better than the close mode,&lt;br&gt;but not always because the clients often limit their concurrent connections to&lt;br&gt;a smaller value.&lt;/p&gt;
&lt;p&gt;a last improvement in the communications is the pipelining mode. it still uses&lt;br&gt;keep-alive, but the client does not wait for the first response to send the&lt;br&gt;second request. this is useful for fetching large number of images composing a&lt;br&gt;page :&lt;/p&gt;
&lt;p&gt;  [con] [req1] [req2] … [resp1] [resp2] [clo] …&lt;/p&gt;
&lt;p&gt;this can obviously have a tremendous benefit on performance because the network&lt;br&gt;latency is eliminated between subsequent requests. many http agents do not&lt;br&gt;correctly support pipelining since there is no way to associate a response with&lt;br&gt;the corresponding request in http. for this reason, it is mandatory for the&lt;br&gt;server to reply in the exact same order as the requests were received.&lt;/p&gt;
&lt;p&gt;by default haproxy operates in keep-alive mode with regards to persistent&lt;br&gt;connections: for each connection it processes each request and response, and&lt;br&gt;leaves the connection idle on both sides between the end of a response and the&lt;br&gt;start of a new request.&lt;/p&gt;
&lt;p&gt;haproxy supports 5 connection modes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;keep alive    : all requests and responses are processed (default)&lt;/li&gt;
&lt;li&gt;tunnel        : only the first request and response are processed,&lt;pre&gt;&lt;code&gt;everything else is forwarded with no analysis.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;passive close : tunnel with “connection: close” added in both directions.&lt;/li&gt;
&lt;li&gt;server close  : the server-facing connection is closed after the response.&lt;/li&gt;
&lt;li&gt;forced close  : the connection is actively closed after end of response.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-2-http-request&quot;&gt;&lt;a href=&quot;#1-2-http-request&quot; class=&quot;headerlink&quot; title=&quot;1.2. http request&quot;&gt;&lt;/a&gt;1.2. http request&lt;/h2&gt;&lt;p&gt;first, let’s consider this http request :&lt;/p&gt;
&lt;p&gt;  line     contents&lt;br&gt;  number&lt;br&gt;     1     get /serv/login.php?lang=en&amp;amp;profile=2 http/1.1&lt;br&gt;     2     host: www.mydomain.com&lt;br&gt;     3     user-agent: my small browser&lt;br&gt;     4     accept: image/jpeg, image/gif&lt;br&gt;     5     accept: image/png&lt;/p&gt;
&lt;h2 id=&quot;1-2-1-the-request-line&quot;&gt;&lt;a href=&quot;#1-2-1-the-request-line&quot; class=&quot;headerlink&quot; title=&quot;1.2.1. the request line&quot;&gt;&lt;/a&gt;1.2.1. the request line&lt;/h2&gt;&lt;p&gt;line 1 is the “request line”. it is always composed of 3 fields :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a method      : get&lt;/li&gt;
&lt;li&gt;a uri         : /serv/login.php?lang=en&amp;amp;profile=2&lt;/li&gt;
&lt;li&gt;a version tag : http/1.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;all of them are delimited by what the standard calls lws (linear white spaces),&lt;br&gt;which are commonly spaces, but can also be tabs or line feeds/carriage returns&lt;br&gt;followed by spaces/tabs. the method itself cannot contain any colon (‘:’) and&lt;br&gt;is limited to alphabetic letters. all those various combinations make it&lt;br&gt;desirable that haproxy performs the splitting itself rather than leaving it to&lt;br&gt;the user to write a complex or inaccurate regular expression.&lt;/p&gt;
&lt;p&gt;the uri itself can have several forms :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;a “relative uri” :&lt;/p&gt;
&lt;p&gt;  /serv/login.php?lang=en&amp;amp;profile=2&lt;/p&gt;
&lt;p&gt;it is a complete url without the host part. this is generally what is&lt;br&gt;received by servers, reverse proxies and transparent proxies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an “absolute uri”, also called a “url” :&lt;/p&gt;
&lt;p&gt;  &lt;a href=&quot;http://192.168.0.12:8080/serv/login.php?lang=en&amp;amp;profile=2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://192.168.0.12:8080/serv/login.php?lang=en&amp;amp;profile=2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;it is composed of a “scheme” (the protocol name followed by ‘://‘), a host&lt;br&gt;name or address, optionally a colon (‘:’) followed by a port number, then&lt;br&gt;a relative uri beginning at the first slash (‘/‘) after the address part.&lt;br&gt;this is generally what proxies receive, but a server supporting http/1.1&lt;br&gt;must accept this form too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a star (‘*’) : this form is only accepted in association with the options&lt;br&gt;method and is not relayable. it is used to inquiry a next hop’s&lt;br&gt;capabilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;an address:port combination : 192.168.0.12:80&lt;br&gt;this is used with the connect method, which is used to establish tcp&lt;br&gt;tunnels through http proxies, generally for https, but sometimes for&lt;br&gt;other protocols too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in a relative uri, two sub-parts are identified. the part before the question&lt;br&gt;mark is called the “path”. it is typically the relative path to static objects&lt;br&gt;on the server. the part after the question mark is called the “query string”.&lt;br&gt;it is mostly used with get requests sent to dynamic scripts and is very&lt;br&gt;specific to the language, framework or application in use.&lt;/p&gt;
&lt;h2 id=&quot;1-2-2-the-request-headers&quot;&gt;&lt;a href=&quot;#1-2-2-the-request-headers&quot; class=&quot;headerlink&quot; title=&quot;1.2.2. the request headers&quot;&gt;&lt;/a&gt;1.2.2. the request headers&lt;/h2&gt;&lt;p&gt;the headers start at the second line. they are composed of a name at the&lt;br&gt;beginning of the line, immediately followed by a colon (‘:’). traditionally,&lt;br&gt;an lws is added after the colon but that’s not required. then come the values.&lt;br&gt;multiple identical headers may be folded into one single line, delimiting the&lt;br&gt;values with commas, provided that their order is respected. this is commonly&lt;br&gt;encountered in the “cookie:” field. a header may span over multiple lines if&lt;br&gt;the subsequent lines begin with an lws. in the example in 1.2, lines 4 and 5&lt;br&gt;define a total of 3 values for the “accept:” header.&lt;/p&gt;
&lt;p&gt;contrary to a common mis-conception, header names are not case-sensitive, and&lt;br&gt;their values are not either if they refer to other header names (such as the&lt;br&gt;“connection:” header).&lt;/p&gt;
&lt;p&gt;the end of the headers is indicated by the first empty line. people often say&lt;br&gt;that it’s a double line feed, which is not exact, even if a double line feed&lt;br&gt;is one valid form of empty line.&lt;/p&gt;
&lt;p&gt;fortunately, haproxy takes care of all these complex combinations when indexing&lt;br&gt;headers, checking values and counting them, so there is no reason to worry&lt;br&gt;about the way they could be written, but it is important not to accuse an&lt;br&gt;application of being buggy if it does unusual, valid things.&lt;/p&gt;
&lt;p&gt;important note:&lt;br&gt;   as suggested by rfc2616, haproxy normalizes headers by replacing line breaks&lt;br&gt;   in the middle of headers by lws in order to join multi-line headers. this&lt;br&gt;   is necessary for proper analysis and helps less capable http parsers to work&lt;br&gt;   correctly and not to be fooled by such complex constructs.&lt;/p&gt;
&lt;h2 id=&quot;1-3-http-response&quot;&gt;&lt;a href=&quot;#1-3-http-response&quot; class=&quot;headerlink&quot; title=&quot;1.3. http response&quot;&gt;&lt;/a&gt;1.3. http response&lt;/h2&gt;&lt;p&gt;an http response looks very much like an http request. both are called http&lt;br&gt;messages. let’s consider this http response :&lt;/p&gt;
&lt;p&gt;  line     contents&lt;br&gt;  number&lt;br&gt;     1     http/1.1 200 ok&lt;br&gt;     2     content-length: 350&lt;br&gt;     3     content-type: text/html&lt;/p&gt;
&lt;p&gt;as a special case, http supports so called “informational responses” as status&lt;br&gt;codes 1xx. these messages are special in that they don’t convey any part of the&lt;br&gt;response, they’re just used as sort of a signaling message to ask a client to&lt;br&gt;continue to post its request for instance. in the case of a status 100 response&lt;br&gt;the requested information will be carried by the next non-100 response message&lt;br&gt;following the informational one. this implies that multiple responses may be&lt;br&gt;sent to a single request, and that this only works when keep-alive is enabled&lt;br&gt;(1xx messages are http/1.1 only). haproxy handles these messages and is able to&lt;br&gt;correctly forward and skip them, and only process the next non-100 response. as&lt;br&gt;such, these messages are neither logged nor transformed, unless explicitly&lt;br&gt;state otherwise. status 101 messages indicate that the protocol is changing&lt;br&gt;over the same connection and that haproxy must switch to tunnel mode, just as&lt;br&gt;if a connect had occurred. then the upgrade header would contain additional&lt;br&gt;information about the type of protocol the connection is switching to.&lt;/p&gt;
&lt;h2 id=&quot;1-3-1-the-response-line&quot;&gt;&lt;a href=&quot;#1-3-1-the-response-line&quot; class=&quot;headerlink&quot; title=&quot;1.3.1. the response line&quot;&gt;&lt;/a&gt;1.3.1. the response line&lt;/h2&gt;&lt;p&gt;line 1 is the “response line”. it is always composed of 3 fields :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a version tag : http/1.1&lt;/li&gt;
&lt;li&gt;a status code : 200&lt;/li&gt;
&lt;li&gt;a reason      : ok&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the status code is always 3-digit. the first digit indicates a general status :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx = informational message to be skipped (eg: 100, 101)&lt;/li&gt;
&lt;li&gt;2xx = ok, content is following   (eg: 200, 206)&lt;/li&gt;
&lt;li&gt;3xx = ok, no content following   (eg: 302, 304)&lt;/li&gt;
&lt;li&gt;4xx = error caused by the client (eg: 401, 403, 404)&lt;/li&gt;
&lt;li&gt;5xx = error caused by the server (eg: 500, 502, 503)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;please refer to rfc2616 for the detailed meaning of all such codes. the&lt;br&gt;“reason” field is just a hint, but is not parsed by clients. anything can be&lt;br&gt;found there, but it’s a common practice to respect the well-established&lt;br&gt;messages. it can be composed of one or multiple words, such as “ok”, “found”,&lt;br&gt;or “authentication required”.&lt;/p&gt;
&lt;p&gt;haproxy may emit the following status codes by itself :&lt;/p&gt;
&lt;p&gt;  code  when / reason&lt;br&gt;   200  access to stats page, and when replying to monitoring requests&lt;br&gt;   301  when performing a redirection, depending on the configured code&lt;br&gt;   302  when performing a redirection, depending on the configured code&lt;br&gt;   303  when performing a redirection, depending on the configured code&lt;br&gt;   307  when performing a redirection, depending on the configured code&lt;br&gt;   308  when performing a redirection, depending on the configured code&lt;br&gt;   400  for an invalid or too large request&lt;br&gt;   401  when an authentication is required to perform the action (when&lt;br&gt;        accessing the stats page)&lt;br&gt;   403  when a request is forbidden by a “block” acl or “reqdeny” filter&lt;br&gt;   408  when the request timeout strikes before the request is complete&lt;br&gt;   500  when haproxy encounters an unrecoverable internal error, such as a&lt;br&gt;        memory allocation failure, which should never happen&lt;br&gt;   502  when the server returns an empty, invalid or incomplete response, or&lt;br&gt;        when an “rspdeny” filter blocks the response.&lt;br&gt;   503  when no server was available to handle the request, or in response to&lt;br&gt;        monitoring requests which match the “monitor fail” condition&lt;br&gt;   504  when the response timeout strikes before the server responds&lt;/p&gt;
&lt;p&gt;the error 4xx and 5xx codes above may be customized (see “errorloc” in section&lt;br&gt;4.2).&lt;/p&gt;
&lt;h2 id=&quot;1-3-2-the-response-headers&quot;&gt;&lt;a href=&quot;#1-3-2-the-response-headers&quot; class=&quot;headerlink&quot; title=&quot;1.3.2. the response headers&quot;&gt;&lt;/a&gt;1.3.2. the response headers&lt;/h2&gt;&lt;p&gt;response headers work exactly like request headers, and as such, haproxy uses&lt;br&gt;the same parsing function for both. please refer to paragraph 1.2.2 for more&lt;br&gt;details.&lt;/p&gt;
&lt;h2 id=&quot;2-configuring-haproxy&quot;&gt;&lt;a href=&quot;#2-configuring-haproxy&quot; class=&quot;headerlink&quot; title=&quot;2. configuring haproxy&quot;&gt;&lt;/a&gt;2. configuring haproxy&lt;/h2&gt;&lt;h2 id=&quot;2-1-configuration-file-format&quot;&gt;&lt;a href=&quot;#2-1-configuration-file-format&quot; class=&quot;headerlink&quot; title=&quot;2.1. configuration file format&quot;&gt;&lt;/a&gt;2.1. configuration file format&lt;/h2&gt;&lt;p&gt;haproxy’s configuration process involves 3 major sources of parameters :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the arguments from the command-line, which always take precedence&lt;/li&gt;
&lt;li&gt;the “global” section, which sets process-wide parameters&lt;/li&gt;
&lt;li&gt;the proxies sections which can take form of “defaults”, “listen”,&lt;br&gt;“frontend” and “backend”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the configuration file syntax consists in lines beginning with a keyword&lt;br&gt;referenced in this manual, optionally followed by one or several parameters&lt;br&gt;delimited by spaces.&lt;/p&gt;
&lt;h2 id=&quot;2-2-quoting-and-escaping&quot;&gt;&lt;a href=&quot;#2-2-quoting-and-escaping&quot; class=&quot;headerlink&quot; title=&quot;2.2. quoting and escaping&quot;&gt;&lt;/a&gt;2.2. quoting and escaping&lt;/h2&gt;&lt;p&gt;haproxy’s configuration introduces a quoting and escaping system similar to&lt;br&gt;many programming languages. the configuration file supports 3 types: escaping&lt;br&gt;with a backslash, weak quoting with double quotes, and strong quoting with&lt;br&gt;single quotes.&lt;/p&gt;
&lt;p&gt;if spaces have to be entered in strings, then they must be escaped by preceding&lt;br&gt;them by a backslash (‘\’) or by quoting them. backslashes also have to be&lt;br&gt;escaped by doubling or strong quoting them.&lt;/p&gt;
&lt;p&gt;escaping is achieved by preceding a special character by a backslash (‘\’):&lt;/p&gt;
&lt;p&gt;  \    to mark a space and differentiate it from a delimiter&lt;br&gt;  #   to mark a hash and differentiate it from a comment&lt;br&gt;  \   to use a backslash&lt;br&gt;  \’   to use a single quote and differentiate it from strong quoting&lt;br&gt;  \”   to use a double quote and differentiate it from weak quoting&lt;/p&gt;
&lt;p&gt;weak quoting is achieved by using double quotes (“”). weak quoting prevents&lt;br&gt;the interpretation of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;space as a parameter separator
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  ‘    single quote as a strong quoting delimiter&lt;/p&gt;
&lt;h1 id=&quot;hash-as-a-comment-start&quot;&gt;&lt;a href=&quot;#hash-as-a-comment-start&quot; class=&quot;headerlink&quot; title=&quot;hash as a comment start&quot;&gt;&lt;/a&gt;hash as a comment start&lt;/h1&gt;&lt;p&gt;weak quoting permits the interpretation of variables, if you want to use a non&lt;br&gt;-interpreted dollar within a double quoted string, you should escape it with a&lt;br&gt;backslash (“\$”), it does not work outside weak quoting.&lt;/p&gt;
&lt;p&gt;interpretation of escaping and special characters are not prevented by weak&lt;br&gt;quoting.&lt;/p&gt;
&lt;p&gt;strong quoting is achieved by using single quotes (‘’). inside single quotes,&lt;br&gt;nothing is interpreted, it’s the efficient way to quote regexes.&lt;/p&gt;
&lt;p&gt;quoted and escaped strings are replaced in memory by their interpreted&lt;br&gt;equivalent, it allows you to perform concatenation.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# those are equivalents:
log-format %{+q}o\ %t\ %s\ %{-q}r
log-format &amp;quot;%{+q}o %t %s %{-q}r&amp;quot;
log-format &amp;apos;%{+q}o %t %s %{-q}r&amp;apos;
log-format &amp;quot;%{+q}o %t&amp;quot;&amp;apos; %s %{-q}r&amp;apos;
log-format &amp;quot;%{+q}o %t&amp;quot;&amp;apos; %s&amp;apos;\ %{-q}r

# those are equivalents:
reqrep &amp;quot;^([^\ :]*)\ /static/(.*)&amp;quot;     \1\ /\2
reqrep &amp;quot;^([^ :]*)\ /static/(.*)&amp;quot;     &amp;apos;\1 /\2&amp;apos;
reqrep &amp;quot;^([^ :]*)\ /static/(.*)&amp;quot;     &amp;quot;\1 /\2&amp;quot;
reqrep &amp;quot;^([^ :]*)\ /static/(.*)&amp;quot;     &amp;quot;\1\ /\2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-3-environment-variables&quot;&gt;&lt;a href=&quot;#2-3-environment-variables&quot; class=&quot;headerlink&quot; title=&quot;2.3. environment variables&quot;&gt;&lt;/a&gt;2.3. environment variables&lt;/h2&gt;&lt;p&gt;haproxy’s configuration supports environment variables. those variables are&lt;br&gt;interpreted only within double quotes. variables are expanded during the&lt;br&gt;configuration parsing. variable names must be preceded by a dollar (“$”) and&lt;br&gt;optionally enclosed with braces (“{}”) similarly to what is done in bourne&lt;br&gt;shell. variable names can contain alphanumerical characters or the character&lt;br&gt;underscore (“_”) but should not start with a digit.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bind &amp;quot;fd@${fd_app1}&amp;quot;

log &amp;quot;${local_syslog}:514&amp;quot; local0 notice   # send to local server

user &amp;quot;$haproxy_user&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-4-time-format&quot;&gt;&lt;a href=&quot;#2-4-time-format&quot; class=&quot;headerlink&quot; title=&quot;2.4. time format&quot;&gt;&lt;/a&gt;2.4. time format&lt;/h2&gt;&lt;p&gt;some parameters involve values representing time, such as timeouts. these&lt;br&gt;values are generally expressed in milliseconds (unless explicitly stated&lt;br&gt;otherwise) but may be expressed in any other unit by suffixing the unit to the&lt;br&gt;numeric value. it is important to consider this because it will not be repeated&lt;br&gt;for every keyword. supported units are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;us : microseconds. 1 microsecond = 1/1000000 second&lt;/li&gt;
&lt;li&gt;ms : milliseconds. 1 millisecond = 1/1000 second. this is the default.&lt;/li&gt;
&lt;li&gt;s  : seconds. 1s = 1000ms&lt;/li&gt;
&lt;li&gt;m  : minutes. 1m = 60s = 60000ms&lt;/li&gt;
&lt;li&gt;h  : hours.   1h = 60m = 3600s = 3600000ms&lt;/li&gt;
&lt;li&gt;d  : days.    1d = 24h = 1440m = 86400s = 86400000ms&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-4-examples&quot;&gt;&lt;a href=&quot;#2-4-examples&quot; class=&quot;headerlink&quot; title=&quot;2.4. examples&quot;&gt;&lt;/a&gt;2.4. examples&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;# simple configuration for an http proxy listening on port 80 on all
# interfaces and forwarding requests to a single backend &amp;quot;servers&amp;quot; with a
# single server &amp;quot;server1&amp;quot; listening on 127.0.0.1:8000
global
    daemon
    maxconn 256

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http-in
    bind *:80
    default_backend servers

backend servers
    server server1 127.0.0.1:8000 maxconn 32

# the same configuration defined with a single listen block. shorter but
# less expressive, especially in http mode.
global
    daemon
    maxconn 256

defaults
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

listen http-in
    bind *:80
    server server1 127.0.0.1:8000 maxconn 32
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;assuming haproxy is in $path, test these configurations in a shell with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo haproxy -f configuration.conf -c
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-global-parameters&quot;&gt;&lt;a href=&quot;#3-global-parameters&quot; class=&quot;headerlink&quot; title=&quot;3. global parameters&quot;&gt;&lt;/a&gt;3. global parameters&lt;/h2&gt;&lt;p&gt;parameters in the “global” section are process-wide and often os-specific. they&lt;br&gt;are generally set once for all and do not need being changed once correct. some&lt;br&gt;of them have command-line equivalents.&lt;/p&gt;
&lt;p&gt;the following keywords are supported in the “global” section :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;process management and security&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ca-base&lt;/li&gt;
&lt;li&gt;chroot&lt;/li&gt;
&lt;li&gt;crt-base&lt;/li&gt;
&lt;li&gt;daemon&lt;/li&gt;
&lt;li&gt;external-check&lt;/li&gt;
&lt;li&gt;gid&lt;/li&gt;
&lt;li&gt;group&lt;/li&gt;
&lt;li&gt;log&lt;/li&gt;
&lt;li&gt;log-send-hostname&lt;/li&gt;
&lt;li&gt;nbproc&lt;/li&gt;
&lt;li&gt;pidfile&lt;/li&gt;
&lt;li&gt;uid&lt;/li&gt;
&lt;li&gt;ulimit-n&lt;/li&gt;
&lt;li&gt;user&lt;/li&gt;
&lt;li&gt;stats&lt;/li&gt;
&lt;li&gt;ssl-server-verify&lt;/li&gt;
&lt;li&gt;node&lt;/li&gt;
&lt;li&gt;description&lt;/li&gt;
&lt;li&gt;unix-bind&lt;/li&gt;
&lt;li&gt;51degrees-data-file&lt;/li&gt;
&lt;li&gt;51degrees-property-name-list&lt;/li&gt;
&lt;li&gt;51degrees-property-separator&lt;/li&gt;
&lt;li&gt;51degrees-cache-size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;performance tuning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max-spread-checks&lt;/li&gt;
&lt;li&gt;maxconn&lt;/li&gt;
&lt;li&gt;maxconnrate&lt;/li&gt;
&lt;li&gt;maxcomprate&lt;/li&gt;
&lt;li&gt;maxcompcpuusage&lt;/li&gt;
&lt;li&gt;maxpipes&lt;/li&gt;
&lt;li&gt;maxsessrate&lt;/li&gt;
&lt;li&gt;maxsslconn&lt;/li&gt;
&lt;li&gt;maxsslrate&lt;/li&gt;
&lt;li&gt;noepoll&lt;/li&gt;
&lt;li&gt;nokqueue&lt;/li&gt;
&lt;li&gt;nopoll&lt;/li&gt;
&lt;li&gt;nosplice&lt;/li&gt;
&lt;li&gt;nogetaddrinfo&lt;/li&gt;
&lt;li&gt;spread-checks&lt;/li&gt;
&lt;li&gt;tune.bufsize&lt;/li&gt;
&lt;li&gt;tune.chksize&lt;/li&gt;
&lt;li&gt;tune.comp.maxlevel&lt;/li&gt;
&lt;li&gt;tune.http.cookielen&lt;/li&gt;
&lt;li&gt;tune.http.maxhdr&lt;/li&gt;
&lt;li&gt;tune.idletimer&lt;/li&gt;
&lt;li&gt;tune.lua.forced-yield&lt;/li&gt;
&lt;li&gt;tune.lua.maxmem&lt;/li&gt;
&lt;li&gt;tune.lua.session-timeout&lt;/li&gt;
&lt;li&gt;tune.lua.task-timeout&lt;/li&gt;
&lt;li&gt;tune.maxaccept&lt;/li&gt;
&lt;li&gt;tune.maxpollevents&lt;/li&gt;
&lt;li&gt;tune.maxrewrite&lt;/li&gt;
&lt;li&gt;tune.pattern.cache-size&lt;/li&gt;
&lt;li&gt;tune.pipesize&lt;/li&gt;
&lt;li&gt;tune.rcvbuf.client&lt;/li&gt;
&lt;li&gt;tune.rcvbuf.server&lt;/li&gt;
&lt;li&gt;tune.sndbuf.client&lt;/li&gt;
&lt;li&gt;tune.sndbuf.server&lt;/li&gt;
&lt;li&gt;tune.ssl.cachesize&lt;/li&gt;
&lt;li&gt;tune.ssl.lifetime&lt;/li&gt;
&lt;li&gt;tune.ssl.force-private-cache&lt;/li&gt;
&lt;li&gt;tune.ssl.maxrecord&lt;/li&gt;
&lt;li&gt;tune.ssl.default-dh-param&lt;/li&gt;
&lt;li&gt;tune.ssl.ssl-ctx-cache-size&lt;/li&gt;
&lt;li&gt;tune.vars.global-max-size&lt;/li&gt;
&lt;li&gt;tune.vars.reqres-max-size&lt;/li&gt;
&lt;li&gt;tune.vars.sess-max-size&lt;/li&gt;
&lt;li&gt;tune.vars.txn-max-size&lt;/li&gt;
&lt;li&gt;tune.zlib.memlevel&lt;/li&gt;
&lt;li&gt;tune.zlib.windowsize&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;debugging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;debug&lt;/li&gt;
&lt;li&gt;quiet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-1-process-management-and-security&quot;&gt;&lt;a href=&quot;#3-1-process-management-and-security&quot; class=&quot;headerlink&quot; title=&quot;3.1. process management and security&quot;&gt;&lt;/a&gt;3.1. process management and security&lt;/h2&gt;&lt;p&gt;ca-base &lt;dir&gt;&lt;br&gt;  assigns a default directory to fetch ssl ca certificates and crls from when a&lt;br&gt;  relative path is used with “ca-file” or “crl-file” directives. absolute&lt;br&gt;  locations specified in “ca-file” and “crl-file” prevail and ignore “ca-base”.&lt;/dir&gt;&lt;/p&gt;
&lt;p&gt;chroot &lt;jail dir=&quot;&quot;&gt;&lt;br&gt;  changes current directory to &lt;jail dir=&quot;&quot;&gt; and performs a chroot() there before&lt;br&gt;  dropping privileges. this increases the security level in case an unknown&lt;br&gt;  vulnerability would be exploited, since it would make it very hard for the&lt;br&gt;  attacker to exploit the system. this only works when the process is started&lt;br&gt;  with superuser privileges. it is important to ensure that &lt;jail_dir&gt; is both&lt;br&gt;  empty and unwritable to anyone.&lt;/jail_dir&gt;&lt;/jail&gt;&lt;/jail&gt;&lt;/p&gt;
&lt;p&gt;cpu-map &amp;lt;”all”|”odd”|”even”|process_num&amp;gt; &lt;cpu-set&gt;…&lt;br&gt;  on linux 2.6 and above, it is possible to bind a process to a specific cpu&lt;br&gt;  set. this means that the process will never run on other cpus. the “cpu-map”&lt;br&gt;  directive specifies cpu sets for process sets. the first argument is the&lt;br&gt;  process number to bind. this process must have a number between 1 and 32 or&lt;br&gt;  64, depending on the machine’s word size, and any process ids above nbproc&lt;br&gt;  are ignored. it is possible to specify all processes at once using “all”,&lt;br&gt;  only odd numbers using “odd” or even numbers using “even”, just like with the&lt;br&gt;  “bind-process” directive. the second and forthcoming arguments are cpu sets.&lt;br&gt;  each cpu set is either a unique number between 0 and 31 or 63 or a range with&lt;br&gt;  two such numbers delimited by a dash (‘-‘). multiple cpu numbers or ranges&lt;br&gt;  may be specified, and the processes will be allowed to bind to all of them.&lt;br&gt;  obviously, multiple “cpu-map” directives may be specified. each “cpu-map”&lt;br&gt;  directive will replace the previous ones when they overlap.&lt;/cpu-set&gt;&lt;/p&gt;
&lt;p&gt;crt-base &lt;dir&gt;&lt;br&gt;  assigns a default directory to fetch ssl certificates from when a relative&lt;br&gt;  path is used with “crtfile” directives. absolute locations specified after&lt;br&gt;  “crtfile” prevail and ignore “crt-base”.&lt;/dir&gt;&lt;/p&gt;
&lt;p&gt;daemon&lt;br&gt;  makes the process fork into background. this is the recommended mode of&lt;br&gt;  operation. it is equivalent to the command line “-d” argument. it can be&lt;br&gt;  disabled by the command line “-db” argument.&lt;/p&gt;
&lt;p&gt;deviceatlas-json-file &lt;path&gt;&lt;/path&gt;&lt;br&gt;  sets the path of the deviceatlas json data file to be loaded by the api.&lt;br&gt;  the path must be a valid json data file and accessible by haproxy process.&lt;/p&gt;
&lt;p&gt;deviceatlas-log-level &lt;value&gt;&lt;br&gt;  sets the level of informations returned by the api. this directive is&lt;br&gt;  optional and set to 0 by default if not set.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;deviceatlas-separator &lt;char&gt;&lt;br&gt;  sets the character separator for the api properties results. this directive&lt;br&gt;  is optional and set to | by default if not set.&lt;/char&gt;&lt;/p&gt;
&lt;p&gt;external-check&lt;br&gt;  allows the use of an external agent to perform health checks.&lt;br&gt;  this is disabled by default as a security precaution.&lt;br&gt;  see “option external-check”.&lt;/p&gt;
&lt;p&gt;gid &lt;number&gt;&lt;br&gt;  changes the process’ group id to &lt;number&gt;. it is recommended that the group&lt;br&gt;  id is dedicated to haproxy or to a small set of similar daemons. haproxy must&lt;br&gt;  be started with a user belonging to this group, or with superuser privileges.&lt;br&gt;  note that if haproxy is started from a user having supplementary groups, it&lt;br&gt;  will only be able to drop these groups if started with superuser privileges.&lt;br&gt;  see also “group” and “uid”.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;group &lt;group name=&quot;&quot;&gt;&lt;br&gt;  similar to “gid” but uses the gid of group name &lt;group name=&quot;&quot;&gt; from /etc/group.&lt;br&gt;  see also “gid” and “user”.&lt;/group&gt;&lt;/group&gt;&lt;/p&gt;
&lt;p&gt;log &lt;address&gt; [len &lt;length&gt;] &lt;facility&gt; [max level [min level]]&lt;br&gt;  adds a global syslog server. up to two global servers can be defined. they&lt;br&gt;  will receive logs for startups and exits, as well as all logs from proxies&lt;br&gt;  configured with “log global”.&lt;/facility&gt;&lt;/length&gt;&lt;/address&gt;&lt;/p&gt;
&lt;p&gt;  &lt;address&gt; can be one of:&lt;/address&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- an ipv4 address optionally followed by a colon and a udp port. if
  no port is specified, 514 is used by default (the standard syslog
  port).

- an ipv6 address followed by a colon and optionally a udp port. if
  no port is specified, 514 is used by default (the standard syslog
  port).

- a filesystem path to a unix domain socket, keeping in mind
  considerations for chroot (be sure the path is accessible inside
  the chroot) and uid/gid (be sure the path is appropriately
  writeable).

you may want to reference some environment variables in the address
parameter, see section 2.3 about environment variables.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  &lt;length&gt; is an optional maximum line length. log lines larger than this value&lt;br&gt;           will be truncated before being sent. the reason is that syslog&lt;br&gt;           servers act differently on log line length. all servers support the&lt;br&gt;           default value of 1024, but some servers simply drop larger lines&lt;br&gt;           while others do log them. if a server supports long lines, it may&lt;br&gt;           make sense to set this value here in order to avoid truncating long&lt;br&gt;           lines. similarly, if a server drops long lines, it is preferable to&lt;br&gt;           truncate them before sending them. accepted values are 80 to 65535&lt;br&gt;           inclusive. the default value of 1024 is generally fine for all&lt;br&gt;           standard usages. some specific cases of long captures or&lt;br&gt;           json-formated logs may require larger values.&lt;/length&gt;&lt;/p&gt;
&lt;p&gt;  &lt;facility&gt; must be one of the 24 standard syslog facilities :&lt;/facility&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kern   user   mail   daemon auth   syslog lpr    news
uucp   cron   auth2  ftp    ntp    audit  alert  cron2
local0 local1 local2 local3 local4 local5 local6 local7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  an optional level can be specified to filter outgoing messages. by default,&lt;br&gt;  all messages are sent. if a maximum level is specified, only messages with a&lt;br&gt;  severity at least as important as this level will be sent. an optional minimum&lt;br&gt;  level can be specified. if it is set, logs emitted with a more severe level&lt;br&gt;  than this one will be capped to this level. this is used to avoid sending&lt;br&gt;  “emerg” messages on all terminals on some default syslog configurations.&lt;br&gt;  eight levels are known :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;emerg  alert  crit   err    warning notice info  debug
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;log-send-hostname [&lt;string&gt;]&lt;br&gt;  sets the hostname field in the syslog header. if optional “string” parameter&lt;br&gt;  is set the header is set to the string contents, otherwise uses the hostname&lt;br&gt;  of the system. generally used if one is not relaying logs through an&lt;br&gt;  intermediate syslog server or for simply customizing the hostname printed in&lt;br&gt;  the logs.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;log-tag &lt;string&gt;&lt;br&gt;  sets the tag field in the syslog header to this string. it defaults to the&lt;br&gt;  program name as launched from the command line, which usually is “haproxy”.&lt;br&gt;  sometimes it can be useful to differentiate between multiple processes&lt;br&gt;  running on the same host. see also the per-proxy “log-tag” directive.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;lua-load &lt;file&gt;&lt;br&gt;  this global directive loads and executes a lua file. this directive can be&lt;br&gt;  used multiple times.&lt;/file&gt;&lt;/p&gt;
&lt;p&gt;nbproc &lt;number&gt;&lt;br&gt;  creates &lt;number&gt; processes when going daemon. this requires the “daemon”&lt;br&gt;  mode. by default, only one process is created, which is the recommended mode&lt;br&gt;  of operation. for systems limited to small sets of file descriptors per&lt;br&gt;  process, it may be needed to fork multiple daemons. using multiple processes&lt;br&gt;  is harder to debug and is really discouraged. see also “daemon”.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;pidfile &lt;pidfile&gt;&lt;br&gt;  writes pids of all daemons into file &lt;pidfile&gt;. this option is equivalent to&lt;br&gt;  the “-p” command line argument. the file must be accessible to the user&lt;br&gt;  starting the process. see also “daemon”.&lt;/pidfile&gt;&lt;/pidfile&gt;&lt;/p&gt;
&lt;p&gt;stats bind-process [ all | odd | even | &lt;number 1-64=&quot;&quot;&gt;[-&lt;number 1-64=&quot;&quot;&gt;] ] …&lt;br&gt;  limits the stats socket to a certain set of processes numbers. by default the&lt;br&gt;  stats socket is bound to all processes, causing a warning to be emitted when&lt;br&gt;  nbproc is greater than 1 because there is no way to select the target process&lt;br&gt;  when connecting. however, by using this setting, it becomes possible to pin&lt;br&gt;  the stats socket to a specific set of processes, typically the first one. the&lt;br&gt;  warning will automatically be disabled when this setting is used, whatever&lt;br&gt;  the number of processes used. the maximum process id depends on the machine’s&lt;br&gt;  word size (32 or 64). a better option consists in using the “process” setting&lt;br&gt;  of the “stats socket” line to force the process on each line.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;ssl-default-bind-ciphers &lt;ciphers&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  the default string describing the list of cipher algorithms (“cipher suite”)&lt;br&gt;  that are negotiated during the ssl/tls handshake for all “bind” lines which&lt;br&gt;  do not explicitly define theirs. the format of the string is defined in&lt;br&gt;  “man 1 ciphers” from openssl man pages, and can be for instance a string such&lt;br&gt;  as “aes:all:!anull:!enull:+rc4:@strength” (without quotes). please check the&lt;br&gt;  “bind” keyword for more information.&lt;/ciphers&gt;&lt;/p&gt;
&lt;p&gt;ssl-default-bind-options [&lt;option&gt;]…&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  default ssl-options to force on all “bind” lines. please check the “bind”&lt;br&gt;  keyword to see available options.&lt;/option&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        global&lt;br&gt;           ssl-default-bind-options no-sslv3 no-tls-tickets&lt;/p&gt;
&lt;p&gt;ssl-default-server-ciphers &lt;ciphers&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  sets the default string describing the list of cipher algorithms that are&lt;br&gt;  negotiated during the ssl/tls handshake with the server, for all “server”&lt;br&gt;  lines which do not explicitly define theirs. the format of the string is&lt;br&gt;  defined in “man 1 ciphers”. please check the “server” keyword for more&lt;br&gt;  information.&lt;/ciphers&gt;&lt;/p&gt;
&lt;p&gt;ssl-default-server-options [&lt;option&gt;]…&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  default ssl-options to force on all “server” lines. please check the “server”&lt;br&gt;  keyword to see available options.&lt;/option&gt;&lt;/p&gt;
&lt;p&gt;ssl-dh-param-file &lt;file&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  the default dh parameters that are used during the ssl/tls handshake when&lt;br&gt;  ephemeral diffie-hellman (dhe) key exchange is used, for all “bind” lines&lt;br&gt;  which do not explicitely define theirs. it will be overridden by custom dh&lt;br&gt;  parameters found in a bind certificate file if any. if custom dh parameters&lt;br&gt;  are not specified either by using ssl-dh-param-file or by setting them directly&lt;br&gt;  in the certificate file, pre-generated dh parameters of the size specified&lt;br&gt;  by tune.ssl.default-dh-param will be used. custom parameters are known to be&lt;br&gt;  more secure and therefore their use is recommended.&lt;br&gt;  custom dh parameters may be generated by using the openssl command&lt;br&gt;  “openssl dhparam &lt;size&gt;“, where size should be at least 2048, as 1024-bit dh&lt;br&gt;  parameters should not be considered secure anymore.&lt;/size&gt;&lt;/file&gt;&lt;/p&gt;
&lt;p&gt;ssl-server-verify [none|required]&lt;br&gt;  the default behavior for ssl verify on servers side. if specified to ‘none’,&lt;br&gt;  servers certificates are not verified. the default is ‘required’ except if&lt;br&gt;  forced using cmdline option ‘-dv’.&lt;/p&gt;
&lt;p&gt;stats socket [&lt;address:port&gt;|&lt;path&gt;&lt;/path&gt;] [param*]&lt;br&gt;  binds a unix socket to &lt;path&gt;&lt;/path&gt; or a tcpv4/v6 address to &lt;address:port&gt;.&lt;br&gt;  connections to this socket will return various statistics outputs and even&lt;br&gt;  allow some commands to be issued to change some runtime settings. please&lt;br&gt;  consult section 9.2 “unix socket commands” for more details.&lt;/address:port&gt;&lt;/address:port&gt;&lt;/p&gt;
&lt;p&gt;  all parameters supported by “bind” lines are supported, for instance to&lt;br&gt;  restrict access to some users or their access rights. please consult&lt;br&gt;  section 5.1 for more information.&lt;/p&gt;
&lt;p&gt;stats timeout &lt;timeout, in=&quot;&quot; milliseconds=&quot;&quot;&gt;&lt;br&gt;  the default timeout on the stats socket is set to 10 seconds. it is possible&lt;br&gt;  to change this value with “stats timeout”. the value must be passed in&lt;br&gt;  milliseconds, or be suffixed by a time unit among { us, ms, s, m, h, d }.&lt;/timeout,&gt;&lt;/p&gt;
&lt;p&gt;stats maxconn &lt;connections&gt;&lt;br&gt;  by default, the stats socket is limited to 10 concurrent connections. it is&lt;br&gt;  possible to change this value with “stats maxconn”.&lt;/connections&gt;&lt;/p&gt;
&lt;p&gt;uid &lt;number&gt;&lt;br&gt;  changes the process’ user id to &lt;number&gt;. it is recommended that the user id&lt;br&gt;  is dedicated to haproxy or to a small set of similar daemons. haproxy must&lt;br&gt;  be started with superuser privileges in order to be able to switch to another&lt;br&gt;  one. see also “gid” and “user”.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;ulimit-n &lt;number&gt;&lt;br&gt;  sets the maximum number of per-process file-descriptors to &lt;number&gt;. by&lt;br&gt;  default, it is automatically computed, so it is recommended not to use this&lt;br&gt;  option.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;unix-bind [ prefix &lt;prefix&gt; ] [ mode &lt;mode&gt; ] [ user &lt;user&gt; ] [ uid &lt;uid&gt; ]&lt;br&gt;          [ group &lt;group&gt; ] [ gid &lt;gid&gt; ]&lt;/gid&gt;&lt;/group&gt;&lt;/uid&gt;&lt;/user&gt;&lt;/mode&gt;&lt;/prefix&gt;&lt;/p&gt;
&lt;p&gt;  fixes common settings to unix listening sockets declared in “bind” statements.&lt;br&gt;  this is mainly used to simplify declaration of those unix sockets and reduce&lt;br&gt;  the risk of errors, since those settings are most commonly required but are&lt;br&gt;  also process-specific. the &lt;prefix&gt; setting can be used to force all socket&lt;br&gt;  path to be relative to that directory. this might be needed to access another&lt;br&gt;  component’s chroot. note that those paths are resolved before haproxy chroots&lt;br&gt;  itself, so they are absolute. the &lt;mode&gt;, &lt;user&gt;, &lt;uid&gt;, &lt;group&gt; and &lt;gid&gt;&lt;br&gt;  all have the same meaning as their homonyms used by the “bind” statement. if&lt;br&gt;  both are specified, the “bind” statement has priority, meaning that the&lt;br&gt;  “unix-bind” settings may be seen as process-wide default settings.&lt;/gid&gt;&lt;/group&gt;&lt;/uid&gt;&lt;/user&gt;&lt;/mode&gt;&lt;/prefix&gt;&lt;/p&gt;
&lt;p&gt;user &lt;user name=&quot;&quot;&gt;&lt;br&gt;  similar to “uid” but uses the uid of user name &lt;user name=&quot;&quot;&gt; from /etc/passwd.&lt;br&gt;  see also “uid” and “group”.&lt;/user&gt;&lt;/user&gt;&lt;/p&gt;
&lt;p&gt;node &lt;name&gt;&lt;br&gt;  only letters, digits, hyphen and underscore are allowed, like in dns names.&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  this statement is useful in ha configurations where two or more processes or&lt;br&gt;  servers share the same ip address. by setting a different node-name on all&lt;br&gt;  nodes, it becomes easy to immediately spot what server is handling the&lt;br&gt;  traffic.&lt;/p&gt;
&lt;p&gt;description &lt;text&gt;&lt;br&gt;  add a text that describes the instance.&lt;/text&gt;&lt;/p&gt;
&lt;p&gt;  please note that it is required to escape certain characters (# for example)&lt;br&gt;  and this text is inserted into a html page so you should avoid using&lt;br&gt;  “&amp;lt;” and “&amp;gt;” characters.&lt;/p&gt;
&lt;p&gt;51degrees-data-file &lt;file path=&quot;&quot;&gt;&lt;br&gt;  the path of the 51degrees data file to provide device detection services. the&lt;br&gt;  file should be unzipped and accessible by haproxy with relevavnt permissions.&lt;/file&gt;&lt;/p&gt;
&lt;p&gt;  please note that this option is only available when haproxy has been&lt;br&gt;  compiled with use_51degrees.&lt;/p&gt;
&lt;p&gt;51degrees-property-name-list [&lt;string&gt;]&lt;br&gt;  a list of 51degrees property names to be load from the dataset. a full list&lt;br&gt;  of names is available on the 51degrees website:&lt;br&gt;  &lt;a href=&quot;https://51degrees.com/resources/property-dictionary&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://51degrees.com/resources/property-dictionary&lt;/a&gt;&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  please note that this option is only available when haproxy has been&lt;br&gt;  compiled with use_51degrees.&lt;/p&gt;
&lt;p&gt;51degrees-property-separator &lt;char&gt;&lt;br&gt;  a char that will be appended to every property value in a response header&lt;br&gt;  containing 51degrees results. if not set that will be set as ‘,’.&lt;/char&gt;&lt;/p&gt;
&lt;p&gt;  please note that this option is only available when haproxy has been&lt;br&gt;  compiled with use_51degrees.&lt;/p&gt;
&lt;p&gt;51degrees-cache-size &lt;number&gt;&lt;br&gt;  sets the size of the 51degrees converter cache to &lt;number&gt; entries. this&lt;br&gt;  is an lru cache which reminds previous device detections and their results.&lt;br&gt;  by default, this cache is disabled.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;  please note that this option is only available when haproxy has been&lt;br&gt;  compiled with use_51degrees.&lt;/p&gt;
&lt;h2 id=&quot;3-2-performance-tuning&quot;&gt;&lt;a href=&quot;#3-2-performance-tuning&quot; class=&quot;headerlink&quot; title=&quot;3.2. performance tuning&quot;&gt;&lt;/a&gt;3.2. performance tuning&lt;/h2&gt;&lt;p&gt;max-spread-checks &lt;delay in=&quot;&quot; milliseconds=&quot;&quot;&gt;&lt;br&gt;  by default, haproxy tries to spread the start of health checks across the&lt;br&gt;  smallest health check interval of all the servers in a farm. the principle is&lt;br&gt;  to avoid hammering services running on the same server. but when using large&lt;br&gt;  check intervals (10 seconds or more), the last servers in the farm take some&lt;br&gt;  time before starting to be tested, which can be a problem. this parameter is&lt;br&gt;  used to enforce an upper bound on delay between the first and the last check,&lt;br&gt;  even if the servers’ check intervals are larger. when servers run with&lt;br&gt;  shorter intervals, their intervals will be respected though.&lt;/delay&gt;&lt;/p&gt;
&lt;p&gt;maxconn &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of concurrent connections to &lt;number&gt;. it&lt;br&gt;  is equivalent to the command-line argument “-n”. proxies will stop accepting&lt;br&gt;  connections when this limit is reached. the “ulimit-n” parameter is&lt;br&gt;  automatically adjusted according to this value. see also “ulimit-n”. note:&lt;br&gt;  the “select” poller cannot reliably use more than 1024 file descriptors on&lt;br&gt;  some platforms. if your platform only supports select and reports “select&lt;br&gt;  failed” on startup, you need to reduce maxconn until it works (slightly&lt;br&gt;  below 500 in general). if this value is not set, it will default to the value&lt;br&gt;  set in default_maxconn at build time (reported in haproxy -vv) if no memory&lt;br&gt;  limit is enforced, or will be computed based on the memory limit, the buffer&lt;br&gt;  size, memory allocated to compression, ssl cache size, and use or not of ssl&lt;br&gt;  and the associated maxsslconn (which can also be automatic).&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxconnrate &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of connections per second to &lt;number&gt;.&lt;br&gt;  proxies will stop accepting connections when this limit is reached. it can be&lt;br&gt;  used to limit the global capacity regardless of each frontend capacity. it is&lt;br&gt;  important to note that this can only be used as a service protection measure,&lt;br&gt;  as there will not necessarily be a fair share between frontends when the&lt;br&gt;  limit is reached, so it’s a good idea to also limit each frontend to some&lt;br&gt;  value close to its expected share. also, lowering tune.maxaccept can improve&lt;br&gt;  fairness.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxcomprate &lt;number&gt;&lt;br&gt;  sets the maximum per-process input compression rate to &lt;number&gt; kilobytes&lt;br&gt;  per second.  for each session, if the maximum is reached, the compression&lt;br&gt;  level will be decreased during the session. if the maximum is reached at the&lt;br&gt;  beginning of a session, the session will not compress at all. if the maximum&lt;br&gt;  is not reached, the compression level will be increased up to&lt;br&gt;  tune.comp.maxlevel.  a value of zero means there is no limit, this is the&lt;br&gt;  default value.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxcompcpuusage &lt;number&gt;&lt;br&gt;  sets the maximum cpu usage haproxy can reach before stopping the compression&lt;br&gt;  for new requests or decreasing the compression level of current requests.&lt;br&gt;  it works like ‘maxcomprate’ but measures cpu usage instead of incoming data&lt;br&gt;  bandwidth. the value is expressed in percent of the cpu used by haproxy. in&lt;br&gt;  case of multiple processes (nbproc &amp;gt; 1), each process manages its individual&lt;br&gt;  usage. a value of 100 disable the limit. the default value is 100. setting&lt;br&gt;  a lower value will prevent the compression work from slowing the whole&lt;br&gt;  process down and from introducing high latencies.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxpipes &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of pipes to &lt;number&gt;. currently, pipes&lt;br&gt;  are only used by kernel-based tcp splicing. since a pipe contains two file&lt;br&gt;  descriptors, the “ulimit-n” value will be increased accordingly. the default&lt;br&gt;  value is maxconn/4, which seems to be more than enough for most heavy usages.&lt;br&gt;  the splice code dynamically allocates and releases pipes, and can fall back&lt;br&gt;  to standard copy, so setting this value too low may only impact performance.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxsessrate &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of sessions per second to &lt;number&gt;.&lt;br&gt;  proxies will stop accepting connections when this limit is reached. it can be&lt;br&gt;  used to limit the global capacity regardless of each frontend capacity. it is&lt;br&gt;  important to note that this can only be used as a service protection measure,&lt;br&gt;  as there will not necessarily be a fair share between frontends when the&lt;br&gt;  limit is reached, so it’s a good idea to also limit each frontend to some&lt;br&gt;  value close to its expected share. also, lowering tune.maxaccept can improve&lt;br&gt;  fairness.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxsslconn &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of concurrent ssl connections to&lt;br&gt;  &lt;number&gt;. by default there is no ssl-specific limit, which means that the&lt;br&gt;  global maxconn setting will apply to all connections. setting this limit&lt;br&gt;  avoids having openssl use too much memory and crash when malloc returns null&lt;br&gt;  (since it unfortunately does not reliably check for such conditions). note&lt;br&gt;  that the limit applies both to incoming and outgoing connections, so one&lt;br&gt;  connection which is deciphered then ciphered accounts for 2 ssl connections.&lt;br&gt;  if this value is not set, but a memory limit is enforced, this value will be&lt;br&gt;  automatically computed based on the memory limit, maxconn,  the buffer size,&lt;br&gt;  memory allocated to compression, ssl cache size, and use of ssl in either&lt;br&gt;  frontends, backends or both. if neither maxconn nor maxsslconn are specified&lt;br&gt;  when there is a memory limit, haproxy will automatically adjust these values&lt;br&gt;  so that 100% of the connections can be made over ssl with no risk, and will&lt;br&gt;  consider the sides where it is enabled (frontend, backend, both).&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxsslrate &lt;number&gt;&lt;br&gt;  sets the maximum per-process number of ssl sessions per second to &lt;number&gt;.&lt;br&gt;  ssl listeners will stop accepting connections when this limit is reached. it&lt;br&gt;  can be used to limit the global ssl cpu usage regardless of each frontend&lt;br&gt;  capacity. it is important to note that this can only be used as a service&lt;br&gt;  protection measure, as there will not necessarily be a fair share between&lt;br&gt;  frontends when the limit is reached, so it’s a good idea to also limit each&lt;br&gt;  frontend to some value close to its expected share. it is also important to&lt;br&gt;  note that the sessions are accounted before they enter the ssl stack and not&lt;br&gt;  after, which also protects the stack against bad handshakes. also, lowering&lt;br&gt;  tune.maxaccept can improve fairness.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;maxzlibmem &lt;number&gt;&lt;br&gt;  sets the maximum amount of ram in megabytes per process usable by the zlib.&lt;br&gt;  when the maximum amount is reached, future sessions will not compress as long&lt;br&gt;  as ram is unavailable. when sets to 0, there is no limit.&lt;br&gt;  the default value is 0. the value is available in bytes on the unix socket&lt;br&gt;  with “show info” on the line “maxzlibmemusage”, the memory used by zlib is&lt;br&gt;  “zlibmemusage” in bytes.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;noepoll&lt;br&gt;  disables the use of the “epoll” event polling system on linux. it is&lt;br&gt;  equivalent to the command-line argument “-de”. the next polling system&lt;br&gt;  used will generally be “poll”. see also “nopoll”.&lt;/p&gt;
&lt;p&gt;nokqueue&lt;br&gt;  disables the use of the “kqueue” event polling system on bsd. it is&lt;br&gt;  equivalent to the command-line argument “-dk”. the next polling system&lt;br&gt;  used will generally be “poll”. see also “nopoll”.&lt;/p&gt;
&lt;p&gt;nopoll&lt;br&gt;  disables the use of the “poll” event polling system. it is equivalent to the&lt;br&gt;  command-line argument “-dp”. the next polling system used will be “select”.&lt;br&gt;  it should never be needed to disable “poll” since it’s available on all&lt;br&gt;  platforms supported by haproxy. see also “nokqueue” and “noepoll”.&lt;/p&gt;
&lt;p&gt;nosplice&lt;br&gt;  disables the use of kernel tcp splicing between sockets on linux. it is&lt;br&gt;  equivalent to the command line argument “-ds”.  data will then be copied&lt;br&gt;  using conventional and more portable recv/send calls. kernel tcp splicing is&lt;br&gt;  limited to some very recent instances of kernel 2.6. most versions between&lt;br&gt;  2.6.25 and 2.6.28 are buggy and will forward corrupted data, so they must not&lt;br&gt;  be used. this option makes it easier to globally disable kernel splicing in&lt;br&gt;  case of doubt. see also “option splice-auto”, “option splice-request” and&lt;br&gt;  “option splice-response”.&lt;/p&gt;
&lt;p&gt;nogetaddrinfo&lt;br&gt;  disables the use of getaddrinfo(3) for name resolving. it is equivalent to&lt;br&gt;  the command line argument “-dg”. deprecated gethostbyname(3) will be used.&lt;/p&gt;
&lt;p&gt;spread-checks &lt;0..50, in=&quot;&quot; percent=&quot;&quot;&gt;&lt;br&gt;  sometimes it is desirable to avoid sending agent and health checks to&lt;br&gt;  servers at exact intervals, for instance when many logical servers are&lt;br&gt;  located on the same physical server. with the help of this parameter, it&lt;br&gt;  becomes possible to add some randomness in the check interval between 0&lt;br&gt;  and +/- 50%. a value between 2 and 5 seems to show good results. the&lt;br&gt;  default value remains at 0.&lt;/0..50,&gt;&lt;/p&gt;
&lt;p&gt;tune.buffers.limit &lt;number&gt;&lt;br&gt;  sets a hard limit on the number of buffers which may be allocated per process.&lt;br&gt;  the default value is zero which means unlimited. the minimum non-zero value&lt;br&gt;  will always be greater than “tune.buffers.reserve” and should ideally always&lt;br&gt;  be about twice as large. forcing this value can be particularly useful to&lt;br&gt;  limit the amount of memory a process may take, while retaining a sane&lt;br&gt;  behaviour. when this limit is reached, sessions which need a buffer wait for&lt;br&gt;  another one to be released by another session. since buffers are dynamically&lt;br&gt;  allocated and released, the waiting time is very short and not perceptible&lt;br&gt;  provided that limits remain reasonable. in fact sometimes reducing the limit&lt;br&gt;  may even increase performance by increasing the cpu cache’s efficiency. tests&lt;br&gt;  have shown good results on average http traffic with a limit to 1/10 of the&lt;br&gt;  expected global maxconn setting, which also significantly reduces memory&lt;br&gt;  usage. the memory savings come from the fact that a number of connections&lt;br&gt;  will not allocate 2*tune.bufsize. it is best not to touch this value unless&lt;br&gt;  advised to do so by an haproxy core developer.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.buffers.reserve &lt;number&gt;&lt;br&gt;  sets the number of buffers which are pre-allocated and reserved for use only&lt;br&gt;  during memory shortage conditions resulting in failed memory allocations. the&lt;br&gt;  minimum value is 2 and is also the default. there is no reason a user would&lt;br&gt;  want to change this value, it’s mostly aimed at haproxy core developers.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.bufsize &lt;number&gt;&lt;br&gt;  sets the buffer size to this size (in bytes). lower values allow more&lt;br&gt;  sessions to coexist in the same amount of ram, and higher values allow some&lt;br&gt;  applications with very large cookies to work. the default value is 16384 and&lt;br&gt;  can be changed at build time. it is strongly recommended not to change this&lt;br&gt;  from the default value, as very low values will break some services such as&lt;br&gt;  statistics, and values larger than default size will increase memory usage,&lt;br&gt;  possibly causing the system to run out of memory. at least the global maxconn&lt;br&gt;  parameter should be decreased by the same factor as this one is increased.&lt;br&gt;  if http request is larger than (tune.bufsize - tune.maxrewrite), haproxy will&lt;br&gt;  return http 400 (bad request) error. similarly if an http response is larger&lt;br&gt;  than this size, haproxy will return http 502 (bad gateway).&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.chksize &lt;number&gt;&lt;br&gt;  sets the check buffer size to this size (in bytes). higher values may help&lt;br&gt;  find string or regex patterns in very large pages, though doing so may imply&lt;br&gt;  more memory and cpu usage. the default value is 16384 and can be changed at&lt;br&gt;  build time. it is not recommended to change this value, but to use better&lt;br&gt;  checks whenever possible.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.comp.maxlevel &lt;number&gt;&lt;br&gt;  sets the maximum compression level. the compression level affects cpu&lt;br&gt;  usage during compression. this value affects cpu usage during compression.&lt;br&gt;  each session using compression initializes the compression algorithm with&lt;br&gt;  this value. the default value is 1.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.http.cookielen &lt;number&gt;&lt;br&gt;  sets the maximum length of captured cookies. this is the maximum value that&lt;br&gt;  the “capture cookie xxx len yyy” will be allowed to take, and any upper value&lt;br&gt;  will automatically be truncated to this one. it is important not to set too&lt;br&gt;  high a value because all cookie captures still allocate this size whatever&lt;br&gt;  their configured value (they share a same pool). this value is per request&lt;br&gt;  per response, so the memory allocated is twice this value per connection.&lt;br&gt;  when not specified, the limit is set to 63 characters. it is recommended not&lt;br&gt;  to change this value.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.http.maxhdr &lt;number&gt;&lt;br&gt;  sets the maximum number of headers in a request. when a request comes with a&lt;br&gt;  number of headers greater than this value (including the first line), it is&lt;br&gt;  rejected with a “400 bad request” status code. similarly, too large responses&lt;br&gt;  are blocked with “502 bad gateway”. the default value is 101, which is enough&lt;br&gt;  for all usages, considering that the widely deployed apache server uses the&lt;br&gt;  same limit. it can be useful to push this limit further to temporarily allow&lt;br&gt;  a buggy application to work by the time it gets fixed. keep in mind that each&lt;br&gt;  new header consumes 32bits of memory for each session, so don’t push this&lt;br&gt;  limit too high.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.idletimer &lt;timeout&gt;&lt;br&gt;  sets the duration after which haproxy will consider that an empty buffer is&lt;br&gt;  probably associated with an idle stream. this is used to optimally adjust&lt;br&gt;  some packet sizes while forwarding large and small data alternatively. the&lt;br&gt;  decision to use splice() or to send large buffers in ssl is modulated by this&lt;br&gt;  parameter. the value is in milliseconds between 0 and 65535. a value of zero&lt;br&gt;  means that haproxy will not try to detect idle streams. the default is 1000,&lt;br&gt;  which seems to correctly detect end user pauses (eg: read a page before&lt;br&gt;  clicking). there should be not reason for changing this value. please check&lt;br&gt;  tune.ssl.maxrecord below.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;tune.lua.forced-yield &lt;number&gt;&lt;br&gt;  this directive forces the lua engine to execute a yield each &lt;number&gt; of&lt;br&gt;  instructions executed. this permits interruptng a long script and allows the&lt;br&gt;  haproxy scheduler to process other tasks like accepting connections or&lt;br&gt;  forwarding traffic. the default value is 10000 instructions. if haproxy often&lt;br&gt;  executes some lua code but more reactivity is required, this value can be&lt;br&gt;  lowered. if the lua code is quite long and its result is absolutely required&lt;br&gt;  to process the data, the &lt;number&gt; can be increased.&lt;/number&gt;&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.lua.maxmem&lt;br&gt;  sets the maximum amount of ram in megabytes per process usable by lua. by&lt;br&gt;  default it is zero which means unlimited. it is important to set a limit to&lt;br&gt;  ensure that a bug in a script will not result in the system running out of&lt;br&gt;  memory.&lt;/p&gt;
&lt;p&gt;tune.lua.session-timeout &lt;timeout&gt;&lt;br&gt;  this is the execution timeout for the lua sessions. this is useful for&lt;br&gt;  preventing infinite loops or spending too much time in lua. this timeout has a&lt;br&gt;  priority over other timeouts. for example, if this timeout is set to 4s and&lt;br&gt;  you run a 5s sleep, the code will be interrupted with an error after waiting&lt;br&gt;  4s.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;tune.lua.task-timeout &lt;timeout&gt;&lt;br&gt;  purpose is the same as “tune.lua.session-timeout”, but this timeout is&lt;br&gt;  dedicated to the tasks. by default, this timeout isn’t set because a task may&lt;br&gt;  remain alive during of the lifetime of haproxy. for example, a task used to&lt;br&gt;  check servers.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;tune.maxaccept &lt;number&gt;&lt;br&gt;  sets the maximum number of consecutive connections a process may accept in a&lt;br&gt;  row before switching to other work. in single process mode, higher numbers&lt;br&gt;  give better performance at high connection rates. however in multi-process&lt;br&gt;  modes, keeping a bit of fairness between processes generally is better to&lt;br&gt;  increase performance. this value applies individually to each listener, so&lt;br&gt;  that the number of processes a listener is bound to is taken into account.&lt;br&gt;  this value defaults to 64. in multi-process mode, it is divided by twice&lt;br&gt;  the number of processes the listener is bound to. setting this value to -1&lt;br&gt;  completely disables the limitation. it should normally not be needed to tweak&lt;br&gt;  this value.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.maxpollevents &lt;number&gt;&lt;br&gt;  sets the maximum amount of events that can be processed at once in a call to&lt;br&gt;  the polling system. the default value is adapted to the operating system. it&lt;br&gt;  has been noticed that reducing it below 200 tends to slightly decrease&lt;br&gt;  latency at the expense of network bandwidth, and increasing it above 200&lt;br&gt;  tends to trade latency for slightly increased bandwidth.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.maxrewrite &lt;number&gt;&lt;br&gt;  sets the reserved buffer space to this size in bytes. the reserved space is&lt;br&gt;  used for header rewriting or appending. the first reads on sockets will never&lt;br&gt;  fill more than bufsize-maxrewrite. historically it has defaulted to half of&lt;br&gt;  bufsize, though that does not make much sense since there are rarely large&lt;br&gt;  numbers of headers to add. setting it too high prevents processing of large&lt;br&gt;  requests or responses. setting it too low prevents addition of new headers&lt;br&gt;  to already large requests or to post requests. it is generally wise to set it&lt;br&gt;  to about 1024. it is automatically readjusted to half of bufsize if it is&lt;br&gt;  larger than that. this means you don’t have to worry about it when changing&lt;br&gt;  bufsize.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.pattern.cache-size &lt;number&gt;&lt;br&gt;  sets the size of the pattern lookup cache to &lt;number&gt; entries. this is an lru&lt;br&gt;  cache which reminds previous lookups and their results. it is used by acls&lt;br&gt;  and maps on slow pattern lookups, namely the ones using the “sub”, “reg”,&lt;br&gt;  “dir”, “dom”, “end”, “bin” match methods as well as the case-insensitive&lt;br&gt;  strings. it applies to pattern expressions which means that it will be able&lt;br&gt;  to memorize the result of a lookup among all the patterns specified on a&lt;br&gt;  configuration line (including all those loaded from files). it automatically&lt;br&gt;  invalidates entries which are updated using http actions or on the cli. the&lt;br&gt;  default cache size is set to 10000 entries, which limits its footprint to&lt;br&gt;  about 5 mb on 32-bit systems and 8 mb on 64-bit systems. there is a very low&lt;br&gt;  risk of collision in this cache, which is in the order of the size of the&lt;br&gt;  cache divided by 2^64. typically, at 10000 requests per second with the&lt;br&gt;  default cache size of 10000 entries, there’s 1% chance that a brute force&lt;br&gt;  attack could cause a single collision after 60 years, or 0.1% after 6 years.&lt;br&gt;  this is considered much lower than the risk of a memory corruption caused by&lt;br&gt;  aging components. if this is not acceptable, the cache can be disabled by&lt;br&gt;  setting this parameter to 0.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.pipesize &lt;number&gt;&lt;br&gt;  sets the kernel pipe buffer size to this size (in bytes). by default, pipes&lt;br&gt;  are the default size for the system. but sometimes when using tcp splicing,&lt;br&gt;  it can improve performance to increase pipe sizes, especially if it is&lt;br&gt;  suspected that pipes are not filled and that many calls to splice() are&lt;br&gt;  performed. this has an impact on the kernel’s memory footprint, so this must&lt;br&gt;  not be changed if impacts are not understood.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.rcvbuf.client &lt;number&gt;&lt;br&gt;tune.rcvbuf.server &lt;number&gt;&lt;br&gt;  forces the kernel socket receive buffer size on the client or the server side&lt;br&gt;  to the specified value in bytes. this value applies to all tcp/http frontends&lt;br&gt;  and backends. it should normally never be set, and the default size (0) lets&lt;br&gt;  the kernel autotune this value depending on the amount of available memory.&lt;br&gt;  however it can sometimes help to set it to very low values (eg: 4096) in&lt;br&gt;  order to save kernel memory by preventing it from buffering too large amounts&lt;br&gt;  of received data. lower values will significantly increase cpu usage though.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.sndbuf.client &lt;number&gt;&lt;br&gt;tune.sndbuf.server &lt;number&gt;&lt;br&gt;  forces the kernel socket send buffer size on the client or the server side to&lt;br&gt;  the specified value in bytes. this value applies to all tcp/http frontends&lt;br&gt;  and backends. it should normally never be set, and the default size (0) lets&lt;br&gt;  the kernel autotune this value depending on the amount of available memory.&lt;br&gt;  however it can sometimes help to set it to very low values (eg: 4096) in&lt;br&gt;  order to save kernel memory by preventing it from buffering too large amounts&lt;br&gt;  of received data. lower values will significantly increase cpu usage though.&lt;br&gt;  another use case is to prevent write timeouts with extremely slow clients due&lt;br&gt;  to the kernel waiting for a large part of the buffer to be read before&lt;br&gt;  notifying haproxy again.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.ssl.cachesize &lt;number&gt;&lt;br&gt;  sets the size of the global ssl session cache, in a number of blocks. a block&lt;br&gt;  is large enough to contain an encoded session without peer certificate.&lt;br&gt;  an encoded session with peer certificate is stored in multiple blocks&lt;br&gt;  depending on the size of the peer certificate. a block uses approximately&lt;br&gt;  200 bytes of memory. the default value may be forced at build time, otherwise&lt;br&gt;  defaults to 20000.  when the cache is full, the most idle entries are purged&lt;br&gt;  and reassigned. higher values reduce the occurrence of such a purge, hence&lt;br&gt;  the number of cpu-intensive ssl handshakes by ensuring that all users keep&lt;br&gt;  their session as long as possible. all entries are pre-allocated upon startup&lt;br&gt;  and are shared between all processes if “nbproc” is greater than 1. setting&lt;br&gt;  this value to 0 disables the ssl session cache.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.ssl.force-private-cache&lt;br&gt;  this boolean disables ssl session cache sharing between all processes. it&lt;br&gt;  should normally not be used since it will force many renegotiations due to&lt;br&gt;  clients hitting a random process. but it may be required on some operating&lt;br&gt;  systems where none of the ssl cache synchronization method may be used. in&lt;br&gt;  this case, adding a first layer of hash-based load balancing before the ssl&lt;br&gt;  layer might limit the impact of the lack of session sharing.&lt;/p&gt;
&lt;p&gt;tune.ssl.lifetime &lt;timeout&gt;&lt;br&gt;  sets how long a cached ssl session may remain valid. this time is expressed&lt;br&gt;  in seconds and defaults to 300 (5 min). it is important to understand that it&lt;br&gt;  does not guarantee that sessions will last that long, because if the cache is&lt;br&gt;  full, the longest idle sessions will be purged despite their configured&lt;br&gt;  lifetime. the real usefulness of this setting is to prevent sessions from&lt;br&gt;  being used for too long.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;tune.ssl.maxrecord &lt;number&gt;&lt;br&gt;  sets the maximum amount of bytes passed to ssl_write() at a time. default&lt;br&gt;  value 0 means there is no limit. over ssl/tls, the client can decipher the&lt;br&gt;  data only once it has received a full record. with large records, it means&lt;br&gt;  that clients might have to download up to 16kb of data before starting to&lt;br&gt;  process them. limiting the value can improve page load times on browsers&lt;br&gt;  located over high latency or low bandwidth networks. it is suggested to find&lt;br&gt;  optimal values which fit into 1 or 2 tcp segments (generally 1448 bytes over&lt;br&gt;  ethernet with tcp timestamps enabled, or 1460 when timestamps are disabled),&lt;br&gt;  keeping in mind that ssl/tls add some overhead. typical values of 1419 and&lt;br&gt;  2859 gave good results during tests. use “strace -e trace=write” to find the&lt;br&gt;  best value. haproxy will automatically switch to this setting after an idle&lt;br&gt;  stream has been detected (see tune.idletimer above).&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.ssl.default-dh-param &lt;number&gt;&lt;br&gt;  sets the maximum size of the diffie-hellman parameters used for generating&lt;br&gt;  the ephemeral/temporary diffie-hellman key in case of dhe key exchange. the&lt;br&gt;  final size will try to match the size of the server’s rsa (or dsa) key (e.g,&lt;br&gt;  a 2048 bits temporary dh key for a 2048 bits rsa key), but will not exceed&lt;br&gt;  this maximum value. default value if 1024. only 1024 or higher values are&lt;br&gt;  allowed. higher values will increase the cpu load, and values greater than&lt;br&gt;  1024 bits are not supported by java 7 and earlier clients. this value is not&lt;br&gt;  used if static diffie-hellman parameters are supplied either directly&lt;br&gt;  in the certificate file or by using the ssl-dh-param-file parameter.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.ssl.ssl-ctx-cache-size &lt;number&gt;&lt;br&gt;  sets the size of the cache used to store generated certificates to &lt;number&gt;&lt;br&gt;  entries. this is a lru cache. because generating a ssl certificate&lt;br&gt;  dynamically is expensive, they are cached. the default cache size is set to&lt;br&gt;  1000 entries.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.vars.global-max-size &lt;size&gt;&lt;br&gt;tune.vars.reqres-max-size &lt;size&gt;&lt;br&gt;tune.vars.sess-max-size &lt;size&gt;&lt;br&gt;tune.vars.txn-max-size &lt;size&gt;&lt;br&gt;  these four tunes helps to manage the allowed amount of memory used by the&lt;br&gt;  variables system. “global” limits the memory for all the systems. “sess” limit&lt;br&gt;  the memory by session, “txn” limits the memory by transaction and “reqres”&lt;br&gt;  limits the memory for each request or response processing. during the&lt;br&gt;  accounting, “sess” embbed “txn” and “txn” embed “reqres”.&lt;/size&gt;&lt;/size&gt;&lt;/size&gt;&lt;/size&gt;&lt;/p&gt;
&lt;p&gt;  by example, we considers that “tune.vars.sess-max-size” is fixed to 100,&lt;br&gt;  “tune.vars.txn-max-size” is fixed to 100, “tune.vars.reqres-max-size” is&lt;br&gt;  also fixed to 100. if we create a variable “txn.var” that contains 100 bytes,&lt;br&gt;  we cannot create any more variable in the other contexts.&lt;/p&gt;
&lt;p&gt;tune.zlib.memlevel &lt;number&gt;&lt;br&gt;  sets the memlevel parameter in zlib initialization for each session. it&lt;br&gt;  defines how much memory should be allocated for the internal compression&lt;br&gt;  state. a value of 1 uses minimum memory but is slow and reduces compression&lt;br&gt;  ratio, a value of 9 uses maximum memory for optimal speed.  can be a value&lt;br&gt;  between 1 and 9. the default value is 8.&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;tune.zlib.windowsize &lt;number&gt;&lt;br&gt;  sets the window size (the size of the history buffer) as a parameter of the&lt;br&gt;  zlib initialization for each session. larger values of this parameter result&lt;br&gt;  in better compression at the expense of memory usage.  can be a value between&lt;br&gt;  8 and 15.  the default value is 15.&lt;/number&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-3-debugging&quot;&gt;&lt;a href=&quot;#3-3-debugging&quot; class=&quot;headerlink&quot; title=&quot;3.3. debugging&quot;&gt;&lt;/a&gt;3.3. debugging&lt;/h2&gt;&lt;p&gt;debug&lt;br&gt;  enables debug mode which dumps to stdout all exchanges, and disables forking&lt;br&gt;  into background. it is the equivalent of the command-line argument “-d”. it&lt;br&gt;  should never be used in a production configuration since it may prevent full&lt;br&gt;  system startup.&lt;/p&gt;
&lt;p&gt;quiet&lt;br&gt;  do not display any message during startup. it is equivalent to the command-&lt;br&gt;  line argument “-q”.&lt;/p&gt;
&lt;h2 id=&quot;3-4-userlists&quot;&gt;&lt;a href=&quot;#3-4-userlists&quot; class=&quot;headerlink&quot; title=&quot;3.4. userlists&quot;&gt;&lt;/a&gt;3.4. userlists&lt;/h2&gt;&lt;p&gt;it is possible to control access to frontend/backend/listen sections or to&lt;br&gt;http stats by allowing only authenticated and authorized users. to do this,&lt;br&gt;it is required to create at least one userlist and to define users.&lt;/p&gt;
&lt;p&gt;userlist &lt;listname&gt;&lt;br&gt;  creates new userlist with name &lt;listname&gt;. many independent userlists can be&lt;br&gt;  used to store authentication &amp;amp; authorization data for independent customers.&lt;/listname&gt;&lt;/listname&gt;&lt;/p&gt;
&lt;p&gt;group &lt;groupname&gt; [users &lt;user&gt;,&lt;user&gt;,(…)]&lt;br&gt;  adds group &lt;groupname&gt; to the current userlist. it is also possible to&lt;br&gt;  attach users to this group by using a comma separated list of names&lt;br&gt;  proceeded by “users” keyword.&lt;/groupname&gt;&lt;/user&gt;&lt;/user&gt;&lt;/groupname&gt;&lt;/p&gt;
&lt;p&gt;user &lt;username&gt; [password|insecure-password &lt;password&gt;]&lt;br&gt;                [groups &lt;group&gt;,&lt;group&gt;,(…)]&lt;br&gt;  adds user &lt;username&gt; to the current userlist. both secure (encrypted) and&lt;br&gt;  insecure (unencrypted) passwords can be used. encrypted passwords are&lt;br&gt;  evaluated using the crypt(3) function so depending of the system’s&lt;br&gt;  capabilities, different algorithms are supported. for example modern glibc&lt;br&gt;  based linux system supports md5, sha-256, sha-512 and of course classic,&lt;br&gt;  des-based method of encrypting passwords.&lt;/username&gt;&lt;/group&gt;&lt;/group&gt;&lt;/password&gt;&lt;/username&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        userlist l1&lt;br&gt;          group g1 users tiger,scott&lt;br&gt;          group g2 users xdb,scott&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  user tiger password $6$k6y3o.ep$jlkbx9za9667qe4(...)xhswrv6j.c0/d7cv91
  user scott insecure-password elgato
  user xdb insecure-password hello

userlist l2
  group g1
  group g2

  user tiger password $6$k6y3o.ep$jlkbx(...)xhswrv6j.c0/d7cv91 groups g1
  user scott insecure-password elgato groups g1,g2
  user xdb insecure-password hello groups g2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  please note that both lists are functionally identical.&lt;/p&gt;
&lt;h2 id=&quot;3-5-peers&quot;&gt;&lt;a href=&quot;#3-5-peers&quot; class=&quot;headerlink&quot; title=&quot;3.5. peers&quot;&gt;&lt;/a&gt;3.5. peers&lt;/h2&gt;&lt;p&gt;it is possible to propagate entries of any data-types in stick-tables between&lt;br&gt;several haproxy instances over tcp connections in a multi-master fashion. each&lt;br&gt;instance pushes its local updates and insertions to remote peers. the pushed&lt;br&gt;values overwrite remote ones without aggregation. interrupted exchanges are&lt;br&gt;automatically detected and recovered from the last known point.&lt;br&gt;in addition, during a soft restart, the old process connects to the new one&lt;br&gt;using such a tcp connection to push all its entries before the new process&lt;br&gt;tries to connect to other peers. that ensures very fast replication during a&lt;br&gt;reload, it typically takes a fraction of a second even for large tables.&lt;br&gt;note that server ids are used to identify servers remotely, so it is important&lt;br&gt;that configurations look similar or at least that the same ids are forced on&lt;br&gt;each server on all participants.&lt;/p&gt;
&lt;p&gt;peers &lt;peersect&gt;&lt;br&gt;  creates a new peer list with name &lt;peersect&gt;. it is an independent section,&lt;br&gt;  which is referenced by one or more stick-tables.&lt;/peersect&gt;&lt;/peersect&gt;&lt;/p&gt;
&lt;p&gt;disabled&lt;br&gt;  disables a peers section. it disables both listening and any synchronization&lt;br&gt;  related to this section. this is provided to disable synchronization of stick&lt;br&gt;  tables without having to comment out all “peers” references.&lt;/p&gt;
&lt;p&gt;enable&lt;br&gt;  this re-enables a disabled peers section which was previously disabled.&lt;/p&gt;
&lt;p&gt;peer &lt;peername&gt; &lt;ip&gt;:&lt;port&gt;&lt;br&gt;  defines a peer inside a peers section.&lt;br&gt;  if &lt;peername&gt; is set to the local peer name (by default hostname, or forced&lt;br&gt;  using “-l” command line option), haproxy will listen for incoming remote peer&lt;br&gt;  connection on &lt;ip&gt;:&lt;port&gt;. otherwise, &lt;ip&gt;:&lt;port&gt; defines where to connect to&lt;br&gt;  to join the remote peer, and &lt;peername&gt; is used at the protocol level to&lt;br&gt;  identify and validate the remote peer on the server side.&lt;/peername&gt;&lt;/port&gt;&lt;/ip&gt;&lt;/port&gt;&lt;/ip&gt;&lt;/peername&gt;&lt;/port&gt;&lt;/ip&gt;&lt;/peername&gt;&lt;/p&gt;
&lt;p&gt;  during a soft restart, local peer &lt;ip&gt;:&lt;port&gt; is used by the old instance to&lt;br&gt;  connect the new one and initiate a complete replication (teaching process).&lt;/port&gt;&lt;/ip&gt;&lt;/p&gt;
&lt;p&gt;  it is strongly recommended to have the exact same peers declaration on all&lt;br&gt;  peers and to only rely on the “-l” command line argument to change the local&lt;br&gt;  peer name. this makes it easier to maintain coherent configuration files&lt;br&gt;  across all peers.&lt;/p&gt;
&lt;p&gt;  you may want to reference some environment variables in the address&lt;br&gt;  parameter, see section 2.3 about environment variables.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;    peers mypeers&lt;br&gt;        peer haproxy1 192.168.0.1:1024&lt;br&gt;        peer haproxy2 192.168.0.2:1024&lt;br&gt;        peer haproxy3 10.2.0.1:1024&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backend mybackend
    mode tcp
    balance roundrobin
    stick-table type ip size 20k peers mypeers
    stick on src

    server srv1 192.168.0.30:80
    server srv2 192.168.0.31:80
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-6-mailers&quot;&gt;&lt;a href=&quot;#3-6-mailers&quot; class=&quot;headerlink&quot; title=&quot;3.6. mailers&quot;&gt;&lt;/a&gt;3.6. mailers&lt;/h2&gt;&lt;p&gt;it is possible to send email alerts when the state of servers changes.&lt;br&gt;if configured email alerts are sent to each mailer that is configured&lt;br&gt;in a mailers section. email is sent to mailers using smtp.&lt;/p&gt;
&lt;p&gt;mailer &lt;mailersect&gt;&lt;br&gt;  creates a new mailer list with the name &lt;mailersect&gt;. it is an&lt;br&gt;  independent section which is referenced by one or more proxies.&lt;/mailersect&gt;&lt;/mailersect&gt;&lt;/p&gt;
&lt;p&gt;mailer &lt;mailername&gt; &lt;ip&gt;:&lt;port&gt;&lt;br&gt;  defines a mailer inside a mailers section.&lt;/port&gt;&lt;/ip&gt;&lt;/mailername&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;    mailers mymailers&lt;br&gt;        mailer smtp1 192.168.0.1:587&lt;br&gt;        mailer smtp2 192.168.0.2:587&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;backend mybackend
    mode tcp
    balance roundrobin

    email-alert mailers mymailers
    email-alert from test1@horms.org
    email-alert to test2@horms.org

    server srv1 192.168.0.30:80
    server srv2 192.168.0.31:80
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-proxies&quot;&gt;&lt;a href=&quot;#4-proxies&quot; class=&quot;headerlink&quot; title=&quot;4. proxies&quot;&gt;&lt;/a&gt;4. proxies&lt;/h2&gt;&lt;p&gt;proxy configuration can be located in a set of sections :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;defaults [&lt;name&gt;]&lt;/name&gt;&lt;/li&gt;
&lt;li&gt;frontend &lt;name&gt;&lt;/name&gt;&lt;/li&gt;
&lt;li&gt;backend  &lt;name&gt;&lt;/name&gt;&lt;/li&gt;
&lt;li&gt;listen   &lt;name&gt;&lt;/name&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a “defaults” section sets default parameters for all other sections following&lt;br&gt;its declaration. those default parameters are reset by the next “defaults”&lt;br&gt;section. see below for the list of parameters which can be set in a “defaults”&lt;br&gt;section. the name is optional but its use is encouraged for better readability.&lt;/p&gt;
&lt;p&gt;a “frontend” section describes a set of listening sockets accepting client&lt;br&gt;connections.&lt;/p&gt;
&lt;p&gt;a “backend” section describes a set of servers to which the proxy will connect&lt;br&gt;to forward incoming connections.&lt;/p&gt;
&lt;p&gt;a “listen” section defines a complete proxy with its frontend and backend&lt;br&gt;parts combined in one section. it is generally useful for tcp-only traffic.&lt;/p&gt;
&lt;p&gt;all proxy names must be formed from upper and lower case letters, digits,&lt;br&gt;‘-‘ (dash), ‘_’ (underscore) , ‘.’ (dot) and ‘:’ (colon). acl names are&lt;br&gt;case-sensitive, which means that “www” and “www” are two different proxies.&lt;/p&gt;
&lt;p&gt;historically, all proxy names could overlap, it just caused troubles in the&lt;br&gt;logs. since the introduction of content switching, it is mandatory that two&lt;br&gt;proxies with overlapping capabilities (frontend/backend) have different names.&lt;br&gt;however, it is still permitted that a frontend and a backend share the same&lt;br&gt;name, as this configuration seems to be commonly encountered.&lt;/p&gt;
&lt;p&gt;right now, two major proxy modes are supported : “tcp”, also known as layer 4,&lt;br&gt;and “http”, also known as layer 7. in layer 4 mode, haproxy simply forwards&lt;br&gt;bidirectional traffic between two sides. in layer 7 mode, haproxy analyzes the&lt;br&gt;protocol, and can interact with it by allowing, blocking, switching, adding,&lt;br&gt;modifying, or removing arbitrary contents in requests or responses, based on&lt;br&gt;arbitrary criteria.&lt;/p&gt;
&lt;p&gt;in http mode, the processing applied to requests and responses flowing over&lt;br&gt;a connection depends in the combination of the frontend’s http options and&lt;br&gt;the backend’s. haproxy supports 5 connection modes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;kal : keep alive (“option http-keep-alive”) which is the default mode : all&lt;br&gt;requests and responses are processed, and connections remain open but idle&lt;br&gt;between responses and new requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tun: tunnel (“option http-tunnel”) : this was the default mode for versions&lt;br&gt;1.0 to 1.5-dev21 : only the first request and response are processed, and&lt;br&gt;everything else is forwarded with no analysis at all. this mode should not&lt;br&gt;be used as it creates lots of trouble with logging and http processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pcl: passive close (“option httpclose”) : exactly the same as tunnel mode,&lt;br&gt;but with “connection: close” appended in both directions to try to make&lt;br&gt;both ends close after the first request/response exchange.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;scl: server close (“option http-server-close”) : the server-facing&lt;br&gt;connection is closed after the end of the response is received, but the&lt;br&gt;client-facing connection remains open.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fcl: forced close (“option forceclose”) : the connection is actively closed&lt;br&gt;after the end of the response.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the effective mode that will be applied to a connection passing through a&lt;br&gt;frontend and a backend can be determined by both proxy modes according to the&lt;br&gt;following matrix, but in short, the modes are symmetric, keep-alive is the&lt;br&gt;weakest option and force close is the strongest.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;              backend mode

    | kal | tun | pcl | scl | fcl
----+-----+-----+-----+-----+----
kal | kal | tun | pcl | scl | fcl
----+-----+-----+-----+-----+----
tun | tun | tun | pcl | scl | fcl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; frontend   —-+—–+—–+—–+—–+—-&lt;br&gt;   mode     pcl | pcl | pcl | pcl | fcl | fcl&lt;br&gt;            —-+—–+—–+—–+—–+—-&lt;br&gt;            scl | scl | scl | fcl | scl | fcl&lt;br&gt;            —-+—–+—–+—–+—–+—-&lt;br&gt;            fcl | fcl | fcl | fcl | fcl | fcl&lt;/p&gt;
&lt;h2 id=&quot;4-1-proxy-keywords-matrix&quot;&gt;&lt;a href=&quot;#4-1-proxy-keywords-matrix&quot; class=&quot;headerlink&quot; title=&quot;4.1. proxy keywords matrix&quot;&gt;&lt;/a&gt;4.1. proxy keywords matrix&lt;/h2&gt;&lt;p&gt;the following list of keywords is supported. most of them may only be used in a&lt;br&gt;limited set of section types. some of them are marked as “deprecated” because&lt;br&gt;they are inherited from an old syntax which may be confusing or functionally&lt;br&gt;limited, and there are new recommended keywords to replace them. keywords&lt;br&gt;marked with “(*)” can be optionally inverted using the “no” prefix, eg. “no&lt;br&gt;option contstats”. this makes sense when the option has been enabled by default&lt;br&gt;and must be disabled for a specific instance. such options may also be prefixed&lt;br&gt;with “default” in order to restore default settings regardless of what has been&lt;br&gt;specified in a previous “defaults” section.&lt;/p&gt;
&lt;p&gt; keyword                              defaults   frontend   listen    backend&lt;br&gt;————————————+———-+———-+———+———&lt;br&gt;acl                                       -          x         x         x&lt;br&gt;appsession                                -          -         x         x&lt;br&gt;backlog                                   x          x         x         -&lt;br&gt;balance                                   x          -         x         x&lt;br&gt;bind                                      -          x         x         -&lt;br&gt;bind-process                              x          x         x         x&lt;br&gt;block                                     -          x         x         x&lt;br&gt;capture cookie                            -          x         x         -&lt;br&gt;capture request header                    -          x         x         -&lt;br&gt;capture response header                   -          x         x         -&lt;br&gt;clitimeout                  (deprecated)  x          x         x         -&lt;br&gt;compression                               x          x         x         x&lt;br&gt;contimeout                  (deprecated)  x          -         x         x&lt;br&gt;cookie                                    x          -         x         x&lt;br&gt;declare capture                           -          x         x         -&lt;br&gt;default-server                            x          -         x         x&lt;br&gt;default_backend                           x          x         x         -&lt;br&gt;description                               -          x         x         x&lt;br&gt;disabled                                  x          x         x         x&lt;br&gt;dispatch                                  -          -         x         x&lt;br&gt;email-alert from                          x          x         x         x&lt;br&gt;email-alert level                         x          x         x         x&lt;br&gt;email-alert mailers                       x          x         x         x&lt;br&gt;email-alert myhostname                    x          x         x         x&lt;br&gt;email-alert to                            x          x         x         x&lt;br&gt;enabled                                   x          x         x         x&lt;br&gt;errorfile                                 x          x         x         x&lt;br&gt;errorloc                                  x          x         x         x&lt;br&gt;errorloc302                               x          x         x         x&lt;br&gt;– keyword ————————– defaults - frontend - listen – backend -&lt;br&gt;errorloc303                               x          x         x         x&lt;br&gt;force-persist                             -          x         x         x&lt;br&gt;fullconn                                  x          -         x         x&lt;br&gt;grace                                     x          x         x         x&lt;br&gt;hash-type                                 x          -         x         x&lt;br&gt;http-check disable-on-404                 x          -         x         x&lt;br&gt;http-check expect                         -          -         x         x&lt;br&gt;http-check send-state                     x          -         x         x&lt;br&gt;http-request                              -          x         x         x&lt;br&gt;http-response                             -          x         x         x&lt;br&gt;http-send-name-header                     -          -         x         x&lt;br&gt;id                                        -          x         x         x&lt;br&gt;ignore-persist                            -          x         x         x&lt;br&gt;log                                  (&lt;em&gt;)  x          x         x         x&lt;br&gt;log-format                                x          x         x         -&lt;br&gt;log-tag                                   x          x         x         x&lt;br&gt;max-keep-alive-queue                      x          -         x         x&lt;br&gt;maxconn                                   x          x         x         -&lt;br&gt;mode                                      x          x         x         x&lt;br&gt;monitor fail                              -          x         x         -&lt;br&gt;monitor-net                               x          x         x         -&lt;br&gt;monitor-uri                               x          x         x         -&lt;br&gt;option abortonclose                  (&lt;/em&gt;)  x          -         x         x&lt;br&gt;option accept-invalid-http-request   (&lt;em&gt;)  x          x         x         -&lt;br&gt;option accept-invalid-http-response  (&lt;/em&gt;)  x          -         x         x&lt;br&gt;option allbackups                    (&lt;em&gt;)  x          -         x         x&lt;br&gt;option checkcache                    (&lt;/em&gt;)  x          -         x         x&lt;br&gt;option clitcpka                      (&lt;em&gt;)  x          x         x         -&lt;br&gt;option contstats                     (&lt;/em&gt;)  x          x         x         -&lt;br&gt;option dontlog-normal                (&lt;em&gt;)  x          x         x         -&lt;br&gt;option dontlognull                   (&lt;/em&gt;)  x          x         x         -&lt;br&gt;option forceclose                    (&lt;em&gt;)  x          x         x         x&lt;br&gt;– keyword ————————– defaults - frontend - listen – backend -&lt;br&gt;option forwardfor                         x          x         x         x&lt;br&gt;option http-buffer-request           (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option http-ignore-probes            (&lt;em&gt;)  x          x         x         -&lt;br&gt;option http-keep-alive               (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option http-no-delay                 (&lt;em&gt;)  x          x         x         x&lt;br&gt;option http-pretend-keepalive        (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option http-server-close             (&lt;em&gt;)  x          x         x         x&lt;br&gt;option http-tunnel                   (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option http-use-proxy-header         (&lt;em&gt;)  x          x         x         -&lt;br&gt;option httpchk                            x          -         x         x&lt;br&gt;option httpclose                     (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option httplog                            x          x         x         x&lt;br&gt;option http_proxy                    (&lt;em&gt;)  x          x         x         x&lt;br&gt;option independent-streams           (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option ldap-check                         x          -         x         x&lt;br&gt;option external-check                     x          -         x         x&lt;br&gt;option log-health-checks             (&lt;em&gt;)  x          -         x         x&lt;br&gt;option log-separate-errors           (&lt;/em&gt;)  x          x         x         -&lt;br&gt;option logasap                       (&lt;em&gt;)  x          x         x         -&lt;br&gt;option mysql-check                        x          -         x         x&lt;br&gt;option pgsql-check                        x          -         x         x&lt;br&gt;option nolinger                      (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option originalto                         x          x         x         x&lt;br&gt;option persist                       (&lt;em&gt;)  x          -         x         x&lt;br&gt;option redispatch                    (&lt;/em&gt;)  x          -         x         x&lt;br&gt;option redis-check                        x          -         x         x&lt;br&gt;option smtpchk                            x          -         x         x&lt;br&gt;option socket-stats                  (&lt;em&gt;)  x          x         x         -&lt;br&gt;option splice-auto                   (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option splice-request                (&lt;em&gt;)  x          x         x         x&lt;br&gt;option splice-response               (&lt;/em&gt;)  x          x         x         x&lt;br&gt;option srvtcpka                      (&lt;em&gt;)  x          -         x         x&lt;br&gt;option ssl-hello-chk                      x          -         x         x&lt;br&gt;– keyword ————————– defaults - frontend - listen – backend -&lt;br&gt;option tcp-check                          x          -         x         x&lt;br&gt;option tcp-smart-accept              (&lt;/em&gt;)  x          x         x         -&lt;br&gt;option tcp-smart-connect             (&lt;em&gt;)  x          -         x         x&lt;br&gt;option tcpka                              x          x         x         x&lt;br&gt;option tcplog                             x          x         x         x&lt;br&gt;option transparent                   (&lt;/em&gt;)  x          -         x         x&lt;br&gt;external-check command                    x          -         x         x&lt;br&gt;external-check path                       x          -         x         x&lt;br&gt;persist rdp-cookie                        x          -         x         x&lt;br&gt;rate-limit sessions                       x          x         x         -&lt;br&gt;redirect                                  -          x         x         x&lt;br&gt;redisp                      (deprecated)  x          -         x         x&lt;br&gt;redispatch                  (deprecated)  x          -         x         x&lt;br&gt;reqadd                                    -          x         x         x&lt;br&gt;reqallow                                  -          x         x         x&lt;br&gt;reqdel                                    -          x         x         x&lt;br&gt;reqdeny                                   -          x         x         x&lt;br&gt;reqiallow                                 -          x         x         x&lt;br&gt;reqidel                                   -          x         x         x&lt;br&gt;reqideny                                  -          x         x         x&lt;br&gt;reqipass                                  -          x         x         x&lt;br&gt;reqirep                                   -          x         x         x&lt;br&gt;reqitarpit                                -          x         x         x&lt;br&gt;reqpass                                   -          x         x         x&lt;br&gt;reqrep                                    -          x         x         x&lt;br&gt;– keyword ————————– defaults - frontend - listen – backend -&lt;br&gt;reqtarpit                                 -          x         x         x&lt;br&gt;retries                                   x          -         x         x&lt;br&gt;rspadd                                    -          x         x         x&lt;br&gt;rspdel                                    -          x         x         x&lt;br&gt;rspdeny                                   -          x         x         x&lt;br&gt;rspidel                                   -          x         x         x&lt;br&gt;rspideny                                  -          x         x         x&lt;br&gt;rspirep                                   -          x         x         x&lt;br&gt;rsprep                                    -          x         x         x&lt;br&gt;server                                    -          -         x         x&lt;br&gt;source                                    x          -         x         x&lt;br&gt;srvtimeout                  (deprecated)  x          -         x         x&lt;br&gt;stats admin                               -          -         x         x&lt;br&gt;stats auth                                x          -         x         x&lt;br&gt;stats enable                              x          -         x         x&lt;br&gt;stats hide-version                        x          -         x         x&lt;br&gt;stats http-request                        -          -         x         x&lt;br&gt;stats realm                               x          -         x         x&lt;br&gt;stats refresh                             x          -         x         x&lt;br&gt;stats scope                               x          -         x         x&lt;br&gt;stats show-desc                           x          -         x         x&lt;br&gt;stats show-legends                        x          -         x         x&lt;br&gt;stats show-node                           x          -         x         x&lt;br&gt;stats uri                                 x          -         x         x&lt;br&gt;– keyword ————————– defaults - frontend - listen – backend -&lt;br&gt;stick match                               -          -         x         x&lt;br&gt;stick on                                  -          -         x         x&lt;br&gt;stick store-request                       -          -         x         x&lt;br&gt;stick store-response                      -          -         x         x&lt;br&gt;stick-table                               -          -         x         x&lt;br&gt;tcp-check connect                         -          -         x         x&lt;br&gt;tcp-check expect                          -          -         x         x&lt;br&gt;tcp-check send                            -          -         x         x&lt;br&gt;tcp-check send-binary                     -          -         x         x&lt;br&gt;tcp-request connection                    -          x         x         -&lt;br&gt;tcp-request content                       -          x         x         x&lt;br&gt;tcp-request inspect-delay                 -          x         x         x&lt;br&gt;tcp-response content                      -          -         x         x&lt;br&gt;tcp-response inspect-delay                -          -         x         x&lt;br&gt;timeout check                             x          -         x         x&lt;br&gt;timeout client                            x          x         x         -&lt;br&gt;timeout client-fin                        x          x         x         -&lt;br&gt;timeout clitimeout          (deprecated)  x          x         x         -&lt;br&gt;timeout connect                           x          -         x         x&lt;br&gt;timeout contimeout          (deprecated)  x          -         x         x&lt;br&gt;timeout http-keep-alive                   x          x         x         x&lt;br&gt;timeout http-request                      x          x         x         x&lt;br&gt;timeout queue                             x          -         x         x&lt;br&gt;timeout server                            x          -         x         x&lt;br&gt;timeout server-fin                        x          -         x         x&lt;br&gt;timeout srvtimeout          (deprecated)  x          -         x         x&lt;br&gt;timeout tarpit                            x          x         x         x&lt;br&gt;timeout tunnel                            x          -         x         x&lt;br&gt;transparent                 (deprecated)  x          -         x         x&lt;br&gt;unique-id-format                          x          x         x         -&lt;br&gt;unique-id-header                          x          x         x         -&lt;br&gt;use_backend                               -          x         x         -&lt;br&gt;use-server                                -          -         x         x&lt;br&gt;————————————+———-+———-+———+———&lt;br&gt; keyword                              defaults   frontend   listen    backend&lt;/p&gt;
&lt;h2 id=&quot;4-2-alphabetically-sorted-keywords-reference&quot;&gt;&lt;a href=&quot;#4-2-alphabetically-sorted-keywords-reference&quot; class=&quot;headerlink&quot; title=&quot;4.2. alphabetically sorted keywords reference&quot;&gt;&lt;/a&gt;4.2. alphabetically sorted keywords reference&lt;/h2&gt;&lt;p&gt;this section provides a description of each keyword and its usage.&lt;/p&gt;
&lt;p&gt;acl &lt;aclname&gt; &lt;criterion&gt; [flags] [operator] &lt;value&gt; …&lt;br&gt;  declare or complete an access list.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  example:&lt;br&gt;        acl invalid_src  src          0.0.0.0/7 224.0.0.0/3&lt;br&gt;        acl invalid_src  src_port     0:1023&lt;br&gt;        acl local_dst    hdr(host) -i localhost&lt;/value&gt;&lt;/criterion&gt;&lt;/aclname&gt;&lt;/p&gt;
&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;appsession &lt;cookie&gt; len &lt;length&gt; timeout &lt;holdtime&gt;&lt;br&gt;           [request-learn] [prefix] [mode &lt;path-parameters|query-string&gt;]&lt;br&gt;  define session stickiness on an existing application cookie.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;cookie&gt;   this is the name of the cookie used by the application and which&lt;br&gt;               haproxy will have to learn for each new session.&lt;/cookie&gt;&lt;/path-parameters|query-string&gt;&lt;/holdtime&gt;&lt;/length&gt;&lt;/cookie&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;length&amp;gt;   this is the max number of characters that will be memorized and
           checked in each cookie value.

&amp;lt;holdtime&amp;gt; this is the time after which the cookie will be removed from
           memory if unused. if no unit is specified, this time is in
           milliseconds.

request-learn
           if this option is specified, then haproxy will be able to learn
           the cookie found in the request in case the server does not
           specify any in response. this is typically what happens with
           phpsessid cookies, or when haproxy&amp;apos;s session expires before
           the application&amp;apos;s session and the correct server is selected.
           it is recommended to specify this option to improve reliability.

prefix     when this option is specified, haproxy will match on the cookie
           prefix (or url parameter prefix). the appsession value is the
           data following this prefix.

           example :
           appsession aspsessionid len 64 timeout 3h prefix

           this will match the cookie aspsessionidxxxx=xxxxx,
           the appsession value will be xxxx=xxxxx.

mode       this option allows to change the url parser mode.
           2 modes are currently supported :
           - path-parameters :
             the parser looks for the appsession in the path parameters
             part (each parameter is separated by a semi-colon), which is
             convenient for jsessionid for example.
             this is the default mode if the option is not set.
           - query-string :
             in this mode, the parser will look for the appsession in the
             query string.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when an application cookie is defined in a backend, haproxy will check when&lt;br&gt;  the server sets such a cookie, and will store its value in a table, and&lt;br&gt;  associate it with the server’s identifier. up to &lt;length&gt; characters from&lt;br&gt;  the value will be retained. on each connection, haproxy will look for this&lt;br&gt;  cookie both in the “cookie:” headers, and as a url parameter (depending on&lt;br&gt;  the mode used). if a known value is found, the client will be directed to the&lt;br&gt;  server associated with this value. otherwise, the load balancing algorithm is&lt;br&gt;  applied. cookies are automatically removed from memory when they have been&lt;br&gt;  unused for a duration longer than &lt;holdtime&gt;.&lt;/holdtime&gt;&lt;/length&gt;&lt;/p&gt;
&lt;p&gt;  the definition of an application cookie is limited to one per backend.&lt;/p&gt;
&lt;p&gt;  note : consider not using this feature in multi-process mode (nbproc &amp;gt; 1)&lt;br&gt;         unless you know what you do : memory is not shared between the&lt;br&gt;         processes, which can result in random behaviours.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        appsession jsessionid len 52 timeout 3h&lt;/p&gt;
&lt;p&gt;  see also : “cookie”, “capture cookie”, “balance”, “stick”, “stick-table”,&lt;br&gt;             “ignore-persist”, “nbproc” and “bind-process”.&lt;/p&gt;
&lt;p&gt;backlog &lt;conns&gt;&lt;br&gt;  give hints to the system about the approximate listen backlog desired size&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;conns&gt;   is the number of pending connections. depending on the operating&lt;br&gt;              system, it may represent the number of already acknowledged&lt;br&gt;              connections, of non-acknowledged ones, or both.&lt;/conns&gt;&lt;/conns&gt;&lt;/p&gt;
&lt;p&gt;  in order to protect against syn flood attacks, one solution is to increase&lt;br&gt;  the system’s syn backlog size. depending on the system, sometimes it is just&lt;br&gt;  tunable via a system parameter, sometimes it is not adjustable at all, and&lt;br&gt;  sometimes the system relies on hints given by the application at the time of&lt;br&gt;  the listen() syscall. by default, haproxy passes the frontend’s maxconn value&lt;br&gt;  to the listen() syscall. on systems which can make use of this value, it can&lt;br&gt;  sometimes be useful to be able to specify a different value, hence this&lt;br&gt;  backlog parameter.&lt;/p&gt;
&lt;p&gt;  on linux 2.4, the parameter is ignored by the system. on linux 2.6, it is&lt;br&gt;  used as a hint and the system accepts up to the smallest greater power of&lt;br&gt;  two, and never more than some limits (usually 32768).&lt;/p&gt;
&lt;p&gt;  see also : “maxconn” and the target operating system’s tuning guide.&lt;/p&gt;
&lt;p&gt;balance &lt;algorithm&gt; [ &lt;arguments&gt; ]&lt;br&gt;balance url_param &lt;param&gt; [check_post]&lt;br&gt;  define the load balancing algorithm to be used in a backend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;algorithm&gt; is the algorithm used to select a server when doing load&lt;br&gt;                balancing. this only applies when no persistence information&lt;br&gt;                is available, or when a connection is redispatched to another&lt;br&gt;                server. &lt;algorithm&gt; may be one of the following :&lt;/algorithm&gt;&lt;/algorithm&gt;&lt;/arguments&gt;&lt;/algorithm&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  roundrobin  each server is used in turns, according to their weights.
              this is the smoothest and fairest algorithm when the server&amp;apos;s
              processing time remains equally distributed. this algorithm
              is dynamic, which means that server weights may be adjusted
              on the fly for slow starts for instance. it is limited by
              design to 4095 active servers per backend. note that in some
              large farms, when a server becomes up after having been down
              for a very short time, it may sometimes take a few hundreds
              requests for it to be re-integrated into the farm and start
              receiving traffic. this is normal, though very rare. it is
              indicated here in case you would have the chance to observe
              it, so that you don&amp;apos;t worry.

  static-rr   each server is used in turns, according to their weights.
              this algorithm is as similar to roundrobin except that it is
              static, which means that changing a server&amp;apos;s weight on the
              fly will have no effect. on the other hand, it has no design
              limitation on the number of servers, and when a server goes
              up, it is always immediately reintroduced into the farm, once
              the full map is recomputed. it also uses slightly less cpu to
              run (around -1%).

  leastconn   the server with the lowest number of connections receives the
              connection. round-robin is performed within groups of servers
              of the same load to ensure that all servers will be used. use
              of this algorithm is recommended where very long sessions are
              expected, such as ldap, sql, tse, etc... but is not very well
              suited for protocols using short sessions such as http. this
              algorithm is dynamic, which means that server weights may be
              adjusted on the fly for slow starts for instance.

  first       the first server with available connection slots receives the
              connection. the servers are chosen from the lowest numeric
              identifier to the highest (see server parameter &amp;quot;id&amp;quot;), which
              defaults to the server&amp;apos;s position in the farm. once a server
              reaches its maxconn value, the next server is used. it does
              not make sense to use this algorithm without setting maxconn.
              the purpose of this algorithm is to always use the smallest
              number of servers so that extra servers can be powered off
              during non-intensive hours. this algorithm ignores the server
              weight, and brings more benefit to long session such as rdp
              or imap than http, though it can be useful there too. in
              order to use this algorithm efficiently, it is recommended
              that a cloud controller regularly checks server usage to turn
              them off when unused, and regularly checks backend queue to
              turn new servers on when the queue inflates. alternatively,
              using &amp;quot;http-check send-state&amp;quot; may inform servers on the load.

  source      the source ip address is hashed and divided by the total
              weight of the running servers to designate which server will
              receive the request. this ensures that the same client ip
              address will always reach the same server as long as no
              server goes down or up. if the hash result changes due to the
              number of running servers changing, many clients will be
              directed to a different server. this algorithm is generally
              used in tcp mode where no cookie may be inserted. it may also
              be used on the internet to provide a best-effort stickiness
              to clients which refuse session cookies. this algorithm is
              static by default, which means that changing a server&amp;apos;s
              weight on the fly will have no effect, but this can be
              changed using &amp;quot;hash-type&amp;quot;.

  uri         this algorithm hashes either the left part of the uri (before
              the question mark) or the whole uri (if the &amp;quot;whole&amp;quot; parameter
              is present) and divides the hash value by the total weight of
              the running servers. the result designates which server will
              receive the request. this ensures that the same uri will
              always be directed to the same server as long as no server
              goes up or down. this is used with proxy caches and
              anti-virus proxies in order to maximize the cache hit rate.
              note that this algorithm may only be used in an http backend.
              this algorithm is static by default, which means that
              changing a server&amp;apos;s weight on the fly will have no effect,
              but this can be changed using &amp;quot;hash-type&amp;quot;.

              this algorithm supports two optional parameters &amp;quot;len&amp;quot; and
              &amp;quot;depth&amp;quot;, both followed by a positive integer number. these
              options may be helpful when it is needed to balance servers
              based on the beginning of the uri only. the &amp;quot;len&amp;quot; parameter
              indicates that the algorithm should only consider that many
              characters at the beginning of the uri to compute the hash.
              note that having &amp;quot;len&amp;quot; set to 1 rarely makes sense since most
              uris start with a leading &amp;quot;/&amp;quot;.

              the &amp;quot;depth&amp;quot; parameter indicates the maximum directory depth
              to be used to compute the hash. one level is counted for each
              slash in the request. if both parameters are specified, the
              evaluation stops when either is reached.

  url_param   the url parameter specified in argument will be looked up in
              the query string of each http get request.

              if the modifier &amp;quot;check_post&amp;quot; is used, then an http post
              request entity will be searched for the parameter argument,
              when it is not found in a query string after a question mark
              (&amp;apos;?&amp;apos;) in the url. the message body will only start to be
              analyzed once either the advertised amount of data has been
              received or the request buffer is full. in the unlikely event
              that chunked encoding is used, only the first chunk is
              scanned. parameter values separated by a chunk boundary, may
              be randomly balanced if at all. this keyword used to support
              an optional &amp;lt;max_wait&amp;gt; parameter which is now ignored.

              if the parameter is found followed by an equal sign (&amp;apos;=&amp;apos;) and
              a value, then the value is hashed and divided by the total
              weight of the running servers. the result designates which
              server will receive the request.

              this is used to track user identifiers in requests and ensure
              that a same user id will always be sent to the same server as
              long as no server goes up or down. if no value is found or if
              the parameter is not found, then a round robin algorithm is
              applied. note that this algorithm may only be used in an http
              backend. this algorithm is static by default, which means
              that changing a server&amp;apos;s weight on the fly will have no
              effect, but this can be changed using &amp;quot;hash-type&amp;quot;.

  hdr(&amp;lt;name&amp;gt;) the http header &amp;lt;name&amp;gt; will be looked up in each http
              request. just as with the equivalent acl &amp;apos;hdr()&amp;apos; function,
              the header name in parenthesis is not case sensitive. if the
              header is absent or if it does not contain any value, the
              roundrobin algorithm is applied instead.

              an optional &amp;apos;use_domain_only&amp;apos; parameter is available, for
              reducing the hash algorithm to the main domain part with some
              specific headers such as &amp;apos;host&amp;apos;. for instance, in the host
              value &amp;quot;haproxy.1wt.eu&amp;quot;, only &amp;quot;1wt&amp;quot; will be considered.

              this algorithm is static by default, which means that
              changing a server&amp;apos;s weight on the fly will have no effect,
              but this can be changed using &amp;quot;hash-type&amp;quot;.

  rdp-cookie
  rdp-cookie(&amp;lt;name&amp;gt;)
              the rdp cookie &amp;lt;name&amp;gt; (or &amp;quot;mstshash&amp;quot; if omitted) will be
              looked up and hashed for each incoming tcp request. just as
              with the equivalent acl &amp;apos;req_rdp_cookie()&amp;apos; function, the name
              is not case-sensitive. this mechanism is useful as a degraded
              persistence mode, as it makes it possible to always send the
              same user (or the same session id) to the same server. if the
              cookie is not found, the normal roundrobin algorithm is
              used instead.

              note that for this to work, the frontend must ensure that an
              rdp cookie is already present in the request buffer. for this
              you must use &amp;apos;tcp-request content accept&amp;apos; rule combined with
              a &amp;apos;req_rdp_cookie_cnt&amp;apos; acl.

              this algorithm is static by default, which means that
              changing a server&amp;apos;s weight on the fly will have no effect,
              but this can be changed using &amp;quot;hash-type&amp;quot;.

              see also the rdp_cookie pattern fetch function.

&amp;lt;arguments&amp;gt; is an optional list of arguments which may be needed by some
            algorithms. right now, only &amp;quot;url_param&amp;quot; and &amp;quot;uri&amp;quot; support an
            optional argument.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the load balancing algorithm of a backend is set to roundrobin when no other&lt;br&gt;  algorithm, mode nor option have been set. the algorithm may only be set once&lt;br&gt;  for each backend.&lt;/p&gt;
&lt;p&gt;  examples :&lt;br&gt;        balance roundrobin&lt;br&gt;        balance url_param userid&lt;br&gt;        balance url_param session_id check_post 64&lt;br&gt;        balance hdr(user-agent)&lt;br&gt;        balance hdr(host)&lt;br&gt;        balance hdr(host) use_domain_only&lt;/p&gt;
&lt;p&gt;  note: the following caveats and limitations on using the “check_post”&lt;br&gt;  extension with “url_param” must be considered :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- all post requests are eligible for consideration, because there is no way
  to determine if the parameters will be found in the body or entity which
  may contain binary data. therefore another method may be required to
  restrict consideration of post requests that have no url parameters in
  the body. (see acl reqideny http_end)

- using a &amp;lt;max_wait&amp;gt; value larger than the request buffer size does not
  make sense and is useless. the buffer size is set at build time, and
  defaults to 16 kb.

- content-encoding is not supported, the parameter search will probably
  fail; and load balancing will fall back to round robin.

- expect: 100-continue is not supported, load balancing will fall back to
  round robin.

- transfer-encoding (rfc2616 3.6.1) is only supported in the first chunk.
  if the entire parameter value is not present in the first chunk, the
  selection of server is undefined (actually, defined by how little
  actually appeared in the first chunk).

- this feature does not support generation of a 100, 411 or 501 response.

- in some cases, requesting &amp;quot;check_post&amp;quot; may attempt to scan the entire
  contents of a message body. scanning normally terminates when linear
  white space or control characters are found, indicating the end of what
  might be a url parameter list. this is probably not a concern with sgml
  type message bodies.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “dispatch”, “cookie”, “appsession”, “transparent”, “hash-type” and&lt;br&gt;             “http_proxy”.&lt;/p&gt;
&lt;p&gt;bind [&lt;address&gt;]:&lt;port_range&gt; [, …] [param&lt;em&gt;]&lt;br&gt;bind /&lt;path&gt;&lt;/path&gt; [, …] [param&lt;/em&gt;]&lt;br&gt;  define one or several listening addresses and/or ports in a frontend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;address&gt;     is optional and can be a host name, an ipv4 address, an ipv6&lt;br&gt;                  address, or ‘&lt;em&gt;‘. it designates the address the frontend will&lt;br&gt;                  listen on. if unset, all ipv4 addresses of the system will be&lt;br&gt;                  listened on. the same will apply for ‘&lt;/em&gt;‘ or the system’s&lt;br&gt;                  special address “0.0.0.0”. the ipv6 equivalent is ‘::’.&lt;br&gt;                  optionally, an address family prefix may be used before the&lt;br&gt;                  address to force the family regardless of the address format,&lt;br&gt;                  which can be useful to specify a path to a unix socket with&lt;br&gt;                  no slash (‘/‘). currently supported prefixes are :&lt;/address&gt;&lt;/port_range&gt;&lt;/address&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                - &amp;apos;ipv4@&amp;apos;  -&amp;gt; address is always ipv4
                - &amp;apos;ipv6@&amp;apos;  -&amp;gt; address is always ipv6
                - &amp;apos;unix@&amp;apos;  -&amp;gt; address is a path to a local unix socket
                - &amp;apos;abns@&amp;apos;  -&amp;gt; address is in abstract namespace (linux only).
                  note: since abstract sockets are not &amp;quot;rebindable&amp;quot;, they
                        do not cope well with multi-process mode during
                        soft-restart, so it is better to avoid them if
                        nbproc is greater than 1\. the effect is that if the
                        new process fails to start, only one of the old ones
                        will be able to rebind to the socket.
                - &amp;apos;fd@&amp;lt;n&amp;gt;&amp;apos; -&amp;gt; use file descriptor &amp;lt;n&amp;gt; inherited from the
                  parent. the fd must be bound and may or may not already
                  be listening.
              you may want to reference some environment variables in the
              address parameter, see section 2.3 about environment
              variables.

&amp;lt;port_range&amp;gt;  is either a unique tcp port, or a port range for which the
              proxy will accept connections for the ip address specified
              above. the port is mandatory for tcp listeners. note that in
              the case of an ipv6 address, the port is always the number
              after the last colon (&amp;apos;:&amp;apos;). a range can either be :
               - a numerical port (ex: &amp;apos;80&amp;apos;)
               - a dash-delimited ports range explicitly stating the lower
                 and upper bounds (ex: &amp;apos;2000-2100&amp;apos;) which are included in
                 the range.

              particular care must be taken against port ranges, because
              every &amp;lt;address:port&amp;gt; couple consumes one socket (= a file
              descriptor), so it&amp;apos;s easy to consume lots of descriptors
              with a simple range, and to run out of sockets. also, each
              &amp;lt;address:port&amp;gt; couple must be used only once among all
              instances running on a same system. please note that binding
              to ports lower than 1024 generally require particular
              privileges to start the program, which are independent of
              the &amp;apos;uid&amp;apos; parameter.

&amp;lt;path&amp;gt;        is a unix socket path beginning with a slash (&amp;apos;/&amp;apos;). this is
              alternative to the tcp listening port. haproxy will then
              receive unix connections on the socket located at this place.
              the path must begin with a slash and by default is absolute.
              it can be relative to the prefix defined by &amp;quot;unix-bind&amp;quot; in
              the global section. note that the total length of the prefix
              followed by the socket path cannot exceed some system limits
              for unix sockets, which commonly are set to 107 characters.

&amp;lt;param*&amp;gt;      is a list of parameters common to all sockets declared on the
              same line. these numerous parameters depend on os and build
              options and have a complete section dedicated to them. please
              refer to section 5 to for more details.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is possible to specify a list of address:port combinations delimited by&lt;br&gt;  commas. the frontend will then listen on all of these addresses. there is no&lt;br&gt;  fixed limit to the number of addresses and ports which can be listened on in&lt;br&gt;  a frontend, as well as there is no limit to the number of “bind” statements&lt;br&gt;  in a frontend.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        listen http_proxy&lt;br&gt;            bind :80,:443&lt;br&gt;            bind 10.0.0.1:10080,10.0.0.1:10443&lt;br&gt;            bind /var/run/ssl-frontend.sock user root mode 600 accept-proxy&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;listen http_https_proxy
    bind :80
    bind :443 ssl crt /etc/haproxy/site.pem

listen http_https_proxy_explicit
    bind ipv6@:80
    bind ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem
    bind unix@ssl-frontend.sock user root mode 600 accept-proxy

listen external_bind_app1
    bind &amp;quot;fd@${fd_app1}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “source”, “option forwardfor”, “unix-bind” and the proxy protocol&lt;br&gt;             documentation, and section 5 about bind options.&lt;/p&gt;
&lt;p&gt;bind-process [ all | odd | even | &lt;number 1-64=&quot;&quot;&gt;[-&lt;number 1-64=&quot;&quot;&gt;] ] …&lt;br&gt;  limit visibility of an instance to a certain set of processes numbers.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    all           all process will see this instance. this is the default. it&lt;br&gt;                  may be used to override a default value.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;odd           this instance will be enabled on processes 1,3,5,...63\. this
              option may be combined with other numbers.

even          this instance will be enabled on processes 2,4,6,...64\. this
              option may be combined with other numbers. do not use it
              with less than 2 processes otherwise some instances might be
              missing from all processes.

number        the instance will be enabled on this process number or range,
              whose values must all be between 1 and 32 or 64 depending on
              the machine&amp;apos;s word size. if a proxy is bound to process
              numbers greater than the configured global.nbproc, it will
              either be forced to process #1 if a single process was
              specified, or to all processes otherwise.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  this keyword limits binding of certain instances to certain processes. this&lt;br&gt;  is useful in order not to have too many processes listening to the same&lt;br&gt;  ports. for instance, on a dual-core machine, it might make sense to set&lt;br&gt;  ‘nbproc 2’ in the global section, then distributes the listeners among ‘odd’&lt;br&gt;  and ‘even’ instances.&lt;/p&gt;
&lt;p&gt;  at the moment, it is not possible to reference more than 32 or 64 processes&lt;br&gt;  using this keyword, but this should be more than enough for most setups.&lt;br&gt;  please note that ‘all’ really means all processes regardless of the machine’s&lt;br&gt;  word size, and is not limited to the first 32 or 64.&lt;/p&gt;
&lt;p&gt;  each “bind” line may further be limited to a subset of the proxy’s processes,&lt;br&gt;  please consult the “process” bind keyword in section 5.1.&lt;/p&gt;
&lt;p&gt;  when a frontend has no explicit “bind-process” line, it tries to bind to all&lt;br&gt;  the processes referenced by its “bind” lines. that means that frontends can&lt;br&gt;  easily adapt to their listeners’ processes.&lt;/p&gt;
&lt;p&gt;  if some backends are referenced by frontends bound to other processes, the&lt;br&gt;  backend automatically inherits the frontend’s processes.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        listen app_ip1&lt;br&gt;            bind 10.0.0.1:80&lt;br&gt;            bind-process odd&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;listen app_ip2
    bind 10.0.0.2:80
    bind-process even

listen management
    bind 10.0.0.3:80
    bind-process 1 2 3 4

listen management
    bind 10.0.0.4:80
    bind-process 1-4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “nbproc” in global section, and “process” in section 5.1.&lt;/p&gt;
&lt;p&gt;block { if | unless } &lt;condition&gt;&lt;br&gt;  block a layer 7 request if/unless a condition is matched&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;/condition&gt;&lt;/p&gt;
&lt;p&gt;  the http request will be blocked very early in the layer 7 processing&lt;br&gt;  if/unless &lt;condition&gt; is matched. a 403 error will be returned if the request&lt;br&gt;  is blocked. the condition has to reference acls (see section 7). this is&lt;br&gt;  typically used to deny access to certain sensitive resources if some&lt;br&gt;  conditions are met or not met. there is no fixed limit to the number of&lt;br&gt;  “block” statements per instance.&lt;/condition&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        acl invalid_src  src          0.0.0.0/7 224.0.0.0/3&lt;br&gt;        acl invalid_src  src_port     0:1023&lt;br&gt;        acl local_dst    hdr(host) -i localhost&lt;br&gt;        block if invalid_src || local_dst&lt;/p&gt;
&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;capture cookie &lt;name&gt; len &lt;length&gt;&lt;br&gt;  capture and log a cookie in the request and in the response.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the beginning of the name of the cookie to capture. in order&lt;br&gt;              to match the exact name, simply suffix the name with an equal&lt;br&gt;              sign (‘=’). the full name will appear in the logs, which is&lt;br&gt;              useful with application servers which adjust both the cookie name&lt;br&gt;              and value (eg: aspsessionxxxxx).&lt;/name&gt;&lt;/length&gt;&lt;/name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;length&amp;gt;  is the maximum number of characters to report in the logs, which
          include the cookie name, the equal sign and the value, all in the
          standard &amp;quot;name=value&amp;quot; form. the string will be truncated on the
          right if it exceeds &amp;lt;length&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  only the first cookie is captured. both the “cookie” request headers and the&lt;br&gt;  “set-cookie” response headers are monitored. this is particularly useful to&lt;br&gt;  check for application bugs causing session crossing or stealing between&lt;br&gt;  users, because generally the user’s cookies can only change on a login page.&lt;/p&gt;
&lt;p&gt;  when the cookie was not presented by the client, the associated log column&lt;br&gt;  will report “-“. when a request does not cause a cookie to be assigned by the&lt;br&gt;  server, a “-“ is reported in the response column.&lt;/p&gt;
&lt;p&gt;  the capture is performed in the frontend only because it is necessary that&lt;br&gt;  the log format does not change for a given frontend depending on the&lt;br&gt;  backends. this may change in the future. note that there can be only one&lt;br&gt;  “capture cookie” statement in a frontend. the maximum capture length is set&lt;br&gt;  by the global “tune.http.cookielen” setting and defaults to 63 characters. it&lt;br&gt;  is not possible to specify a capture in a “defaults” section.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        capture cookie aspsession len 32&lt;/p&gt;
&lt;p&gt;  see also : “capture request header”, “capture response header” as well as&lt;br&gt;            section 8 about logging.&lt;/p&gt;
&lt;p&gt;capture request header &lt;name&gt; len &lt;length&gt;&lt;br&gt;  capture and log the last occurrence of the specified request header.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the name of the header to capture. the header names are not&lt;br&gt;              case-sensitive, but it is a common practice to write them as they&lt;br&gt;              appear in the requests, with the first letter of each word in&lt;br&gt;              upper case. the header name will not appear in the logs, only the&lt;br&gt;              value is reported, but the position in the logs is respected.&lt;/name&gt;&lt;/length&gt;&lt;/name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;length&amp;gt;  is the maximum number of characters to extract from the value and
          report in the logs. the string will be truncated on the right if
          it exceeds &amp;lt;length&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the complete value of the last occurrence of the header is captured. the&lt;br&gt;  value will be added to the logs between braces (‘{}’). if multiple headers&lt;br&gt;  are captured, they will be delimited by a vertical bar (‘|’) and will appear&lt;br&gt;  in the same order they were declared in the configuration. non-existent&lt;br&gt;  headers will be logged just as an empty string. common uses for request&lt;br&gt;  header captures include the “host” field in virtual hosting environments, the&lt;br&gt;  “content-length” when uploads are supported, “user-agent” to quickly&lt;br&gt;  differentiate between real users and robots, and “x-forwarded-for” in proxied&lt;br&gt;  environments to find where the request came from.&lt;/p&gt;
&lt;p&gt;  note that when capturing headers such as “user-agent”, some spaces may be&lt;br&gt;  logged, making the log analysis more difficult. thus be careful about what&lt;br&gt;  you log if you know your log parser is not smart enough to rely on the&lt;br&gt;  braces.&lt;/p&gt;
&lt;p&gt;  there is no limit to the number of captured request headers nor to their&lt;br&gt;  length, though it is wise to keep them low to limit memory usage per session.&lt;br&gt;  in order to keep log format consistent for a same frontend, header captures&lt;br&gt;  can only be declared in a frontend. it is not possible to specify a capture&lt;br&gt;  in a “defaults” section.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        capture request header host len 15&lt;br&gt;        capture request header x-forwarded-for len 15&lt;br&gt;        capture request header referrer len 15&lt;/p&gt;
&lt;p&gt;  see also : “capture cookie”, “capture response header” as well as section 8&lt;br&gt;             about logging.&lt;/p&gt;
&lt;p&gt;capture response header &lt;name&gt; len &lt;length&gt;&lt;br&gt;  capture and log the last occurrence of the specified response header.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the name of the header to capture. the header names are not&lt;br&gt;              case-sensitive, but it is a common practice to write them as they&lt;br&gt;              appear in the response, with the first letter of each word in&lt;br&gt;              upper case. the header name will not appear in the logs, only the&lt;br&gt;              value is reported, but the position in the logs is respected.&lt;/name&gt;&lt;/length&gt;&lt;/name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;length&amp;gt;  is the maximum number of characters to extract from the value and
          report in the logs. the string will be truncated on the right if
          it exceeds &amp;lt;length&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the complete value of the last occurrence of the header is captured. the&lt;br&gt;  result will be added to the logs between braces (‘{}’) after the captured&lt;br&gt;  request headers. if multiple headers are captured, they will be delimited by&lt;br&gt;  a vertical bar (‘|’) and will appear in the same order they were declared in&lt;br&gt;  the configuration. non-existent headers will be logged just as an empty&lt;br&gt;  string. common uses for response header captures include the “content-length”&lt;br&gt;  header which indicates how many bytes are expected to be returned, the&lt;br&gt;  “location” header to track redirections.&lt;/p&gt;
&lt;p&gt;  there is no limit to the number of captured response headers nor to their&lt;br&gt;  length, though it is wise to keep them low to limit memory usage per session.&lt;br&gt;  in order to keep log format consistent for a same frontend, header captures&lt;br&gt;  can only be declared in a frontend. it is not possible to specify a capture&lt;br&gt;  in a “defaults” section.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        capture response header content-length len 9&lt;br&gt;        capture response header location len 15&lt;/p&gt;
&lt;p&gt;  see also : “capture cookie”, “capture request header” as well as section 8&lt;br&gt;             about logging.&lt;/p&gt;
&lt;p&gt;clitimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum inactivity time on the client side.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value is specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the client is expected to acknowledge or&lt;br&gt;  send data. in http mode, this timeout is particularly important to consider&lt;br&gt;  during the first phase, when the client sends the request, and during the&lt;br&gt;  response while it is reading data sent by the server. the value is specified&lt;br&gt;  in milliseconds by default, but can be in any other unit if the number is&lt;br&gt;  suffixed by the unit, as specified at the top of this document. in tcp mode&lt;br&gt;  (and to a lesser extent, in http mode), it is highly recommended that the&lt;br&gt;  client timeout remains equal to the server timeout in order to avoid complex&lt;br&gt;  situations to debug. it is a good practice to cover one or several tcp packet&lt;br&gt;  losses by specifying timeouts that are slightly above multiples of 3 seconds&lt;br&gt;  (eg: 4 or 5 seconds).&lt;/p&gt;
&lt;p&gt;  this parameter is specific to frontends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of expired sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter is provided for compatibility but is currently deprecated.&lt;br&gt;  please use “timeout client” instead.&lt;/p&gt;
&lt;p&gt;  see also : “timeout client”, “timeout http-request”, “timeout server”, and&lt;br&gt;             “srvtimeout”.&lt;/p&gt;
&lt;p&gt;compression algo &lt;algorithm&gt; …&lt;br&gt;compression type &lt;mime type=&quot;&quot;&gt; …&lt;br&gt;compression offload&lt;br&gt;  enable http compression.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    algo     is followed by the list of supported compression algorithms.&lt;br&gt;    type     is followed by the list of mime types that will be compressed.&lt;br&gt;    offload  makes haproxy work as a compression offloader only (see notes).&lt;/mime&gt;&lt;/algorithm&gt;&lt;/p&gt;
&lt;p&gt;  the currently supported algorithms are :&lt;br&gt;    identity     this is mostly for debugging, and it was useful for developing&lt;br&gt;                 the compression feature. identity does not apply any change on&lt;br&gt;                 data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gzip         applies gzip compression. this setting is only available when
             support for zlib was built in.

deflate      same as &amp;quot;gzip&amp;quot;, but with deflate algorithm and zlib format.
             note that this algorithm has ambiguous support on many
             browsers and no support at all from recent ones. it is
             strongly recommended not to use it for anything else than
             experimentation. this setting is only available when support
             for zlib was built in.

raw-deflate  same as &amp;quot;deflate&amp;quot; without the zlib wrapper, and used as an
             alternative when the browser wants &amp;quot;deflate&amp;quot;. all major
             browsers understand it and despite violating the standards,
             it is known to work better than &amp;quot;deflate&amp;quot;, at least on msie
             and some versions of safari. do not use it in conjunction
             with &amp;quot;deflate&amp;quot;, use either one or the other since both react
             to the same accept-encoding token. this setting is only
             available when support for zlib was built in.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  compression will be activated depending on the accept-encoding request&lt;br&gt;  header. with identity, it does not take care of that header.&lt;br&gt;  if backend servers support http compression, these directives&lt;br&gt;  will be no-op: haproxy will see the compressed response and will not&lt;br&gt;  compress again. if backend servers do not support http compression and&lt;br&gt;  there is accept-encoding header in request, haproxy will compress the&lt;br&gt;  matching response.&lt;/p&gt;
&lt;p&gt;  the “offload” setting makes haproxy remove the accept-encoding header to&lt;br&gt;  prevent backend servers from compressing responses. it is strongly&lt;br&gt;  recommended not to do this because this means that all the compression work&lt;br&gt;  will be done on the single point where haproxy is located. however in some&lt;br&gt;  deployment scenarios, haproxy may be installed in front of a buggy gateway&lt;br&gt;  with broken http compression implementation which can’t be turned off.&lt;br&gt;  in that case haproxy can be used to prevent that gateway from emitting&lt;br&gt;  invalid payloads. in this case, simply removing the header in the&lt;br&gt;  configuration does not work because it applies before the header is parsed,&lt;br&gt;  so that prevents haproxy from compressing. the “offload” setting should&lt;br&gt;  then be used for such scenarios. note: for now, the “offload” setting is&lt;br&gt;  ignored when set in a defaults section.&lt;/p&gt;
&lt;p&gt;  compression is disabled when:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* the request does not advertise a supported compression algorithm in the
  &amp;quot;accept-encoding&amp;quot; header
* the response message is not http/1.1
* http status code is not 200
* response header &amp;quot;transfer-encoding&amp;quot; contains &amp;quot;chunked&amp;quot; (temporary
  workaround)
* response contain neither a &amp;quot;content-length&amp;quot; header nor a
  &amp;quot;transfer-encoding&amp;quot; whose last value is &amp;quot;chunked&amp;quot;
* response contains a &amp;quot;content-type&amp;quot; header whose first value starts with
  &amp;quot;multipart&amp;quot;
* the response contains the &amp;quot;no-transform&amp;quot; value in the &amp;quot;cache-control&amp;quot;
  header
* user-agent matches &amp;quot;mozilla/4&amp;quot; unless it is msie 6 with xp sp2, or msie 7
  and later
* the response contains a &amp;quot;content-encoding&amp;quot; header, indicating that the
  response is already compressed (see compression offload)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  note: the compression does not rewrite etag headers, and does not emit the&lt;br&gt;        warning header.&lt;/p&gt;
&lt;p&gt;  examples :&lt;br&gt;        compression algo gzip&lt;br&gt;        compression type text/html text/plain&lt;/p&gt;
&lt;p&gt;contimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum time to wait for a connection attempt to a server to succeed.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value is specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  if the server is located on the same lan as haproxy, the connection should be&lt;br&gt;  immediate (less than a few milliseconds). anyway, it is a good practice to&lt;br&gt;  cover one or several tcp packet losses by specifying timeouts that are&lt;br&gt;  slightly above multiples of 3 seconds (eg: 4 or 5 seconds). by default, the&lt;br&gt;  connect timeout also presets the queue timeout to the same value if this one&lt;br&gt;  has not been specified. historically, the contimeout was also used to set the&lt;br&gt;  tarpit timeout in a listen section, which is not possible in a pure frontend.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of failed sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter is provided for backwards compatibility but is currently&lt;br&gt;  deprecated. please use “timeout connect”, “timeout queue” or “timeout tarpit”&lt;br&gt;  instead.&lt;/p&gt;
&lt;p&gt;  see also : “timeout connect”, “timeout queue”, “timeout tarpit”,&lt;br&gt;             “timeout server”, “contimeout”.&lt;/p&gt;
&lt;p&gt;cookie &lt;name&gt; [ rewrite | insert | prefix ] [ indirect ] [ nocache ]&lt;br&gt;              [ postonly ] [ preserve ] [ httponly ] [ secure ]&lt;br&gt;              [ domain &lt;domain&gt; ]* [ maxidle &lt;idle&gt; ] [ maxlife &lt;life&gt; ]&lt;br&gt;  enable cookie-based persistence in a backend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the name of the cookie which will be monitored, modified or&lt;br&gt;              inserted in order to bring persistence. this cookie is sent to&lt;br&gt;              the client via a “set-cookie” header in the response, and is&lt;br&gt;              brought back by the client in a “cookie” header in all requests.&lt;br&gt;              special care should be taken to choose a name which does not&lt;br&gt;              conflict with any likely application cookie. also, if the same&lt;br&gt;              backends are subject to be used by the same clients (eg:&lt;br&gt;              http/https), care should be taken to use different cookie names&lt;br&gt;              between all backends if persistence between them is not desired.&lt;/name&gt;&lt;/life&gt;&lt;/idle&gt;&lt;/domain&gt;&lt;/name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rewrite   this keyword indicates that the cookie will be provided by the
          server and that haproxy will have to modify its value to set the
          server&amp;apos;s identifier in it. this mode is handy when the management
          of complex combinations of &amp;quot;set-cookie&amp;quot; and &amp;quot;cache-control&amp;quot;
          headers is left to the application. the application can then
          decide whether or not it is appropriate to emit a persistence
          cookie. since all responses should be monitored, this mode only
          works in http close mode. unless the application behaviour is
          very complex and/or broken, it is advised not to start with this
          mode for new deployments. this keyword is incompatible with
          &amp;quot;insert&amp;quot; and &amp;quot;prefix&amp;quot;.

insert    this keyword indicates that the persistence cookie will have to
          be inserted by haproxy in server responses if the client did not

          already have a cookie that would have permitted it to access this
          server. when used without the &amp;quot;preserve&amp;quot; option, if the server
          emits a cookie with the same name, it will be remove before
          processing.  for this reason, this mode can be used to upgrade
          existing configurations running in the &amp;quot;rewrite&amp;quot; mode. the cookie
          will only be a session cookie and will not be stored on the
          client&amp;apos;s disk. by default, unless the &amp;quot;indirect&amp;quot; option is added,
          the server will see the cookies emitted by the client. due to
          caching effects, it is generally wise to add the &amp;quot;nocache&amp;quot; or
          &amp;quot;postonly&amp;quot; keywords (see below). the &amp;quot;insert&amp;quot; keyword is not
          compatible with &amp;quot;rewrite&amp;quot; and &amp;quot;prefix&amp;quot;.

prefix    this keyword indicates that instead of relying on a dedicated
          cookie for the persistence, an existing one will be completed.
          this may be needed in some specific environments where the client
          does not support more than one single cookie and the application
          already needs it. in this case, whenever the server sets a cookie
          named &amp;lt;name&amp;gt;, it will be prefixed with the server&amp;apos;s identifier
          and a delimiter. the prefix will be removed from all client
          requests so that the server still finds the cookie it emitted.
          since all requests and responses are subject to being modified,
          this mode requires the http close mode. the &amp;quot;prefix&amp;quot; keyword is
          not compatible with &amp;quot;rewrite&amp;quot; and &amp;quot;insert&amp;quot;. note: it is highly
          recommended not to use &amp;quot;indirect&amp;quot; with &amp;quot;prefix&amp;quot;, otherwise server
          cookie updates would not be sent to clients.

indirect  when this option is specified, no cookie will be emitted to a
          client which already has a valid one for the server which has
          processed the request. if the server sets such a cookie itself,
          it will be removed, unless the &amp;quot;preserve&amp;quot; option is also set. in
          &amp;quot;insert&amp;quot; mode, this will additionally remove cookies from the
          requests transmitted to the server, making the persistence
          mechanism totally transparent from an application point of view.
          note: it is highly recommended not to use &amp;quot;indirect&amp;quot; with
          &amp;quot;prefix&amp;quot;, otherwise server cookie updates would not be sent to
          clients.

nocache   this option is recommended in conjunction with the insert mode
          when there is a cache between the client and haproxy, as it
          ensures that a cacheable response will be tagged non-cacheable if
          a cookie needs to be inserted. this is important because if all
          persistence cookies are added on a cacheable home page for
          instance, then all customers will then fetch the page from an
          outer cache and will all share the same persistence cookie,
          leading to one server receiving much more traffic than others.
          see also the &amp;quot;insert&amp;quot; and &amp;quot;postonly&amp;quot; options.

postonly  this option ensures that cookie insertion will only be performed
          on responses to post requests. it is an alternative to the
          &amp;quot;nocache&amp;quot; option, because post responses are not cacheable, so
          this ensures that the persistence cookie will never get cached.
          since most sites do not need any sort of persistence before the
          first post which generally is a login request, this is a very
          efficient method to optimize caching without risking to find a
          persistence cookie in the cache.
          see also the &amp;quot;insert&amp;quot; and &amp;quot;nocache&amp;quot; options.

preserve  this option may only be used with &amp;quot;insert&amp;quot; and/or &amp;quot;indirect&amp;quot;. it
          allows the server to emit the persistence cookie itself. in this
          case, if a cookie is found in the response, haproxy will leave it
          untouched. this is useful in order to end persistence after a
          logout request for instance. for this, the server just has to
          emit a cookie with an invalid value (eg: empty) or with a date in
          the past. by combining this mechanism with the &amp;quot;disable-on-404&amp;quot;
          check option, it is possible to perform a completely graceful
          shutdown because users will definitely leave the server after
          they logout.

httponly  this option tells haproxy to add an &amp;quot;httponly&amp;quot; cookie attribute
          when a cookie is inserted. this attribute is used so that a
          user agent doesn&amp;apos;t share the cookie with non-http components.
          please check rfc6265 for more information on this attribute.

secure    this option tells haproxy to add a &amp;quot;secure&amp;quot; cookie attribute when
          a cookie is inserted. this attribute is used so that a user agent
          never emits this cookie over non-secure channels, which means
          that a cookie learned with this flag will be presented only over
          ssl/tls connections. please check rfc6265 for more information on
          this attribute.

domain    this option allows to specify the domain at which a cookie is
          inserted. it requires exactly one parameter: a valid domain
          name. if the domain begins with a dot, the browser is allowed to
          use it for any host ending with that name. it is also possible to
          specify several domain names by invoking this option multiple
          times. some browsers might have small limits on the number of
          domains, so be careful when doing that. for the record, sending
          10 domains to msie 6 or firefox 2 works as expected.

maxidle   this option allows inserted cookies to be ignored after some idle
          time. it only works with insert-mode cookies. when a cookie is
          sent to the client, the date this cookie was emitted is sent too.
          upon further presentations of this cookie, if the date is older
          than the delay indicated by the parameter (in seconds), it will
          be ignored. otherwise, it will be refreshed if needed when the
          response is sent to the client. this is particularly useful to
          prevent users who never close their browsers from remaining for
          too long on the same server (eg: after a farm size change). when
          this option is set and a cookie has no date, it is always
          accepted, but gets refreshed in the response. this maintains the
          ability for admins to access their sites. cookies that have a
          date in the future further than 24 hours are ignored. doing so
          lets admins fix timezone issues without risking kicking users off
          the site.

maxlife   this option allows inserted cookies to be ignored after some life
          time, whether they&amp;apos;re in use or not. it only works with insert
          mode cookies. when a cookie is first sent to the client, the date
          this cookie was emitted is sent too. upon further presentations
          of this cookie, if the date is older than the delay indicated by
          the parameter (in seconds), it will be ignored. if the cookie in
          the request has no date, it is accepted and a date will be set.
          cookies that have a date in the future further than 24 hours are
          ignored. doing so lets admins fix timezone issues without risking
          kicking users off the site. contrary to maxidle, this value is
          not refreshed, only the first visit date counts. both maxidle and
          maxlife may be used at the time. this is particularly useful to
          prevent users who never close their browsers from remaining for
          too long on the same server (eg: after a farm size change). this
          is stronger than the maxidle method in that it forces a
          redispatch after some absolute delay.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  there can be only one persistence cookie per http backend, and it can be&lt;br&gt;  declared in a defaults section. the value of the cookie will be the value&lt;br&gt;  indicated after the “cookie” keyword in a “server” statement. if no cookie&lt;br&gt;  is declared for a given server, the cookie is not set.&lt;/p&gt;
&lt;p&gt;  examples :&lt;br&gt;        cookie jsessionid prefix&lt;br&gt;        cookie srv insert indirect nocache&lt;br&gt;        cookie srv insert postonly indirect&lt;br&gt;        cookie srv insert indirect nocache maxidle 30m maxlife 8h&lt;/p&gt;
&lt;p&gt;  see also : “appsession”, “balance source”, “capture cookie”, “server”&lt;br&gt;             and “ignore-persist”.&lt;/p&gt;
&lt;p&gt;declare capture [ request | response ] len &lt;length&gt;&lt;br&gt;  declares a capture slot.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   no&lt;br&gt;  arguments:&lt;br&gt;    &lt;length&gt; is the length allowed for the capture.&lt;/length&gt;&lt;/length&gt;&lt;/p&gt;
&lt;p&gt;  this declaration is only available in the frontend or listen section, but the&lt;br&gt;  reserved slot can be used in the backends. the “request” keyword allocates a&lt;br&gt;  capture slot for use in the request, and “response” allocates a capture slot&lt;br&gt;  for use in the response.&lt;/p&gt;
&lt;p&gt;  see also: “capture-req”, “capture-res” (sample converters),&lt;br&gt;            “http-request capture” and “http-response capture”.&lt;/p&gt;
&lt;p&gt;default-server [param&lt;em&gt;]&lt;br&gt;  change default options for a server in a backend&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments:&lt;br&gt;    &amp;lt;param&lt;/em&gt;&amp;gt;  is a list of parameters for this server. the “default-server”&lt;br&gt;              keyword accepts an important number of options and has a complete&lt;br&gt;              section dedicated to it. please refer to section 5 for more&lt;br&gt;              details.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        default-server inter 1000 weight 13&lt;/p&gt;
&lt;p&gt;  see also: “server” and section 5 about server options&lt;/p&gt;
&lt;p&gt;default_backend &lt;backend&gt;&lt;br&gt;  specify the backend to use when no “use_backend” rule has been matched.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;backend&gt; is the name of the backend to use.&lt;/backend&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  when doing content-switching between frontend and backends using the&lt;br&gt;  “use_backend” keyword, it is often useful to indicate which backend will be&lt;br&gt;  used when no rule has matched. it generally is the dynamic backend which&lt;br&gt;  will catch all undetermined requests.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use_backend     dynamic  if  url_dyn
use_backend     static   if  url_css url_img extension_img
default_backend dynamic
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “use_backend”&lt;/p&gt;
&lt;p&gt;description &lt;string&gt;&lt;br&gt;  describe a listen, frontend or backend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments : string&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  allows to add a sentence to describe the related object in the haproxy html&lt;br&gt;  stats page. the description will be printed on the right of the object name&lt;br&gt;  it describes.&lt;br&gt;  no need to backslash spaces in the &lt;string&gt; arguments.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;disabled&lt;br&gt;  disable a proxy, frontend or backend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  the “disabled” keyword is used to disable an instance, mainly in order to&lt;br&gt;  liberate a listening port or to temporarily disable a service. the instance&lt;br&gt;  will still be created and its configuration will be checked, but it will be&lt;br&gt;  created in the “stopped” state and will appear as such in the statistics. it&lt;br&gt;  will not receive any traffic nor will it send any health-checks or logs. it&lt;br&gt;  is possible to disable many instances at once by adding the “disabled”&lt;br&gt;  keyword in a “defaults” section.&lt;/p&gt;
&lt;p&gt;  see also : “enabled”&lt;/p&gt;
&lt;p&gt;dispatch &lt;address&gt;:&lt;port&gt;&lt;br&gt;  set a default server address&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;/port&gt;&lt;/address&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;address&amp;gt; is the ipv4 address of the default server. alternatively, a
          resolvable hostname is supported, but this name will be resolved
          during start-up.

&amp;lt;ports&amp;gt;   is a mandatory port specification. all connections will be sent
          to this port, and it is not permitted to use port offsets as is
          possible with normal servers.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the “dispatch” keyword designates a default server for use when no other&lt;br&gt;  server can take the connection. in the past it was used to forward non&lt;br&gt;  persistent connections to an auxiliary load balancer. due to its simple&lt;br&gt;  syntax, it has also been used for simple tcp relays. it is recommended not to&lt;br&gt;  use it for more clarity, and to use the “server” directive instead.&lt;/p&gt;
&lt;p&gt;  see also : “server”&lt;/p&gt;
&lt;p&gt;enabled&lt;br&gt;  enable a proxy, frontend or backend.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  the “enabled” keyword is used to explicitly enable an instance, when the&lt;br&gt;  defaults has been set to “disabled”. this is very rarely used.&lt;/p&gt;
&lt;p&gt;  see also : “disabled”&lt;/p&gt;
&lt;p&gt;errorfile &lt;code&gt; &lt;file&gt;&lt;br&gt;  return a file contents instead of errors generated by haproxy&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;code&gt;    is the http status code. currently, haproxy is capable of&lt;br&gt;              generating codes 200, 400, 403, 405, 408, 429, 500, 502, 503, and&lt;br&gt;              504.&lt;/code&gt;&lt;/file&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;file&amp;gt;    designates a file containing the full http response. it is
          recommended to follow the common practice of appending &amp;quot;.http&amp;quot; to
          the filename so that people do not confuse the response with html
          error pages, and to use absolute paths, since files are read
          before any chroot is performed.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to understand that this keyword is not meant to rewrite&lt;br&gt;  errors returned by the server, but errors detected and returned by haproxy.&lt;br&gt;  this is why the list of supported errors is limited to a small set.&lt;/p&gt;
&lt;p&gt;  code 200 is emitted in response to requests matching a “monitor-uri” rule.&lt;/p&gt;
&lt;p&gt;  the files are returned verbatim on the tcp socket. this allows any trick such&lt;br&gt;  as redirections to another url or site, as well as tricks to clean cookies,&lt;br&gt;  force enable or disable caching, etc… the package provides default error&lt;br&gt;  files returning the same contents as default errors.&lt;/p&gt;
&lt;p&gt;  the files should not exceed the configured buffer size (bufsize), which&lt;br&gt;  generally is 8 or 16 kb, otherwise they will be truncated. it is also wise&lt;br&gt;  not to put any reference to local contents (eg: images) in order to avoid&lt;br&gt;  loops between the client and haproxy when all servers are down, causing an&lt;br&gt;  error to be returned instead of an image. for better http compliance, it is&lt;br&gt;  recommended that all header lines end with cr-lf and not lf alone.&lt;/p&gt;
&lt;p&gt;  the files are read at the same time as the configuration and kept in memory.&lt;br&gt;  for this reason, the errors continue to be returned even when the process is&lt;br&gt;  chrooted, and no file change is considered while the process is running. a&lt;br&gt;  simple method for developing those files consists in associating them to the&lt;br&gt;  403 status code and interrogating a blocked url.&lt;/p&gt;
&lt;p&gt;  see also : “errorloc”, “errorloc302”, “errorloc303”&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        errorfile 400 /etc/haproxy/errorfiles/400badreq.http&lt;br&gt;        errorfile 408 /dev/null  # workaround chrome pre-connect bug&lt;br&gt;        errorfile 403 /etc/haproxy/errorfiles/403forbid.http&lt;br&gt;        errorfile 503 /etc/haproxy/errorfiles/503sorry.http&lt;/p&gt;
&lt;p&gt;errorloc &lt;code&gt; &lt;url&gt;&lt;br&gt;errorloc302 &lt;code&gt; &lt;url&gt;&lt;br&gt;  return an http redirection to a url instead of errors generated by haproxy&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;code&gt;    is the http status code. currently, haproxy is capable of&lt;br&gt;              generating codes 200, 400, 403, 408, 500, 502, 503, and 504.&lt;/code&gt;&lt;/url&gt;&lt;/code&gt;&lt;/url&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;url&amp;gt;     it is the exact contents of the &amp;quot;location&amp;quot; header. it may contain
          either a relative uri to an error page hosted on the same site,
          or an absolute uri designating an error page on another site.
          special care should be given to relative uris to avoid redirect
          loops if the uri itself may generate the same error (eg: 500).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to understand that this keyword is not meant to rewrite&lt;br&gt;  errors returned by the server, but errors detected and returned by haproxy.&lt;br&gt;  this is why the list of supported errors is limited to a small set.&lt;/p&gt;
&lt;p&gt;  code 200 is emitted in response to requests matching a “monitor-uri” rule.&lt;/p&gt;
&lt;p&gt;  note that both keyword return the http 302 status code, which tells the&lt;br&gt;  client to fetch the designated url using the same http method. this can be&lt;br&gt;  quite problematic in case of non-get methods such as post, because the url&lt;br&gt;  sent to the client might not be allowed for something other than get. to&lt;br&gt;  workaround this problem, please use “errorloc303” which send the http 303&lt;br&gt;  status code, indicating to the client that the url must be fetched with a get&lt;br&gt;  request.&lt;/p&gt;
&lt;p&gt;  see also : “errorfile”, “errorloc303”&lt;/p&gt;
&lt;p&gt;errorloc303 &lt;code&gt; &lt;url&gt;&lt;br&gt;  return an http redirection to a url instead of errors generated by haproxy&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;code&gt;    is the http status code. currently, haproxy is capable of&lt;br&gt;              generating codes 400, 403, 408, 500, 502, 503, and 504.&lt;/code&gt;&lt;/url&gt;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;url&amp;gt;     it is the exact contents of the &amp;quot;location&amp;quot; header. it may contain
          either a relative uri to an error page hosted on the same site,
          or an absolute uri designating an error page on another site.
          special care should be given to relative uris to avoid redirect
          loops if the uri itself may generate the same error (eg: 500).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to understand that this keyword is not meant to rewrite&lt;br&gt;  errors returned by the server, but errors detected and returned by haproxy.&lt;br&gt;  this is why the list of supported errors is limited to a small set.&lt;/p&gt;
&lt;p&gt;  code 200 is emitted in response to requests matching a “monitor-uri” rule.&lt;/p&gt;
&lt;p&gt;  note that both keyword return the http 303 status code, which tells the&lt;br&gt;  client to fetch the designated url using the same http get method. this&lt;br&gt;  solves the usual problems associated with “errorloc” and the 302 code. it is&lt;br&gt;  possible that some very old browsers designed before http/1.1 do not support&lt;br&gt;  it, but no such problem has been reported till now.&lt;/p&gt;
&lt;p&gt;  see also : “errorfile”, “errorloc”, “errorloc302”&lt;/p&gt;
&lt;p&gt;email-alert from &lt;emailaddr&gt;&lt;br&gt;  declare the from email address to be used in both the envelope and header&lt;br&gt;  of email alerts.  this is the address that email alerts are sent from.&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/emailaddr&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;emailaddr&amp;gt; is the from email address to use when sending email alerts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  also requires “email-alert mailers” and “email-alert to” to be set&lt;br&gt;  and if so sending email alerts is enabled for the proxy.&lt;/p&gt;
&lt;p&gt;  see also : “email-alert level”, “email-alert mailers”,&lt;br&gt;             “email-alert myhostname”, “email-alert to”, section 3.6 about mailers.&lt;/p&gt;
&lt;p&gt;email-alert level &lt;level&gt;&lt;br&gt;  declare the maximum log level of messages for which email alerts will be&lt;br&gt;  sent. this acts as a filter on the sending of email alerts.&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/level&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;level&amp;gt; one of the 8 syslog levels:
          emerg alert crit err warning notice info  debug
        the above syslog levels are ordered from lowest to highest.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  by default level is alert&lt;/p&gt;
&lt;p&gt;  also requires “email-alert from”, “email-alert mailers” and&lt;br&gt;  “email-alert to” to be set and if so sending email alerts is enabled&lt;br&gt;  for the proxy.&lt;/p&gt;
&lt;p&gt;  alerts are sent when :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an un-paused server is marked as down and &lt;level&gt; is alert or lower&lt;/level&gt;&lt;/li&gt;
&lt;li&gt;a paused server is marked as down and &lt;level&gt; is notice or lower&lt;/level&gt;&lt;/li&gt;
&lt;li&gt;a server is marked as up or enters the drain state and &lt;level&gt;&lt;br&gt;is notice or lower&lt;/level&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“option log-health-checks” is enabled, &lt;level&gt; is info or lower,&lt;br&gt; and a health check status update occurs&lt;/level&gt;&lt;/p&gt;
&lt;p&gt;see also : “email-alert from”, “email-alert mailers”,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;email-alert myhostname&amp;quot;, &amp;quot;email-alert to&amp;quot;,
section 3.6 about mailers.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;email-alert mailers &lt;mailersect&gt;&lt;br&gt;  declare the mailers to be used when sending email alerts&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/mailersect&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;mailersect&amp;gt; is the name of the mailers section to send email alerts.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  also requires “email-alert from” and “email-alert to” to be set&lt;br&gt;  and if so sending email alerts is enabled for the proxy.&lt;/p&gt;
&lt;p&gt;  see also : “email-alert from”, “email-alert level”, “email-alert myhostname”,&lt;br&gt;             “email-alert to”, section 3.6 about mailers.&lt;/p&gt;
&lt;p&gt;email-alert myhostname &lt;hostname&gt;&lt;br&gt;  declare the to hostname address to be used when communicating with&lt;br&gt;  mailers.&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/hostname&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;emailaddr&amp;gt; is the to email address to use when sending email alerts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  by default the systems hostname is used.&lt;/p&gt;
&lt;p&gt;  also requires “email-alert from”, “email-alert mailers” and&lt;br&gt;  “email-alert to” to be set and if so sending email alerts is enabled&lt;br&gt;  for the proxy.&lt;/p&gt;
&lt;p&gt;  see also : “email-alert from”, “email-alert level”, “email-alert mailers”,&lt;br&gt;             “email-alert to”, section 3.6 about mailers.&lt;/p&gt;
&lt;p&gt;email-alert to &lt;emailaddr&gt;&lt;br&gt;  declare both the recipent address in the envelope and to address in the&lt;br&gt;  header of email alerts. this is the address that email alerts are sent to.&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/emailaddr&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;emailaddr&amp;gt; is the to email address to use when sending email alerts
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  also requires “email-alert mailers” and “email-alert to” to be set&lt;br&gt;  and if so sending email alerts is enabled for the proxy.&lt;/p&gt;
&lt;p&gt;  see also : “email-alert from”, “email-alert level”, “email-alert mailers”,&lt;br&gt;             “email-alert myhostname”, section 3.6 about mailers.&lt;/p&gt;
&lt;p&gt;force-persist { if | unless } &lt;condition&gt;&lt;br&gt;  declare a condition to force persistence on down servers&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   yes&lt;/condition&gt;&lt;/p&gt;
&lt;p&gt;  by default, requests are not dispatched to down servers. it is possible to&lt;br&gt;  force this using “option persist”, but it is unconditional and redispatches&lt;br&gt;  to a valid server if “option redispatch” is set. that leaves with very little&lt;br&gt;  possibilities to force some requests to reach a server which is artificially&lt;br&gt;  marked down for maintenance operations.&lt;/p&gt;
&lt;p&gt;  the “force-persist” statement allows one to declare various acl-based&lt;br&gt;  conditions which, when met, will cause a request to ignore the down status of&lt;br&gt;  a server and still try to connect to it. that makes it possible to start a&lt;br&gt;  server, still replying an error to the health checks, and run a specially&lt;br&gt;  configured browser to test the service. among the handy methods, one could&lt;br&gt;  use a specific source ip address, or a specific cookie. the cookie also has&lt;br&gt;  the advantage that it can easily be added/removed on the browser from a test&lt;br&gt;  page. once the service is validated, it is then possible to open the service&lt;br&gt;  to the world by returning a valid response to health checks.&lt;/p&gt;
&lt;p&gt;  the forced persistence is enabled when an “if” condition is met, or unless an&lt;br&gt;  “unless” condition is met. the final redispatch is always disabled when this&lt;br&gt;  is used.&lt;/p&gt;
&lt;p&gt;  see also : “option redispatch”, “ignore-persist”, “persist”,&lt;br&gt;             and section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;fullconn &lt;conns&gt;&lt;br&gt;  specify at what backend load the servers will reach their maxconn&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;conns&gt;   is the number of connections on the backend which will make the&lt;br&gt;              servers use the maximal number of connections.&lt;/conns&gt;&lt;/conns&gt;&lt;/p&gt;
&lt;p&gt;  when a server has a “maxconn” parameter specified, it means that its number&lt;br&gt;  of concurrent connections will never go higher. additionally, if it has a&lt;br&gt;  “minconn” parameter, it indicates a dynamic limit following the backend’s&lt;br&gt;  load. the server will then always accept at least &lt;minconn&gt; connections,&lt;br&gt;  never more than &lt;maxconn&gt;, and the limit will be on the ramp between both&lt;br&gt;  values when the backend has less than &lt;conns&gt; concurrent connections. this&lt;br&gt;  makes it possible to limit the load on the servers during normal loads, but&lt;br&gt;  push it further for important loads without overloading the servers during&lt;br&gt;  exceptional loads.&lt;/conns&gt;&lt;/maxconn&gt;&lt;/minconn&gt;&lt;/p&gt;
&lt;p&gt;  since it’s hard to get this value right, haproxy automatically sets it to&lt;br&gt;  10% of the sum of the maxconns of all frontends that may branch to this&lt;br&gt;  backend (based on “use_backend” and “default_backend” rules). that way it’s&lt;br&gt;  safe to leave it unset. however, “use_backend” involving dynamic names are&lt;br&gt;  not counted since there is no way to know if they could match or not.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# the servers will accept between 100 and 1000 concurrent connections each
# and the maximum of 1000 will be reached when the backend reaches 10000
# connections.
backend dynamic
   fullconn   10000
   server     srv1   dyn1:80 minconn 100 maxconn 1000
   server     srv2   dyn2:80 minconn 100 maxconn 1000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “maxconn”, “server”&lt;/p&gt;
&lt;p&gt;grace &lt;time&gt;&lt;br&gt;  maintain a proxy operational for some time after a soft stop&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;time&gt;    is the time (by default in milliseconds) for which the instance&lt;br&gt;              will remain operational with the frontend sockets still listening&lt;br&gt;              when a soft-stop is received via the sigusr1 signal.&lt;/time&gt;&lt;/time&gt;&lt;/p&gt;
&lt;p&gt;  this may be used to ensure that the services disappear in a certain order.&lt;br&gt;  this was designed so that frontends which are dedicated to monitoring by an&lt;br&gt;  external equipment fail immediately while other ones remain up for the time&lt;br&gt;  needed by the equipment to detect the failure.&lt;/p&gt;
&lt;p&gt;  note that currently, there is very little benefit in using this parameter,&lt;br&gt;  and it may in fact complicate the soft-reconfiguration process more than&lt;br&gt;  simplify it.&lt;/p&gt;
&lt;p&gt;hash-type &lt;method&gt; &lt;function&gt; &lt;modifier&gt;&lt;br&gt;  specify a method to use for mapping hashes to servers&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;method&gt; is the method used to select a server from the hash computed by&lt;br&gt;             the &lt;function&gt; :&lt;/function&gt;&lt;/method&gt;&lt;/modifier&gt;&lt;/function&gt;&lt;/method&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  map-based   the hash table is a static array containing all alive servers.
              the hashes will be very smooth, will consider weights, but
              will be static in that weight changes while a server is up
              will be ignored. this means that there will be no slow start.
              also, since a server is selected by its position in the array,
              most mappings are changed when the server count changes. this
              means that when a server goes up or down, or when a server is
              added to a farm, most connections will be redistributed to
              different servers. this can be inconvenient with caches for
              instance.

  consistent  the hash table is a tree filled with many occurrences of each
              server. the hash key is looked up in the tree and the closest
              server is chosen. this hash is dynamic, it supports changing
              weights while the servers are up, so it is compatible with the
              slow start feature. it has the advantage that when a server
              goes up or down, only its associations are moved. when a
              server is added to the farm, only a few part of the mappings
              are redistributed, making it an ideal method for caches.
              however, due to its principle, the distribution will never be
              very smooth and it may sometimes be necessary to adjust a
              server&amp;apos;s weight or its id to get a more balanced distribution.
              in order to get the same distribution on multiple load
              balancers, it is important that all servers have the exact
              same ids. note: consistent hash uses sdbm and avalanche if no
              hash function is specified.

&amp;lt;function&amp;gt; is the hash function to be used :

   sdbm   this function was created initially for sdbm (a public-domain
          reimplementation of ndbm) database library. it was found to do
          well in scrambling bits, causing better distribution of the keys
          and fewer splits. it also happens to be a good general hashing
          function with good distribution, unless the total server weight
          is a multiple of 64, in which case applying the avalanche
          modifier may help.

   djb2   this function was first proposed by dan bernstein many years ago
          on comp.lang.c. studies have shown that for certain workload this
          function provides a better distribution than sdbm. it generally
          works well with text-based inputs though it can perform extremely
          poorly with numeric-only input or when the total server weight is
          a multiple of 33, unless the avalanche modifier is also used.

   wt6    this function was designed for haproxy while testing other
          functions in the past. it is not as smooth as the other ones, but
          is much less sensible to the input data set or to the number of
          servers. it can make sense as an alternative to sdbm+avalanche or
          djb2+avalanche for consistent hashing or when hashing on numeric
          data such as a source ip address or a visitor identifier in a url
          parameter.

   crc32  this is the most common crc32 implementation as used in ethernet,
          gzip, png, etc. it is slower than the other ones but may provide
          a better distribution or less predictable results especially when
          used on strings.

&amp;lt;modifier&amp;gt; indicates an optional method applied after hashing the key :

   avalanche   this directive indicates that the result from the hash
               function above should not be used in its raw form but that
               a 4-byte full avalanche hash must be applied first. the
               purpose of this step is to mix the resulting bits from the
               previous hash in order to avoid any undesired effect when
               the input contains some limited values or when the number of
               servers is a multiple of one of the hash&amp;apos;s components (64
               for sdbm, 33 for djb2). enabling avalanche tends to make the
               result less predictable, but it&amp;apos;s also not as smooth as when
               using the original function. some testing might be needed
               with some workloads. this hash is one of the many proposed
               by bob jenkins.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the default hash type is “map-based” and is recommended for most usages. the&lt;br&gt;  default function is “sdbm”, the selection of a function should be based on&lt;br&gt;  the range of the values being hashed.&lt;/p&gt;
&lt;p&gt;  see also : “balance”, “server”&lt;/p&gt;
&lt;p&gt;http-check disable-on-404&lt;br&gt;  enable a maintenance mode upon http/404 response to health-checks&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when this option is set, a server which returns an http code 404 will be&lt;br&gt;  excluded from further load-balancing, but will still receive persistent&lt;br&gt;  connections. this provides a very convenient method for web administrators&lt;br&gt;  to perform a graceful shutdown of their servers. it is also important to note&lt;br&gt;  that a server which is detected as failed while it was in this mode will not&lt;br&gt;  generate an alert, just a notice. if the server responds 2xx or 3xx again, it&lt;br&gt;  will immediately be reinserted into the farm. the status on the stats page&lt;br&gt;  reports “nolb” for a server in this mode. it is important to note that this&lt;br&gt;  option only works in conjunction with the “httpchk” option. if this option&lt;br&gt;  is used with “http-check expect”, then it has precedence over it so that 404&lt;br&gt;  responses will still be considered as soft-stop.&lt;/p&gt;
&lt;p&gt;  see also : “option httpchk”, “http-check expect”&lt;/p&gt;
&lt;p&gt;http-check expect [!] &lt;match&gt; &lt;pattern&gt;&lt;br&gt;  make http health checks consider response contents or specific status codes&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;match&gt;   is a keyword indicating how to look for a specific pattern in the&lt;br&gt;              response. the keyword may be one of “status”, “rstatus”,&lt;br&gt;              “string”, or “rstring”. the keyword may be preceded by an&lt;br&gt;              exclamation mark (“!”) to negate the match. spaces are allowed&lt;br&gt;              between the exclamation mark and the keyword. see below for more&lt;br&gt;              details on the supported keywords.&lt;/match&gt;&lt;/pattern&gt;&lt;/match&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;pattern&amp;gt; is the pattern to look for. it may be a string or a regular
          expression. if the pattern contains spaces, they must be escaped
          with the usual backslash (&amp;apos;\&amp;apos;).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  by default, “option httpchk” considers that response statuses 2xx and 3xx&lt;br&gt;  are valid, and that others are invalid. when “http-check expect” is used,&lt;br&gt;  it defines what is considered valid or invalid. only one “http-check”&lt;br&gt;  statement is supported in a backend. if a server fails to respond or times&lt;br&gt;  out, the check obviously fails. the available matches are :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;status &amp;lt;string&amp;gt; : test the exact string match for the http status code.
                  a health check response will be considered valid if the
                  response&amp;apos;s status code is exactly this string. if the
                  &amp;quot;status&amp;quot; keyword is prefixed with &amp;quot;!&amp;quot;, then the response
                  will be considered invalid if the status code matches.

rstatus &amp;lt;regex&amp;gt; : test a regular expression for the http status code.
                  a health check response will be considered valid if the
                  response&amp;apos;s status code matches the expression. if the
                  &amp;quot;rstatus&amp;quot; keyword is prefixed with &amp;quot;!&amp;quot;, then the response
                  will be considered invalid if the status code matches.
                  this is mostly used to check for multiple codes.

string &amp;lt;string&amp;gt; : test the exact string match in the http response body.
                  a health check response will be considered valid if the
                  response&amp;apos;s body contains this exact string. if the
                  &amp;quot;string&amp;quot; keyword is prefixed with &amp;quot;!&amp;quot;, then the response
                  will be considered invalid if the body contains this
                  string. this can be used to look for a mandatory word at
                  the end of a dynamic page, or to detect a failure when a
                  specific error appears on the check page (eg: a stack
                  trace).

rstring &amp;lt;regex&amp;gt; : test a regular expression on the http response body.
                  a health check response will be considered valid if the
                  response&amp;apos;s body matches this expression. if the &amp;quot;rstring&amp;quot;
                  keyword is prefixed with &amp;quot;!&amp;quot;, then the response will be
                  considered invalid if the body matches the expression.
                  this can be used to look for a mandatory word at the end
                  of a dynamic page, or to detect a failure when a specific
                  error appears on the check page (eg: a stack trace).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to note that the responses will be limited to a certain size&lt;br&gt;  defined by the global “tune.chksize” option, which defaults to 16384 bytes.&lt;br&gt;  thus, too large responses may not contain the mandatory pattern when using&lt;br&gt;  “string” or “rstring”. if a large response is absolutely required, it is&lt;br&gt;  possible to change the default max size by setting the global variable.&lt;br&gt;  however, it is worth keeping in mind that parsing very large responses can&lt;br&gt;  waste some cpu cycles, especially when regular expressions are used, and that&lt;br&gt;  it is always better to focus the checks on smaller resources.&lt;/p&gt;
&lt;p&gt;  also “http-check expect” doesn’t support http keep-alive. keep in mind that it&lt;br&gt;  will automatically append a “connection: close” header, meaning that this&lt;br&gt;  header should not be present in the request provided by “option httpchk”.&lt;/p&gt;
&lt;p&gt;  last, if “http-check expect” is combined with “http-check disable-on-404”,&lt;br&gt;  then this last one has precedence when the server responds with 404.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# only accept status 200 as valid
http-check expect status 200

# consider sql errors as errors
http-check expect ! string sql\ error

# consider status 5xx only as errors
http-check expect ! rstatus ^5

# check that we have a correct hexadecimal tag before /html
http-check expect rstring &amp;lt;!--tag:[0-9a-f]*&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httpchk”, “http-check disable-on-404”&lt;/p&gt;
&lt;p&gt;http-check send-state&lt;br&gt;  enable emission of a state header with http health checks&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when this option is set, haproxy will systematically send a special header&lt;br&gt;  “x-haproxy-server-state” with a list of parameters indicating to each server&lt;br&gt;  how they are seen by haproxy. this can be used for instance when a server is&lt;br&gt;  manipulated without access to haproxy and the operator needs to know whether&lt;br&gt;  haproxy still sees it up or not, or if the server is the last one in a farm.&lt;/p&gt;
&lt;p&gt;  the header is composed of fields delimited by semi-colons, the first of which&lt;br&gt;  is a word (“up”, “down”, “nolb”), possibly followed by a number of valid&lt;br&gt;  checks on the total number before transition, just as appears in the stats&lt;br&gt;  interface. next headers are in the form “&lt;variable&gt;=&lt;value&gt;“, indicating in&lt;br&gt;  no specific order some values available in the stats interface :&lt;/value&gt;&lt;/variable&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- a variable &amp;quot;address&amp;quot;, containing the address of the backend server.
  this corresponds to the &amp;lt;address&amp;gt; field in the server declaration. for
  unix domain sockets, it will read &amp;quot;unix&amp;quot;.

- a variable &amp;quot;port&amp;quot;, containing the port of the backend server. this
  corresponds to the &amp;lt;port&amp;gt; field in the server declaration. for unix
  domain sockets, it will read &amp;quot;unix&amp;quot;.

- a variable &amp;quot;name&amp;quot;, containing the name of the backend followed by a slash
  (&amp;quot;/&amp;quot;) then the name of the server. this can be used when a server is
  checked in multiple backends.

- a variable &amp;quot;node&amp;quot; containing the name of the haproxy node, as set in the
  global &amp;quot;node&amp;quot; variable, otherwise the system&amp;apos;s hostname if unspecified.

- a variable &amp;quot;weight&amp;quot; indicating the weight of the server, a slash (&amp;quot;/&amp;quot;)
  and the total weight of the farm (just counting usable servers). this
  helps to know if other servers are available to handle the load when this
  one fails.

- a variable &amp;quot;scur&amp;quot; indicating the current number of concurrent connections
  on the server, followed by a slash (&amp;quot;/&amp;quot;) then the total number of
  connections on all servers of the same backend.

- a variable &amp;quot;qcur&amp;quot; indicating the current number of requests in the
  server&amp;apos;s queue.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example of a header received by the application server :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;  x-haproxy-server-state: up 2/3; name=bck/srv2; node=lb1; weight=1/2; \
       scur=13/22; qcur=0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httpchk”, “http-check disable-on-404”&lt;/p&gt;
&lt;p&gt;http-request { allow | deny | tarpit | auth [realm &lt;realm&gt;] | redirect &lt;rule&gt; |&lt;br&gt;              add-header &lt;name&gt; &lt;fmt&gt; | set-header &lt;name&gt; &lt;fmt&gt; |&lt;br&gt;              capture &lt;sample&gt; [ len &lt;length&gt; | id &lt;id&gt; ] |&lt;br&gt;              del-header &lt;name&gt; | set-nice &lt;nice&gt; | set-log-level &lt;level&gt; |&lt;br&gt;              replace-header &lt;name&gt; &lt;match-regex&gt; &lt;replace-fmt&gt; |&lt;br&gt;              replace-value &lt;name&gt; &lt;match-regex&gt; &lt;replace-fmt&gt; |&lt;br&gt;              set-method &lt;fmt&gt; | set-path &lt;fmt&gt; | set-query &lt;fmt&gt; |&lt;br&gt;              set-uri &lt;fmt&gt; | set-tos &lt;tos&gt; | set-mark &lt;mark&gt; |&lt;br&gt;              add-acl(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;              del-acl(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;              del-map(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;              set-map(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; &lt;value fmt=&quot;&quot;&gt; |&lt;br&gt;              set-var(&lt;var name=&quot;&quot;&gt;) &lt;expr&gt; |&lt;br&gt;              { track-sc0 | track-sc1 | track-sc2 } &lt;key&gt; [table &lt;table&gt;] |&lt;br&gt;              lua &lt;function name=&quot;&quot;&gt;&lt;br&gt;             }&lt;br&gt;             [ { if | unless } &lt;condition&gt; ]&lt;br&gt;  access control for layer 7 requests&lt;/condition&gt;&lt;/function&gt;&lt;/table&gt;&lt;/key&gt;&lt;/expr&gt;&lt;/var&gt;&lt;/value&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/mark&gt;&lt;/tos&gt;&lt;/fmt&gt;&lt;/fmt&gt;&lt;/fmt&gt;&lt;/fmt&gt;&lt;/replace-fmt&gt;&lt;/match-regex&gt;&lt;/name&gt;&lt;/replace-fmt&gt;&lt;/match-regex&gt;&lt;/name&gt;&lt;/level&gt;&lt;/nice&gt;&lt;/name&gt;&lt;/id&gt;&lt;/length&gt;&lt;/sample&gt;&lt;/fmt&gt;&lt;/name&gt;&lt;/fmt&gt;&lt;/name&gt;&lt;/rule&gt;&lt;/realm&gt;&lt;/p&gt;
&lt;p&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                                no    |    yes   |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  the http-request statement defines a set of rules which apply to layer 7&lt;br&gt;  processing. the rules are evaluated in their declaration order when they are&lt;br&gt;  met in a frontend, listen or backend section. any rule may optionally be&lt;br&gt;  followed by an acl-based condition, in which case it will only be evaluated&lt;br&gt;  if the condition is true.&lt;/p&gt;
&lt;p&gt;  the first keyword is the rule’s action. currently supported actions include :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- &amp;quot;allow&amp;quot; : this stops the evaluation of the rules and lets the request
  pass the check. no further &amp;quot;http-request&amp;quot; rules are evaluated.

- &amp;quot;deny&amp;quot; : this stops the evaluation of the rules and immediately rejects
  the request and emits an http 403 error. no further &amp;quot;http-request&amp;quot; rules
  are evaluated.

- &amp;quot;tarpit&amp;quot; : this stops the evaluation of the rules and immediately blocks
  the request without responding for a delay specified by &amp;quot;timeout tarpit&amp;quot;
  or &amp;quot;timeout connect&amp;quot; if the former is not set. after that delay, if the
  client is still connected, an http error 500 is returned so that the
  client does not suspect it has been tarpitted. logs will report the flags
  &amp;quot;pt&amp;quot;. the goal of the tarpit rule is to slow down robots during an attack
  when they&amp;apos;re limited on the number of concurrent requests. it can be very
  efficient against very dumb robots, and will significantly reduce the
  load on firewalls compared to a &amp;quot;deny&amp;quot; rule. but when facing &amp;quot;correctly&amp;quot;
  developed robots, it can make things worse by forcing haproxy and the
  front firewall to support insane number of concurrent connections.

- &amp;quot;auth&amp;quot; : this stops the evaluation of the rules and immediately responds
  with an http 401 or 407 error code to invite the user to present a valid
  user name and password. no further &amp;quot;http-request&amp;quot; rules are evaluated. an
  optional &amp;quot;realm&amp;quot; parameter is supported, it sets the authentication realm
  that is returned with the response (typically the application&amp;apos;s name).

- &amp;quot;redirect&amp;quot; : this performs an http redirection based on a redirect rule.
  this is exactly the same as the &amp;quot;redirect&amp;quot; statement except that it
  inserts a redirect rule which can be processed in the middle of other
  &amp;quot;http-request&amp;quot; rules and that these rules use the &amp;quot;log-format&amp;quot; strings.
  see the &amp;quot;redirect&amp;quot; keyword for the rule&amp;apos;s syntax.

- &amp;quot;add-header&amp;quot; appends an http header field whose name is specified in
  &amp;lt;name&amp;gt; and whose value is defined by &amp;lt;fmt&amp;gt; which follows the log-format
  rules (see custom log format in section 8.2.4). this is particularly
  useful to pass connection-specific information to the server (eg: the
  client&amp;apos;s ssl certificate), or to combine several headers into one. this
  rule is not final, so it is possible to add other similar rules. note
  that header addition is performed immediately, so one rule might reuse
  the resulting header from a previous rule.

- &amp;quot;set-header&amp;quot; does the same as &amp;quot;add-header&amp;quot; except that the header name
  is first removed if it existed. this is useful when passing security
  information to the server, where the header must not be manipulated by
  external users. note that the new value is computed before the removal so
  it is possible to concatenate a value to an existing header.

- &amp;quot;del-header&amp;quot; removes all http header fields whose name is specified in
  &amp;lt;name&amp;gt;.

- &amp;quot;replace-header&amp;quot; matches the regular expression in all occurrences of
  header field &amp;lt;name&amp;gt; according to &amp;lt;match-regex&amp;gt;, and replaces them with
  the &amp;lt;replace-fmt&amp;gt; argument. format characters are allowed in replace-fmt
  and work like in &amp;lt;fmt&amp;gt; arguments in &amp;quot;add-header&amp;quot;. the match is only
  case-sensitive. it is important to understand that this action only
  considers whole header lines, regardless of the number of values they
  may contain. this usage is suited to headers naturally containing commas
  in their value, such as if-modified-since and so on.

  example:

    http-request replace-header cookie foo=([^;]*);(.*) foo=\1;ip=%bi;\2

  applied to:

    cookie: foo=foobar; expires=tue, 14-jun-2016 01:40:45 gmt;

  outputs:

    cookie: foo=foobar;ip=192.168.1.20; expires=tue, 14-jun-2016 01:40:45 gmt;

  assuming the backend ip is 192.168.1.20

- &amp;quot;replace-value&amp;quot; works like &amp;quot;replace-header&amp;quot; except that it matches the
  regex against every comma-delimited value of the header field &amp;lt;name&amp;gt;
  instead of the entire header. this is suited for all headers which are
  allowed to carry more than one value. an example could be the accept
  header.

  example:

    http-request replace-value x-forwarded-for ^192\.168\.(.*)$ 172.16.\1

  applied to:

    x-forwarded-for: 192.168.10.1, 192.168.13.24, 10.0.0.37

  outputs:

    x-forwarded-for: 172.16.10.1, 172.16.13.24, 10.0.0.37

- &amp;quot;set-method&amp;quot; rewrites the request method with the result of the
  evaluation of format string &amp;lt;fmt&amp;gt;. there should be very few valid reasons
  for having to do so as this is more likely to break something than to fix
  it.

- &amp;quot;set-path&amp;quot; rewrites the request path with the result of the evaluation of
  format string &amp;lt;fmt&amp;gt;. the query string, if any, is left intact. if a
  scheme and authority is found before the path, they are left intact as
  well. if the request doesn&amp;apos;t have a path (&amp;quot;*&amp;quot;), this one is replaced with
  the format. this can be used to prepend a directory component in front of
  a path for example. see also &amp;quot;set-query&amp;quot; and &amp;quot;set-uri&amp;quot;.

  example :
      # prepend the host name before the path
      http-request set-path /%[hdr(host)]%[path]

- &amp;quot;set-query&amp;quot; rewrites the request&amp;apos;s query string which appears after the
  first question mark (&amp;quot;?&amp;quot;) with the result of the evaluation of format
  string &amp;lt;fmt&amp;gt;. the part prior to the question mark is left intact. if the
  request doesn&amp;apos;t contain a question mark and the new value is not empty,
  then one is added at the end of the uri, followed by the new value. if
  a question mark was present, it will never be removed even if the value
  is empty. this can be used to add or remove parameters from the query
  string. see also &amp;quot;set-query&amp;quot; and &amp;quot;set-uri&amp;quot;.

  example :
      # replace &amp;quot;%3d&amp;quot; with &amp;quot;=&amp;quot; in the query string
      http-request set-query %[query,regsub(%3d,=,g)]

- &amp;quot;set-uri&amp;quot; rewrites the request uri with the result of the evaluation of
  format string &amp;lt;fmt&amp;gt;. the scheme, authority, path and query string are all
  replaced at once. this can be used to rewrite hosts in front of proxies,
  or to perform complex modifications to the uri such as moving parts
  between the path and the query string. see also &amp;quot;set-path&amp;quot; and
  &amp;quot;set-query&amp;quot;.

- &amp;quot;set-nice&amp;quot; sets the &amp;quot;nice&amp;quot; factor of the current request being processed.
  it only has effect against the other requests being processed at the same
  time. the default value is 0, unless altered by the &amp;quot;nice&amp;quot; setting on the
  &amp;quot;bind&amp;quot; line. the accepted range is -1024..1024\. the higher the value, the
  nicest the request will be. lower values will make the request more
  important than other ones. this can be useful to improve the speed of
  some requests, or lower the priority of non-important requests. using
  this setting without prior experimentation can cause some major slowdown.

- &amp;quot;set-log-level&amp;quot; is used to change the log level of the current request
  when a certain condition is met. valid levels are the 8 syslog levels
  (see the &amp;quot;log&amp;quot; keyword) plus the special level &amp;quot;silent&amp;quot; which disables
  logging for this request. this rule is not final so the last matching
  rule wins. this rule can be useful to disable health checks coming from
  another equipment.

- &amp;quot;set-tos&amp;quot; is used to set the tos or dscp field value of packets sent to
  the client to the value passed in &amp;lt;tos&amp;gt; on platforms which support this.
  this value represents the whole 8 bits of the ip tos field, and can be
  expressed both in decimal or hexadecimal format (prefixed by &amp;quot;0x&amp;quot;). note
  that only the 6 higher bits are used in dscp or tos, and the two lower
  bits are always 0\. this can be used to adjust some routing behaviour on
  border routers based on some information from the request. see rfc 2474,
  2597, 3260 and 4594 for more information.

- &amp;quot;set-mark&amp;quot; is used to set the netfilter mark on all packets sent to the
  client to the value passed in &amp;lt;mark&amp;gt; on platforms which support it. this
  value is an unsigned 32 bit value which can be matched by netfilter and
  by the routing table. it can be expressed both in decimal or hexadecimal
  format (prefixed by &amp;quot;0x&amp;quot;). this can be useful to force certain packets to
  take a different route (for example a cheaper network path for bulk
  downloads). this works on linux kernels 2.6.32 and above and requires
  admin privileges.

- &amp;quot;add-acl&amp;quot; is used to add a new entry into an acl. the acl must be loaded
  from a file (even a dummy empty file). the file name of the acl to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the new entry. it
  performs a lookup in the acl before insertion, to avoid duplicated (or
  more) values. this lookup is done by a linear search and can be expensive
  with large lists! it is the equivalent of the &amp;quot;add acl&amp;quot; command from the
  stats socket, but can be triggered by an http request.

- &amp;quot;del-acl&amp;quot; is used to delete an entry from an acl. the acl must be loaded
  from a file (even a dummy empty file). the file name of the acl to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the entry to delete.
  it is the equivalent of the &amp;quot;del acl&amp;quot; command from the stats socket, but
  can be triggered by an http request.

- &amp;quot;del-map&amp;quot; is used to delete an entry from a map. the map must be loaded
  from a file (even a dummy empty file). the file name of the map to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the entry to delete.
  it takes one argument: &amp;quot;file name&amp;quot; it is the equivalent of the &amp;quot;del map&amp;quot;
  command from the stats socket, but can be triggered by an http request.

- &amp;quot;set-map&amp;quot; is used to add a new entry into a map. the map must be loaded
  from a file (even a dummy empty file). the file name of the map to be
  updated is passed between parentheses. it takes 2 arguments: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, used to collect map key, and &amp;lt;value fmt&amp;gt;,
  which follows log-format rules, used to collect content for the new entry.
  it performs a lookup in the map before insertion, to avoid duplicated (or
  more) values. this lookup is done by a linear search and can be expensive
  with large lists! it is the equivalent of the &amp;quot;set map&amp;quot; command from the
  stats socket, but can be triggered by an http request.

- capture &amp;lt;sample&amp;gt; [ len &amp;lt;length&amp;gt; | id &amp;lt;id&amp;gt; ] :
  captures sample expression &amp;lt;sample&amp;gt; from the request buffer, and converts
  it to a string of at most &amp;lt;len&amp;gt; characters. the resulting string is
  stored into the next request &amp;quot;capture&amp;quot; slot, so it will possibly appear
  next to some captured http headers. it will then automatically appear in
  the logs, and it will be possible to extract it using sample fetch rules
  to feed it into headers or anything. the length should be limited given
  that this size will be allocated for each capture during the whole
  session life. please check section 7.3 (fetching samples) and &amp;quot;capture
  request header&amp;quot; for more information.

  if the keyword &amp;quot;id&amp;quot; is used instead of &amp;quot;len&amp;quot;, the action tries to store
  the captured string in a previously declared capture slot. this is useful
  to run captures in backends. the slot id can be declared by a previous
  directive &amp;quot;http-request capture&amp;quot; or with the &amp;quot;declare capture&amp;quot; keyword.

- { track-sc0 | track-sc1 | track-sc2 } &amp;lt;key&amp;gt; [table &amp;lt;table&amp;gt;] :
  enables tracking of sticky counters from current request. these rules
  do not stop evaluation and do not change default action. three sets of
  counters may be simultaneously tracked by the same connection. the first
  &amp;quot;track-sc0&amp;quot; rule executed enables tracking of the counters of the
  specified table as the first set. the first &amp;quot;track-sc1&amp;quot; rule executed
  enables tracking of the counters of the specified table as the second
  set. the first &amp;quot;track-sc2&amp;quot; rule executed enables tracking of the
  counters of the specified table as the third set. it is a recommended
  practice to use the first set of counters for the per-frontend counters
  and the second set for the per-backend ones. but this is just a
  guideline, all may be used everywhere.

  these actions take one or two arguments :
    &amp;lt;key&amp;gt;   is mandatory, and is a sample expression rule as described
            in section 7.3\. it describes what elements of the incoming
            request or connection will be analysed, extracted, combined,
            and used to select which table entry to update the counters.

    &amp;lt;table&amp;gt; is an optional table to be used instead of the default one,
            which is the stick-table declared in the current proxy. all
            the counters for the matches and updates for the key will
            then be performed in that table until the session ends.

  once a &amp;quot;track-sc*&amp;quot; rule is executed, the key is looked up in the table
  and if it is not found, an entry is allocated for it. then a pointer to
  that entry is kept during all the session&amp;apos;s life, and this entry&amp;apos;s
  counters are updated as often as possible, every time the session&amp;apos;s
  counters are updated, and also systematically when the session ends.
  counters are only updated for events that happen after the tracking has
  been started. as an exception, connection counters and request counters
  are systematically updated so that they reflect useful information.

  if the entry tracks concurrent connection counters, one connection is
  counted for as long as the entry is tracked, and the entry will not
  expire during that time. tracking counters also provides a performance
  advantage over just checking the keys, because only one table lookup is
  performed for all acl checks that make use of it.

- &amp;quot;lua&amp;quot; is used to run a lua function if the action is executed. the single
  parameter is the name of the function to run. the prototype of the
  function is documented in the api documentation.

- set-var(&amp;lt;var-name&amp;gt;) &amp;lt;expr&amp;gt; :
  is used to set the contents of a variable. the variable is declared
  inline.

    &amp;lt;var-name&amp;gt; the name of the variable starts by an indication about its
               scope. the allowed scopes are:
                 &amp;quot;sess&amp;quot; : the variable is shared with all the session,
                 &amp;quot;txn&amp;quot;  : the variable is shared with all the transaction
                          (request and response)
                 &amp;quot;req&amp;quot;  : the variable is shared only during the request
                          processing
                 &amp;quot;res&amp;quot;  : the variable is shared only during the response
                          processing.
               this prefix is followed by a name. the separator is a &amp;apos;.&amp;apos;.
               the name may only contain characters &amp;apos;a-z&amp;apos;, &amp;apos;a-z&amp;apos;, &amp;apos;0-9&amp;apos;,
               and &amp;apos;_&amp;apos;.

     &amp;lt;expr&amp;gt;    is a standard haproxy expression formed by a sample-fetch
               followed by some converters.

  example:

     http-request set-var(req.my_var) req.fhdr(user-agent),lower

- set-src &amp;lt;expr&amp;gt; :
  is used to set the source ip address to the value of specified
  expression. useful when a proxy in front of haproxy rewrites source ip,
  but provides the correct ip in a http header; or you want to mask
  source ip for privacy.

     &amp;lt;expr&amp;gt;    is a standard haproxy expression formed by a sample-fetch
               followed by some converters.

  example:

     http-request set-src hdr(x-forwarded-for)
     http-request set-src src,ipmask(24)

  when set-src is successful, the source port is set to 0.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  there is no limit to the number of http-request statements per instance.&lt;/p&gt;
&lt;p&gt;  it is important to know that http-request rules are processed very early in&lt;br&gt;  the http processing, just after “block” rules and before “reqdel” or “reqrep”&lt;br&gt;  rules. that way, headers added by “add-header”/“set-header” are visible by&lt;br&gt;  almost all further acl rules.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        acl nagios src 192.168.129.3&lt;br&gt;        acl local_net src 192.168.0.0/16&lt;br&gt;        acl auth_ok http_auth(l1)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http-request allow if nagios
http-request allow if local_net auth_ok
http-request auth realm gimme if local_net auth_ok
http-request deny
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;br&gt;        acl auth_ok http_auth_group(l1) g1&lt;br&gt;        http-request auth unless auth_ok&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        http-request set-header x-haproxy-current-date %t&lt;br&gt;        http-request set-header x-ssl                  %[ssl_fc]&lt;br&gt;        http-request set-header x-ssl-session_id       %[ssl_fc_session_id]&lt;br&gt;        http-request set-header x-ssl-client-verify    %[ssl_c_verify]&lt;br&gt;        http-request set-header x-ssl-client-dn        %{+q}[ssl_c_s_dn]&lt;br&gt;        http-request set-header x-ssl-client-cn        %{+q}[ssl_c_s_dn(cn)]&lt;br&gt;        http-request set-header x-ssl-issuer           %{+q}[ssl_c_i_dn]&lt;br&gt;        http-request set-header x-ssl-client-notbefore %{+q}[ssl_c_notbefore]&lt;br&gt;        http-request set-header x-ssl-client-notafter  %{+q}[ssl_c_notafter]&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;        acl key req.hdr(x-add-acl-key) -m found&lt;br&gt;        acl add path /addacl&lt;br&gt;        acl del path /delacl&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl myhost hdr(host) -f myhost.lst

http-request add-acl(myhost.lst) %[req.hdr(x-add-acl-key)] if key add
http-request del-acl(myhost.lst) %[req.hdr(x-add-acl-key)] if key del
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;br&gt;        acl value  req.hdr(x-value) -m found&lt;br&gt;        acl setmap path /setmap&lt;br&gt;        acl delmap path /delmap&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use_backend bk_appli if { hdr(host),map_str(map.lst) -m found }

http-request set-map(map.lst) %[src] %[req.hdr(x-value)] if setmap value
http-request del-map(map.lst) %[src]                     if delmap
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats http-request”, section 3.4 about userlists and section 7&lt;br&gt;             about acl usage.&lt;/p&gt;
&lt;p&gt;http-response { allow | deny | add-header &lt;name&gt; &lt;fmt&gt; | set-nice &lt;nice&gt; |&lt;br&gt;                capture &lt;sample&gt; id &lt;id&gt; | redirect &lt;rule&gt; |&lt;br&gt;                set-header &lt;name&gt; &lt;fmt&gt; | del-header &lt;name&gt; |&lt;br&gt;                replace-header &lt;name&gt; &lt;regex-match&gt; &lt;replace-fmt&gt; |&lt;br&gt;                replace-value &lt;name&gt; &lt;regex-match&gt; &lt;replace-fmt&gt; |&lt;br&gt;                set-log-level &lt;level&gt; | set-mark &lt;mark&gt; | set-tos &lt;tos&gt; |&lt;br&gt;                add-acl(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;                del-acl(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;                del-map(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; |&lt;br&gt;                set-map(&lt;file name=&quot;&quot;&gt;) &lt;key fmt=&quot;&quot;&gt; &lt;value fmt=&quot;&quot;&gt; |&lt;br&gt;                set-var(&lt;var-name&gt;) &lt;expr&gt; |&lt;br&gt;                lua &lt;function name=&quot;&quot;&gt;&lt;br&gt;              }&lt;br&gt;              [ { if | unless } &lt;condition&gt; ]&lt;br&gt;  access control for layer 7 responses&lt;/condition&gt;&lt;/function&gt;&lt;/expr&gt;&lt;/var-name&gt;&lt;/value&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/key&gt;&lt;/file&gt;&lt;/tos&gt;&lt;/mark&gt;&lt;/level&gt;&lt;/replace-fmt&gt;&lt;/regex-match&gt;&lt;/name&gt;&lt;/replace-fmt&gt;&lt;/regex-match&gt;&lt;/name&gt;&lt;/name&gt;&lt;/fmt&gt;&lt;/name&gt;&lt;/rule&gt;&lt;/id&gt;&lt;/sample&gt;&lt;/nice&gt;&lt;/fmt&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                                no    |    yes   |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  the http-response statement defines a set of rules which apply to layer 7&lt;br&gt;  processing. the rules are evaluated in their declaration order when they are&lt;br&gt;  met in a frontend, listen or backend section. any rule may optionally be&lt;br&gt;  followed by an acl-based condition, in which case it will only be evaluated&lt;br&gt;  if the condition is true. since these rules apply on responses, the backend&lt;br&gt;  rules are applied first, followed by the frontend’s rules.&lt;/p&gt;
&lt;p&gt;  the first keyword is the rule’s action. currently supported actions include :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- &amp;quot;allow&amp;quot; : this stops the evaluation of the rules and lets the response
  pass the check. no further &amp;quot;http-response&amp;quot; rules are evaluated for the
  current section.

- &amp;quot;deny&amp;quot; : this stops the evaluation of the rules and immediately rejects
  the response and emits an http 502 error. no further &amp;quot;http-response&amp;quot;
  rules are evaluated.

- &amp;quot;add-header&amp;quot; appends an http header field whose name is specified in
  &amp;lt;name&amp;gt; and whose value is defined by &amp;lt;fmt&amp;gt; which follows the log-format
  rules (see custom log format in section 8.2.4). this may be used to send
  a cookie to a client for example, or to pass some internal information.
  this rule is not final, so it is possible to add other similar rules.
  note that header addition is performed immediately, so one rule might
  reuse the resulting header from a previous rule.

- &amp;quot;set-header&amp;quot; does the same as &amp;quot;add-header&amp;quot; except that the header name
  is first removed if it existed. this is useful when passing security
  information to the server, where the header must not be manipulated by
  external users.

- &amp;quot;del-header&amp;quot; removes all http header fields whose name is specified in
  &amp;lt;name&amp;gt;.

- &amp;quot;replace-header&amp;quot; matches the regular expression in all occurrences of
  header field &amp;lt;name&amp;gt; according to &amp;lt;match-regex&amp;gt;, and replaces them with
  the &amp;lt;replace-fmt&amp;gt; argument. format characters are allowed in replace-fmt
  and work like in &amp;lt;fmt&amp;gt; arguments in &amp;quot;add-header&amp;quot;. the match is only
  case-sensitive. it is important to understand that this action only
  considers whole header lines, regardless of the number of values they
  may contain. this usage is suited to headers naturally containing commas
  in their value, such as set-cookie, expires and so on.

  example:

    http-response replace-header set-cookie (c=[^;]*);(.*) \1;ip=%bi;\2

  applied to:

    set-cookie: c=1; expires=tue, 14-jun-2016 01:40:45 gmt

  outputs:

    set-cookie: c=1;ip=192.168.1.20; expires=tue, 14-jun-2016 01:40:45 gmt

  assuming the backend ip is 192.168.1.20.

- &amp;quot;replace-value&amp;quot; works like &amp;quot;replace-header&amp;quot; except that it matches the
  regex against every comma-delimited value of the header field &amp;lt;name&amp;gt;
  instead of the entire header. this is suited for all headers which are
  allowed to carry more than one value. an example could be the accept
  header.

  example:

    http-response replace-value cache-control ^public$ private

  applied to:

    cache-control: max-age=3600, public

  outputs:

    cache-control: max-age=3600, private

- &amp;quot;set-nice&amp;quot; sets the &amp;quot;nice&amp;quot; factor of the current request being processed.
  it only has effect against the other requests being processed at the same
  time. the default value is 0, unless altered by the &amp;quot;nice&amp;quot; setting on the
  &amp;quot;bind&amp;quot; line. the accepted range is -1024..1024\. the higher the value, the
  nicest the request will be. lower values will make the request more
  important than other ones. this can be useful to improve the speed of
  some requests, or lower the priority of non-important requests. using
  this setting without prior experimentation can cause some major slowdown.

- &amp;quot;set-log-level&amp;quot; is used to change the log level of the current request
  when a certain condition is met. valid levels are the 8 syslog levels
  (see the &amp;quot;log&amp;quot; keyword) plus the special level &amp;quot;silent&amp;quot; which disables
  logging for this request. this rule is not final so the last matching
  rule wins. this rule can be useful to disable health checks coming from
  another equipment.

- &amp;quot;set-tos&amp;quot; is used to set the tos or dscp field value of packets sent to
  the client to the value passed in &amp;lt;tos&amp;gt; on platforms which support this.
  this value represents the whole 8 bits of the ip tos field, and can be
  expressed both in decimal or hexadecimal format (prefixed by &amp;quot;0x&amp;quot;). note
  that only the 6 higher bits are used in dscp or tos, and the two lower
  bits are always 0\. this can be used to adjust some routing behaviour on
  border routers based on some information from the request. see rfc 2474,
  2597, 3260 and 4594 for more information.

- &amp;quot;set-mark&amp;quot; is used to set the netfilter mark on all packets sent to the
  client to the value passed in &amp;lt;mark&amp;gt; on platforms which support it. this
  value is an unsigned 32 bit value which can be matched by netfilter and
  by the routing table. it can be expressed both in decimal or hexadecimal
  format (prefixed by &amp;quot;0x&amp;quot;). this can be useful to force certain packets to
  take a different route (for example a cheaper network path for bulk
  downloads). this works on linux kernels 2.6.32 and above and requires
  admin privileges.

- &amp;quot;add-acl&amp;quot; is used to add a new entry into an acl. the acl must be loaded
  from a file (even a dummy empty file). the file name of the acl to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the new entry. it
  performs a lookup in the acl before insertion, to avoid duplicated (or
  more) values. this lookup is done by a linear search and can be expensive
  with large lists! it is the equivalent of the &amp;quot;add acl&amp;quot; command from the
  stats socket, but can be triggered by an http response.

- &amp;quot;del-acl&amp;quot; is used to delete an entry from an acl. the acl must be loaded
  from a file (even a dummy empty file). the file name of the acl to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the entry to delete.
  it is the equivalent of the &amp;quot;del acl&amp;quot; command from the stats socket, but
  can be triggered by an http response.

- &amp;quot;del-map&amp;quot; is used to delete an entry from a map. the map must be loaded
  from a file (even a dummy empty file). the file name of the map to be
  updated is passed between parentheses. it takes one argument: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, to collect content of the entry to delete.
  it takes one argument: &amp;quot;file name&amp;quot; it is the equivalent of the &amp;quot;del map&amp;quot;
  command from the stats socket, but can be triggered by an http response.

- &amp;quot;set-map&amp;quot; is used to add a new entry into a map. the map must be loaded
  from a file (even a dummy empty file). the file name of the map to be
  updated is passed between parentheses. it takes 2 arguments: &amp;lt;key fmt&amp;gt;,
  which follows log-format rules, used to collect map key, and &amp;lt;value fmt&amp;gt;,
  which follows log-format rules, used to collect content for the new entry.
  it performs a lookup in the map before insertion, to avoid duplicated (or
  more) values. this lookup is done by a linear search and can be expensive
  with large lists! it is the equivalent of the &amp;quot;set map&amp;quot; command from the
  stats socket, but can be triggered by an http response.

- &amp;quot;lua&amp;quot; is used to run a lua function if the action is executed. the single
  parameter is the name of the function to run. the prototype of the
  function is documented in the api documentation.

- capture &amp;lt;sample&amp;gt; id &amp;lt;id&amp;gt; :
  captures sample expression &amp;lt;sample&amp;gt; from the response buffer, and converts
  it to a string. the resulting string is stored into the next request
  &amp;quot;capture&amp;quot; slot, so it will possibly appear next to some captured http
  headers. it will then automatically appear in the logs, and it will be
  possible to extract it using sample fetch rules to feed it into headers or
  anything. please check section 7.3 (fetching samples) and &amp;quot;capture
  response header&amp;quot; for more information.

  the keyword &amp;quot;id&amp;quot; is the id of the capture slot which is used for storing
  the string. the capture slot must be defined in an associated frontend.
  this is useful to run captures in backends. the slot id can be declared by
  a previous directive &amp;quot;http-response capture&amp;quot; or with the &amp;quot;declare capture&amp;quot;
  keyword.

- &amp;quot;redirect&amp;quot; : this performs an http redirection based on a redirect rule.
  this supports a format string similarly to &amp;quot;http-request redirect&amp;quot; rules,
  with the exception that only the &amp;quot;location&amp;quot; type of redirect is possible
  on the response. see the &amp;quot;redirect&amp;quot; keyword for the rule&amp;apos;s syntax. when
  a redirect rule is applied during a response, connections to the server
  are closed so that no data can be forwarded from the server to the client.

- set-var(&amp;lt;var-name&amp;gt;) expr:
  is used to set the contents of a variable. the variable is declared
  inline.

    &amp;lt;var-name&amp;gt; the name of the variable starts by an indication about its
               scope. the allowed scopes are:
                 &amp;quot;sess&amp;quot; : the variable is shared with all the session,
                 &amp;quot;txn&amp;quot;  : the variable is shared with all the transaction
                          (request and response)
                 &amp;quot;req&amp;quot;  : the variable is shared only during the request
                          processing
                 &amp;quot;res&amp;quot;  : the variable is shared only during the response
                          processing.
               this prefix is followed by a name. the separator is a &amp;apos;.&amp;apos;.
               the name may only contain characters &amp;apos;a-z&amp;apos;, &amp;apos;a-z&amp;apos;, &amp;apos;0-9&amp;apos;,
               and &amp;apos;_&amp;apos;.

     &amp;lt;expr&amp;gt;    is a standard haproxy expression formed by a sample-fetch
               followed by some converters.

  example:

     http-response set-var(sess.last_redir) res.hdr(location)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  there is no limit to the number of http-response statements per instance.&lt;/p&gt;
&lt;p&gt;  it is important to know that http-response rules are processed very early in&lt;br&gt;  the http processing, before “reqdel” or “reqrep” rules. that way, headers&lt;br&gt;  added by “add-header”/“set-header” are visible by almost all further acl&lt;br&gt;  rules.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;         acl key_acl res.hdr(x-acl-key) -m found&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl myhost hdr(host) -f myhost.lst

http-response add-acl(myhost.lst) %[res.hdr(x-acl-key)] if key_acl
http-response del-acl(myhost.lst) %[res.hdr(x-acl-key)] if key_acl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;br&gt;         acl value  res.hdr(x-value) -m found&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use_backend bk_appli if { hdr(host),map_str(map.lst) -m found }

http-response set-map(map.lst) %[src] %[res.hdr(x-value)] if value
http-response del-map(map.lst) %[src]                     if ! value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “http-request”, section 3.4 about userlists and section 7 about&lt;br&gt;             acl usage.&lt;/p&gt;
&lt;p&gt;http-send-name-header [&lt;header&gt;]&lt;br&gt;  add the server name to a request. use the header string given by &lt;header&gt;&lt;/header&gt;&lt;/header&gt;&lt;/p&gt;
&lt;p&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               yes    |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  arguments :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;header&amp;gt;  the header string to use to send the server name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the “http-send-name-header” statement causes the name of the target&lt;br&gt;  server to be added to the headers of an http request.  the name&lt;br&gt;  is added with the header string proved.&lt;/p&gt;
&lt;p&gt;  see also : “server”&lt;/p&gt;
&lt;p&gt;id &lt;value&gt;&lt;br&gt;  set a persistent id to a proxy.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  set a persistent id for the proxy. this id must be unique and positive.&lt;br&gt;  an unused id will automatically be assigned if unset. the first assigned&lt;br&gt;  value will be 1. this id is currently only returned in statistics.&lt;/p&gt;
&lt;p&gt;ignore-persist { if | unless } &lt;condition&gt;&lt;br&gt;  declare a condition to ignore persistence&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   yes&lt;/condition&gt;&lt;/p&gt;
&lt;p&gt;  by default, when cookie persistence is enabled, every requests containing&lt;br&gt;  the cookie are unconditionally persistent (assuming the target server is up&lt;br&gt;  and running).&lt;/p&gt;
&lt;p&gt;  the “ignore-persist” statement allows one to declare various acl-based&lt;br&gt;  conditions which, when met, will cause a request to ignore persistence.&lt;br&gt;  this is sometimes useful to load balance requests for static files, which&lt;br&gt;  often don’t require persistence. this can also be used to fully disable&lt;br&gt;  persistence for a specific user-agent (for example, some web crawler bots).&lt;/p&gt;
&lt;p&gt;  combined with “appsession”, it can also help reduce haproxy memory usage, as&lt;br&gt;  the appsession table won’t grow if persistence is ignored.&lt;/p&gt;
&lt;p&gt;  the persistence is ignored when an “if” condition is met, or unless an&lt;br&gt;  “unless” condition is met.&lt;/p&gt;
&lt;p&gt;  see also : “force-persist”, “cookie”, and section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;log global&lt;br&gt;log &lt;address&gt; [len &lt;length&gt;] &lt;facility&gt; [&lt;level&gt; [&lt;minlevel&gt;]]&lt;br&gt;no log&lt;br&gt;  enable per-instance logging of events and traffic.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/minlevel&gt;&lt;/level&gt;&lt;/facility&gt;&lt;/length&gt;&lt;/address&gt;&lt;/p&gt;
&lt;p&gt;  prefix :&lt;br&gt;    no         should be used when the logger list must be flushed. for example,&lt;br&gt;               if you don’t want to inherit from the default logger list. this&lt;br&gt;               prefix does not allow arguments.&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    global     should be used when the instance’s logging parameters are the&lt;br&gt;               same as the global ones. this is the most common usage. “global”&lt;br&gt;               replaces &lt;address&gt;, &lt;facility&gt; and &lt;level&gt; with those of the log&lt;br&gt;               entries found in the “global” section. only one “log global”&lt;br&gt;               statement may be used per instance, and this form takes no other&lt;br&gt;               parameter.&lt;/level&gt;&lt;/facility&gt;&lt;/address&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;address&amp;gt;  indicates where to send the logs. it takes the same format as
           for the &amp;quot;global&amp;quot; section&amp;apos;s logs, and can be one of :

           - an ipv4 address optionally followed by a colon (&amp;apos;:&amp;apos;) and a udp
             port. if no port is specified, 514 is used by default (the
             standard syslog port).

           - an ipv6 address followed by a colon (&amp;apos;:&amp;apos;) and optionally a udp
             port. if no port is specified, 514 is used by default (the
             standard syslog port).

           - a filesystem path to a unix domain socket, keeping in mind
             considerations for chroot (be sure the path is accessible
             inside the chroot) and uid/gid (be sure the path is
             appropriately writeable).

          you may want to reference some environment variables in the
          address parameter, see section 2.3 about environment variables.

&amp;lt;length&amp;gt;   is an optional maximum line length. log lines larger than this
           value will be truncated before being sent. the reason is that
           syslog servers act differently on log line length. all servers
           support the default value of 1024, but some servers simply drop
           larger lines while others do log them. if a server supports long
           lines, it may make sense to set this value here in order to avoid
           truncating long lines. similarly, if a server drops long lines,
           it is preferable to truncate them before sending them. accepted
           values are 80 to 65535 inclusive. the default value of 1024 is
           generally fine for all standard usages. some specific cases of
           long captures or json-formated logs may require larger values.

&amp;lt;facility&amp;gt; must be one of the 24 standard syslog facilities :

             kern   user   mail   daemon auth   syslog lpr    news
             uucp   cron   auth2  ftp    ntp    audit  alert  cron2
             local0 local1 local2 local3 local4 local5 local6 local7

&amp;lt;level&amp;gt;    is optional and can be specified to filter outgoing messages. by
           default, all messages are sent. if a level is specified, only
           messages with a severity at least as important as this level
           will be sent. an optional minimum level can be specified. if it
           is set, logs emitted with a more severe level than this one will
           be capped to this level. this is used to avoid sending &amp;quot;emerg&amp;quot;
           messages on all terminals on some default syslog configurations.
           eight levels are known :

             emerg  alert  crit   err    warning notice info  debug
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to keep in mind that it is the frontend which decides what to&lt;br&gt;  log from a connection, and that in case of content switching, the log entries&lt;br&gt;  from the backend will be ignored. connections are logged at level “info”.&lt;/p&gt;
&lt;p&gt;  however, backend log declaration define how and where servers status changes&lt;br&gt;  will be logged. level “notice” will be used to indicate a server going up,&lt;br&gt;  “warning” will be used for termination signals and definitive service&lt;br&gt;  termination, and “alert” will be used for when a server goes down.&lt;/p&gt;
&lt;p&gt;  note : according to rfc3164, messages are truncated to 1024 bytes before&lt;br&gt;         being emitted.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;    log global&lt;br&gt;    log 127.0.0.1:514 local0 notice         # only send important events&lt;br&gt;    log 127.0.0.1:514 local0 notice notice  # same but limit output level&lt;br&gt;    log “${local_syslog}:514” local0 notice   # send to local server&lt;/p&gt;
&lt;p&gt;log-format &lt;string&gt;&lt;br&gt;  specifies the log format string to use for traffic logs&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |    no&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  this directive specifies the log format string that will be used for all logs&lt;br&gt;  resulting from traffic passing through the frontend using this line. if the&lt;br&gt;  directive is used in a defaults section, all subsequent frontends will use&lt;br&gt;  the same log format. please see section 8.2.4 which covers the log format&lt;br&gt;  string in depth.&lt;/p&gt;
&lt;p&gt;log-tag &lt;string&gt;&lt;br&gt;  specifies the log tag to use for all outgoing logs&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  sets the tag field in the syslog header to this string. it defaults to the&lt;br&gt;  log-tag set in the global section, otherwise the program name as launched&lt;br&gt;  from the command line, which usually is “haproxy”. sometimes it can be useful&lt;br&gt;  to differentiate between multiple processes running on the same host, or to&lt;br&gt;  differentiate customer instances running in the same process. in the backend,&lt;br&gt;  logs about servers up/down will use this tag. as a hint, it can be convenient&lt;br&gt;  to set a log-tag related to a hosted customer in a defaults section then put&lt;br&gt;  all the frontends and backends for that customer, then start another customer&lt;br&gt;  in a new defaults section. see also the global “log-tag” directive.&lt;/p&gt;
&lt;p&gt;max-keep-alive-queue &lt;value&gt;&lt;br&gt;  set the maximum server queue size for maintaining keep-alive connections&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |     no   |   yes  |   yes&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  http keep-alive tries to reuse the same server connection whenever possible,&lt;br&gt;  but sometimes it can be counter-productive, for example if a server has a lot&lt;br&gt;  of connections while other ones are idle. this is especially true for static&lt;br&gt;  servers.&lt;/p&gt;
&lt;p&gt;  the purpose of this setting is to set a threshold on the number of queued&lt;br&gt;  connections at which haproxy stops trying to reuse the same server and prefers&lt;br&gt;  to find another one. the default value, -1, means there is no limit. a value&lt;br&gt;  of zero means that keep-alive requests will never be queued. for very close&lt;br&gt;  servers which can be reached with a low latency and which are not sensible to&lt;br&gt;  breaking keep-alive, a low value is recommended (eg: local static server can&lt;br&gt;  use a value of 10 or less). for remote servers suffering from a high latency,&lt;br&gt;  higher values might be needed to cover for the latency and/or the cost of&lt;br&gt;  picking a different server.&lt;/p&gt;
&lt;p&gt;  note that this has no impact on responses which are maintained to the same&lt;br&gt;  server consecutively to a 401 response. they will still go to the same server&lt;br&gt;  even if they have to be queued.&lt;/p&gt;
&lt;p&gt;  see also : “option http-server-close”, “option prefer-last-server”, server&lt;br&gt;             “maxconn” and cookie persistence.&lt;/p&gt;
&lt;p&gt;maxconn &lt;conns&gt;&lt;br&gt;  fix the maximum number of concurrent connections on a frontend&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;conns&gt;   is the maximum number of concurrent connections the frontend will&lt;br&gt;              accept to serve. excess connections will be queued by the system&lt;br&gt;              in the socket’s listen queue and will be served once a connection&lt;br&gt;              closes.&lt;/conns&gt;&lt;/conns&gt;&lt;/p&gt;
&lt;p&gt;  if the system supports it, it can be useful on big sites to raise this limit&lt;br&gt;  very high so that haproxy manages connection queues, instead of leaving the&lt;br&gt;  clients with unanswered connection attempts. this value should not exceed the&lt;br&gt;  global maxconn. also, keep in mind that a connection contains two buffers&lt;br&gt;  of 8kb each, as well as some other data resulting in about 17 kb of ram being&lt;br&gt;  consumed per established connection. that means that a medium system equipped&lt;br&gt;  with 1gb of ram can withstand around 40000-50000 concurrent connections if&lt;br&gt;  properly tuned.&lt;/p&gt;
&lt;p&gt;  also, when &lt;conns&gt; is set to large values, it is possible that the servers&lt;br&gt;  are not sized to accept such loads, and for this reason it is generally wise&lt;br&gt;  to assign them some reasonable connection limits.&lt;/conns&gt;&lt;/p&gt;
&lt;p&gt;  by default, this value is set to 2000.&lt;/p&gt;
&lt;p&gt;  see also : “server”, global section’s “maxconn”, “fullconn”&lt;/p&gt;
&lt;p&gt;mode { tcp|http|health }&lt;br&gt;  set the running mode or protocol of the instance&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    tcp       the instance will work in pure tcp mode. a full-duplex connection&lt;br&gt;              will be established between clients and servers, and no layer 7&lt;br&gt;              examination will be performed. this is the default mode. it&lt;br&gt;              should be used for ssl, ssh, smtp, …&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http      the instance will work in http mode. the client request will be
          analyzed in depth before connecting to any server. any request
          which is not rfc-compliant will be rejected. layer 7 filtering,
          processing and switching will be possible. this is the mode which
          brings haproxy most of its value.

health    the instance will work in &amp;quot;health&amp;quot; mode. it will just reply &amp;quot;ok&amp;quot;
          to incoming connections and close the connection. alternatively,
          if the &amp;quot;httpchk&amp;quot; option is set, &amp;quot;http/1.0 200 ok&amp;quot; will be sent
          instead. nothing will be logged in either case. this mode is used
          to reply to external components health checks. this mode is
          deprecated and should not be used anymore as it is possible to do
          the same and even better by combining tcp or http modes with the
          &amp;quot;monitor&amp;quot; keyword.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when doing content switching, it is mandatory that the frontend and the&lt;br&gt;  backend are in the same mode (generally http), otherwise the configuration&lt;br&gt;  will be refused.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;     defaults http_instances&lt;br&gt;         mode http&lt;/p&gt;
&lt;p&gt;  see also : “monitor”, “monitor-net”&lt;/p&gt;
&lt;p&gt;monitor fail { if | unless } &lt;condition&gt;&lt;br&gt;  add a condition to report a failure to a monitor http request.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    if &lt;cond&gt;     the monitor request will fail if the condition is satisfied,&lt;br&gt;                  and will succeed otherwise. the condition should describe a&lt;br&gt;                  combined test which must induce a failure if all conditions&lt;br&gt;                  are met, for instance a low number of servers both in a&lt;br&gt;                  backend and its backup.&lt;/cond&gt;&lt;/condition&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unless &amp;lt;cond&amp;gt; the monitor request will succeed only if the condition is
              satisfied, and will fail otherwise. such a condition may be
              based on a test on the presence of a minimum number of active
              servers in a list of backends.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  this statement adds a condition which can force the response to a monitor&lt;br&gt;  request to report a failure. by default, when an external component queries&lt;br&gt;  the uri dedicated to monitoring, a 200 response is returned. when one of the&lt;br&gt;  conditions above is met, haproxy will return 503 instead of 200. this is&lt;br&gt;  very useful to report a site failure to an external component which may base&lt;br&gt;  routing advertisements between multiple sites on the availability reported by&lt;br&gt;  haproxy. in this case, one would rely on an acl involving the “nbsrv”&lt;br&gt;  criterion. note that “monitor fail” only works in http mode. both status&lt;br&gt;  messages may be tweaked using “errorfile” or “errorloc” if needed.&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;     frontend www&lt;br&gt;        mode http&lt;br&gt;        acl site_dead nbsrv(dynamic) lt 2&lt;br&gt;        acl site_dead nbsrv(static)  lt 2&lt;br&gt;        monitor-uri   /site_alive&lt;br&gt;        monitor fail  if site_dead&lt;/p&gt;
&lt;p&gt;  see also : “monitor-net”, “monitor-uri”, “errorfile”, “errorloc”&lt;/p&gt;
&lt;p&gt;monitor-net &lt;source&gt;&lt;br&gt;  declare a source network which is limited to monitor requests&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;source&gt;  is the source ipv4 address or network which will only be able to&lt;br&gt;              get monitor responses to any request. it can be either an ipv4&lt;br&gt;              address, a host name, or an address followed by a slash (‘/‘)&lt;br&gt;              followed by a mask.&lt;/p&gt;
&lt;p&gt;  in tcp mode, any connection coming from a source matching &lt;source&gt; will cause&lt;br&gt;  the connection to be immediately closed without any log. this allows another&lt;br&gt;  equipment to probe the port and verify that it is still listening, without&lt;br&gt;  forwarding the connection to a remote server.&lt;/p&gt;
&lt;p&gt;  in http mode, a connection coming from a source matching &lt;source&gt; will be&lt;br&gt;  accepted, the following response will be sent without waiting for a request,&lt;br&gt;  then the connection will be closed : “http/1.0 200 ok”. this is normally&lt;br&gt;  enough for any front-end http probe to detect that the service is up and&lt;br&gt;  running without forwarding the request to a backend server. note that this&lt;br&gt;  response is sent in raw format, without any transformation. this is important&lt;br&gt;  as it means that it will not be ssl-encrypted on ssl listeners.&lt;/p&gt;
&lt;p&gt;  monitor requests are processed very early, just after tcp-request connection&lt;br&gt;  acls which are the only ones able to block them. these connections are short&lt;br&gt;  lived and never wait for any data from the client. they cannot be logged, and&lt;br&gt;  it is the intended purpose. they are only used to report haproxy’s health to&lt;br&gt;  an upper component, nothing more. please note that “monitor fail” rules do&lt;br&gt;  not apply to connections intercepted by “monitor-net”.&lt;/p&gt;
&lt;p&gt;  last, please note that only one “monitor-net” statement can be specified in&lt;br&gt;  a frontend. if more than one is found, only the last one will be considered.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# addresses .252 and .253 are just probing us.
frontend www
    monitor-net 192.168.0.252/31
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “monitor fail”, “monitor-uri”&lt;/p&gt;
&lt;p&gt;monitor-uri &lt;uri&gt;&lt;br&gt;  intercept a uri used by external components’ monitor requests&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;uri&gt;     is the exact uri which we want to intercept to return haproxy’s&lt;br&gt;              health status instead of forwarding the request.&lt;/uri&gt;&lt;/uri&gt;&lt;/p&gt;
&lt;p&gt;  when an http request referencing &lt;uri&gt; will be received on a frontend,&lt;br&gt;  haproxy will not forward it nor log it, but instead will return either&lt;br&gt;  “http/1.0 200 ok” or “http/1.0 503 service unavailable”, depending on failure&lt;br&gt;  conditions defined with “monitor fail”. this is normally enough for any&lt;br&gt;  front-end http probe to detect that the service is up and running without&lt;br&gt;  forwarding the request to a backend server. note that the http method, the&lt;br&gt;  version and all headers are ignored, but the request must at least be valid&lt;br&gt;  at the http level. this keyword may only be used with an http-mode frontend.&lt;/uri&gt;&lt;/p&gt;
&lt;p&gt;  monitor requests are processed very early. it is not possible to block nor&lt;br&gt;  divert them using acls. they cannot be logged either, and it is the intended&lt;br&gt;  purpose. they are only used to report haproxy’s health to an upper component,&lt;br&gt;  nothing more. however, it is possible to add any number of conditions using&lt;br&gt;  “monitor fail” and acls so that the result can be adjusted to whatever check&lt;br&gt;  can be imagined (most often the number of available servers in a backend).&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# use /haproxy_test to report haproxy&amp;apos;s status
frontend www
    mode http
    monitor-uri /haproxy_test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “monitor fail”, “monitor-net”&lt;/p&gt;
&lt;p&gt;option abortonclose&lt;br&gt;no option abortonclose&lt;br&gt;  enable or disable early dropping of aborted requests pending in queues.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |     no   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  in presence of very high loads, the servers will take some time to respond.&lt;br&gt;  the per-instance connection queue will inflate, and the response time will&lt;br&gt;  increase respective to the size of the queue times the average per-session&lt;br&gt;  response time. when clients will wait for more than a few seconds, they will&lt;br&gt;  often hit the “stop” button on their browser, leaving a useless request in&lt;br&gt;  the queue, and slowing down other users, and the servers as well, because the&lt;br&gt;  request will eventually be served, then aborted at the first error&lt;br&gt;  encountered while delivering the response.&lt;/p&gt;
&lt;p&gt;  as there is no way to distinguish between a full stop and a simple output&lt;br&gt;  close on the client side, http agents should be conservative and consider&lt;br&gt;  that the client might only have closed its output channel while waiting for&lt;br&gt;  the response. however, this introduces risks of congestion when lots of users&lt;br&gt;  do the same, and is completely useless nowadays because probably no client at&lt;br&gt;  all will close the session while waiting for the response. some http agents&lt;br&gt;  support this behaviour (squid, apache, haproxy), and others do not (tux, most&lt;br&gt;  hardware-based load balancers). so the probability for a closed input channel&lt;br&gt;  to represent a user hitting the “stop” button is close to 100%, and the risk&lt;br&gt;  of being the single component to break rare but valid traffic is extremely&lt;br&gt;  low, which adds to the temptation to be able to abort a session early while&lt;br&gt;  still not served and not pollute the servers.&lt;/p&gt;
&lt;p&gt;  in haproxy, the user can choose the desired behaviour using the option&lt;br&gt;  “abortonclose”. by default (without the option) the behaviour is http&lt;br&gt;  compliant and aborted requests will be served. but when the option is&lt;br&gt;  specified, a session with an incoming channel closed will be aborted while&lt;br&gt;  it is still possible, either pending in the queue for a connection slot, or&lt;br&gt;  during the connection establishment if the server has not yet acknowledged&lt;br&gt;  the connection request. this considerably reduces the queue size and the load&lt;br&gt;  on saturated servers when users are tempted to click on stop, which in turn&lt;br&gt;  reduces the response time for other users.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “timeout queue” and server’s “maxconn” and “maxqueue” parameters&lt;/p&gt;
&lt;p&gt;option accept-invalid-http-request&lt;br&gt;no option accept-invalid-http-request&lt;br&gt;  enable or disable relaxing of http request parsing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, haproxy complies with rfc7230 in terms of message parsing. this&lt;br&gt;  means that invalid characters in header names are not permitted and cause an&lt;br&gt;  error to be returned to the client. this is the desired behaviour as such&lt;br&gt;  forbidden characters are essentially used to build attacks exploiting server&lt;br&gt;  weaknesses, and bypass security filtering. sometimes, a buggy browser or&lt;br&gt;  server will emit invalid header names for whatever reason (configuration,&lt;br&gt;  implementation) and the issue will not be immediately fixed. in such a case,&lt;br&gt;  it is possible to relax haproxy’s header name parser to accept any character&lt;br&gt;  even if that does not make sense, by specifying this option. similarly, the&lt;br&gt;  list of characters allowed to appear in a uri is well defined by rfc3986, and&lt;br&gt;  chars 0-31, 32 (space), 34 (‘“‘), 60 (‘&amp;lt;’), 62 (‘&amp;gt;’), 92 (‘\’), 94 (‘^’), 96&lt;br&gt;  (‘`’), 123 (‘{‘), 124 (‘|’), 125 (‘}’), 127 (delete) and anything above are&lt;br&gt;  not allowed at all. haproxy always blocks a number of them (0..32, 127). the&lt;br&gt;  remaining ones are blocked by default unless this option is enabled. this&lt;br&gt;  option also relaxes the test on the http version, it allows http/0.9 requests&lt;br&gt;  to pass through (no version specified) and multiple digits for both the major&lt;br&gt;  and the minor version.&lt;/p&gt;
&lt;p&gt;  this option should never be enabled by default as it hides application bugs&lt;br&gt;  and open security breaches. it should only be deployed after a problem has&lt;br&gt;  been confirmed.&lt;/p&gt;
&lt;p&gt;  when this option is enabled, erroneous header names will still be accepted in&lt;br&gt;  requests, but the complete request will be captured in order to permit later&lt;br&gt;  analysis using the “show errors” request on the unix stats socket. similarly,&lt;br&gt;  requests containing invalid chars in the uri part will be logged. doing this&lt;br&gt;  also helps confirming that the issue has been solved.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option accept-invalid-http-response” and “show errors” on the&lt;br&gt;             stats socket.&lt;/p&gt;
&lt;p&gt;option accept-invalid-http-response&lt;br&gt;no option accept-invalid-http-response&lt;br&gt;  enable or disable relaxing of http response parsing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |     no   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, haproxy complies with rfc7230 in terms of message parsing. this&lt;br&gt;  means that invalid characters in header names are not permitted and cause an&lt;br&gt;  error to be returned to the client. this is the desired behaviour as such&lt;br&gt;  forbidden characters are essentially used to build attacks exploiting server&lt;br&gt;  weaknesses, and bypass security filtering. sometimes, a buggy browser or&lt;br&gt;  server will emit invalid header names for whatever reason (configuration,&lt;br&gt;  implementation) and the issue will not be immediately fixed. in such a case,&lt;br&gt;  it is possible to relax haproxy’s header name parser to accept any character&lt;br&gt;  even if that does not make sense, by specifying this option. this option also&lt;br&gt;  relaxes the test on the http version format, it allows multiple digits for&lt;br&gt;  both the major and the minor version.&lt;/p&gt;
&lt;p&gt;  this option should never be enabled by default as it hides application bugs&lt;br&gt;  and open security breaches. it should only be deployed after a problem has&lt;br&gt;  been confirmed.&lt;/p&gt;
&lt;p&gt;  when this option is enabled, erroneous header names will still be accepted in&lt;br&gt;  responses, but the complete response will be captured in order to permit&lt;br&gt;  later analysis using the “show errors” request on the unix stats socket.&lt;br&gt;  doing this also helps confirming that the issue has been solved.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option accept-invalid-http-request” and “show errors” on the&lt;br&gt;             stats socket.&lt;/p&gt;
&lt;p&gt;option allbackups&lt;br&gt;no option allbackups&lt;br&gt;  use either all backup servers at a time or only the first one&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |     no   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, the first operational backup server gets all traffic when normal&lt;br&gt;  servers are all down. sometimes, it may be preferred to use multiple backups&lt;br&gt;  at once, because one will not be enough. when “option allbackups” is enabled,&lt;br&gt;  the load balancing will be performed among all backup servers when all normal&lt;br&gt;  ones are unavailable. the same load balancing algorithm will be used and the&lt;br&gt;  servers’ weights will be respected. thus, there will not be any priority&lt;br&gt;  order between the backup servers anymore.&lt;/p&gt;
&lt;p&gt;  this option is mostly used with static server farms dedicated to return a&lt;br&gt;  “sorry” page when an application is completely offline.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;option checkcache&lt;br&gt;no option checkcache&lt;br&gt;  analyze all server responses and block responses with cacheable cookies&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |     no   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  some high-level frameworks set application cookies everywhere and do not&lt;br&gt;  always let enough control to the developer to manage how the responses should&lt;br&gt;  be cached. when a session cookie is returned on a cacheable object, there is a&lt;br&gt;  high risk of session crossing or stealing between users traversing the same&lt;br&gt;  caches. in some situations, it is better to block the response than to let&lt;br&gt;  some sensitive session information go in the wild.&lt;/p&gt;
&lt;p&gt;  the option “checkcache” enables deep inspection of all server responses for&lt;br&gt;  strict compliance with http specification in terms of cacheability. it&lt;br&gt;  carefully checks “cache-control”, “pragma” and “set-cookie” headers in server&lt;br&gt;  response to check if there’s a risk of caching a cookie on a client-side&lt;br&gt;  proxy. when this option is enabled, the only responses which can be delivered&lt;br&gt;  to the client are :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- all those without &amp;quot;set-cookie&amp;quot; header ;
- all those with a return code other than 200, 203, 206, 300, 301, 410,
  provided that the server has not set a &amp;quot;cache-control: public&amp;quot; header ;
- all those that come from a post request, provided that the server has not
  set a &amp;apos;cache-control: public&amp;apos; header ;
- those with a &amp;apos;pragma: no-cache&amp;apos; header
- those with a &amp;apos;cache-control: private&amp;apos; header
- those with a &amp;apos;cache-control: no-store&amp;apos; header
- those with a &amp;apos;cache-control: max-age=0&amp;apos; header
- those with a &amp;apos;cache-control: s-maxage=0&amp;apos; header
- those with a &amp;apos;cache-control: no-cache&amp;apos; header
- those with a &amp;apos;cache-control: no-cache=&amp;quot;set-cookie&amp;quot;&amp;apos; header
- those with a &amp;apos;cache-control: no-cache=&amp;quot;set-cookie,&amp;apos; header
  (allowing other fields after set-cookie)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  if a response doesn’t respect these requirements, then it will be blocked&lt;br&gt;  just as if it was from an “rspdeny” filter, with an “http 502 bad gateway”.&lt;br&gt;  the session state shows “ph–” meaning that the proxy blocked the response&lt;br&gt;  during headers processing. additionally, an alert will be sent in the logs so&lt;br&gt;  that admins are informed that there’s something to be fixed.&lt;/p&gt;
&lt;p&gt;  due to the high impact on the application, the application should be tested&lt;br&gt;  in depth with the option enabled before going to production. it is also a&lt;br&gt;  good practice to always activate it during tests, even if it is not used in&lt;br&gt;  production, as it will report potentially dangerous application behaviours.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;option clitcpka&lt;br&gt;no option clitcpka&lt;br&gt;  enable or disable the sending of tcp keepalive packets on the client side&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when there is a firewall or any session-aware component between a client and&lt;br&gt;  a server, and when the protocol involves very long sessions with long idle&lt;br&gt;  periods (eg: remote desktops), there is a risk that one of the intermediate&lt;br&gt;  components decides to expire a session which has remained idle for too long.&lt;/p&gt;
&lt;p&gt;  enabling socket-level tcp keep-alives makes the system regularly send packets&lt;br&gt;  to the other end of the connection, leaving it active. the delay between&lt;br&gt;  keep-alive probes is controlled by the system only and depends both on the&lt;br&gt;  operating system and its tuning parameters.&lt;/p&gt;
&lt;p&gt;  it is important to understand that keep-alive packets are neither emitted nor&lt;br&gt;  received at the application level. it is only the network stacks which sees&lt;br&gt;  them. for this reason, even if one side of the proxy already uses keep-alives&lt;br&gt;  to maintain its connection alive, those keep-alive packets will not be&lt;br&gt;  forwarded to the other side of the proxy.&lt;/p&gt;
&lt;p&gt;  please note that this has nothing to do with http keep-alive.&lt;/p&gt;
&lt;p&gt;  using option “clitcpka” enables the emission of tcp keep-alive probes on the&lt;br&gt;  client side of a connection, which should help when session expirations are&lt;br&gt;  noticed between haproxy and a client.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option srvtcpka”, “option tcpka”&lt;/p&gt;
&lt;p&gt;option contstats&lt;br&gt;  enable continuous traffic statistics updates&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, counters used for statistics calculation are incremented&lt;br&gt;  only when a session finishes. it works quite well when serving small&lt;br&gt;  objects, but with big ones (for example large images or archives) or&lt;br&gt;  with a/v streaming, a graph generated from haproxy counters looks like&lt;br&gt;  a hedgehog. with this option enabled counters get incremented continuously,&lt;br&gt;  during a whole session. recounting touches a hotpath directly so&lt;br&gt;  it is not enabled by default, as it has small performance impact (~0.5%).&lt;/p&gt;
&lt;p&gt;option dontlog-normal&lt;br&gt;no option dontlog-normal&lt;br&gt;  enable or disable logging of normal, successful connections&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  there are large sites dealing with several thousand connections per second&lt;br&gt;  and for which logging is a major pain. some of them are even forced to turn&lt;br&gt;  logs off and cannot debug production issues. setting this option ensures that&lt;br&gt;  normal connections, those which experience no error, no timeout, no retry nor&lt;br&gt;  redispatch, will not be logged. this leaves disk space for anomalies. in http&lt;br&gt;  mode, the response status code is checked and return codes 5xx will still be&lt;br&gt;  logged.&lt;/p&gt;
&lt;p&gt;  it is strongly discouraged to use this option as most of the time, the key to&lt;br&gt;  complex issues is in the normal logs which will not be logged here. if you&lt;br&gt;  need to separate logs, see the “log-separate-errors” option instead.&lt;/p&gt;
&lt;p&gt;  see also : “log”, “dontlognull”, “log-separate-errors” and section 8 about&lt;br&gt;             logging.&lt;/p&gt;
&lt;p&gt;option dontlognull&lt;br&gt;no option dontlognull&lt;br&gt;  enable or disable logging of null connections&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  in certain environments, there are components which will regularly connect to&lt;br&gt;  various systems to ensure that they are still alive. it can be the case from&lt;br&gt;  another load balancer as well as from monitoring systems. by default, even a&lt;br&gt;  simple port probe or scan will produce a log. if those connections pollute&lt;br&gt;  the logs too much, it is possible to enable option “dontlognull” to indicate&lt;br&gt;  that a connection on which no data has been transferred will not be logged,&lt;br&gt;  which typically corresponds to those probes. note that errors will still be&lt;br&gt;  returned to the client and accounted for in the stats. if this is not what is&lt;br&gt;  desired, option http-ignore-probes can be used instead.&lt;/p&gt;
&lt;p&gt;  it is generally recommended not to use this option in uncontrolled&lt;br&gt;  environments (eg: internet), otherwise scans and other malicious activities&lt;br&gt;  would not be logged.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “log”, “http-ignore-probes”, “monitor-net”, “monitor-uri”, and&lt;br&gt;             section 8 about logging.&lt;/p&gt;
&lt;p&gt;option forceclose&lt;br&gt;no option forceclose&lt;br&gt;  enable or disable active connection closing after response is transferred.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  some http servers do not necessarily close the connections when they receive&lt;br&gt;  the “connection: close” set by “option httpclose”, and if the client does not&lt;br&gt;  close either, then the connection remains open till the timeout expires. this&lt;br&gt;  causes high number of simultaneous connections on the servers and shows high&lt;br&gt;  global session times in the logs.&lt;/p&gt;
&lt;p&gt;  when this happens, it is possible to use “option forceclose”. it will&lt;br&gt;  actively close the outgoing server channel as soon as the server has finished&lt;br&gt;  to respond and release some resources earlier than with “option httpclose”.&lt;/p&gt;
&lt;p&gt;  this option may also be combined with “option http-pretend-keepalive”, which&lt;br&gt;  will disable sending of the “connection: close” header, but will still cause&lt;br&gt;  the connection to be closed once the whole response is received.&lt;/p&gt;
&lt;p&gt;  this option disables and replaces any previous “option httpclose”, “option&lt;br&gt;  http-server-close”, “option http-keep-alive”, or “option http-tunnel”.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option httpclose” and “option http-pretend-keepalive”&lt;/p&gt;
&lt;p&gt;option forwardfor [ except &lt;network&gt; ] [ header &lt;name&gt; ] [ if-none ]&lt;br&gt;  enable insertion of the x-forwarded-for header to requests sent to servers&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;network&gt; is an optional argument used to disable this option for sources&lt;br&gt;              matching &lt;network&gt;&lt;br&gt;    &lt;name&gt;    an optional argument to specify a different “x-forwarded-for”&lt;br&gt;              header name.&lt;/name&gt;&lt;/network&gt;&lt;/network&gt;&lt;/name&gt;&lt;/network&gt;&lt;/p&gt;
&lt;p&gt;  since haproxy works in reverse-proxy mode, the servers see its ip address as&lt;br&gt;  their client address. this is sometimes annoying when the client’s ip address&lt;br&gt;  is expected in server logs. to solve this problem, the well-known http header&lt;br&gt;  “x-forwarded-for” may be added by haproxy to all requests sent to the server.&lt;br&gt;  this header contains a value representing the client’s ip address. since this&lt;br&gt;  header is always appended at the end of the existing header list, the server&lt;br&gt;  must be configured to always use the last occurrence of this header only. see&lt;br&gt;  the server’s manual to find how to enable use of this standard header. note&lt;br&gt;  that only the last occurrence of the header must be used, since it is really&lt;br&gt;  possible that the client has already brought one.&lt;/p&gt;
&lt;p&gt;  the keyword “header” may be used to supply a different header name to replace&lt;br&gt;  the default “x-forwarded-for”. this can be useful where you might already&lt;br&gt;  have a “x-forwarded-for” header from a different application (eg: stunnel),&lt;br&gt;  and you need preserve it. also if your backend server doesn’t use the&lt;br&gt;  “x-forwarded-for” header and requires different one (eg: zeus web servers&lt;br&gt;  require “x-cluster-client-ip”).&lt;/p&gt;
&lt;p&gt;  sometimes, a same haproxy instance may be shared between a direct client&lt;br&gt;  access and a reverse-proxy access (for instance when an ssl reverse-proxy is&lt;br&gt;  used to decrypt https traffic). it is possible to disable the addition of the&lt;br&gt;  header for a known source address or network by adding the “except” keyword&lt;br&gt;  followed by the network address. in this case, any source ip matching the&lt;br&gt;  network will not cause an addition of this header. most common uses are with&lt;br&gt;  private networks or 127.0.0.1.&lt;/p&gt;
&lt;p&gt;  alternatively, the keyword “if-none” states that the header will only be&lt;br&gt;  added if it is not present. this should only be used in perfectly trusted&lt;br&gt;  environment, as this might cause a security issue if headers reaching haproxy&lt;br&gt;  are under the control of the end-user.&lt;/p&gt;
&lt;p&gt;  this option may be specified either in the frontend or in the backend. if at&lt;br&gt;  least one of them uses it, the header will be added. note that the backend’s&lt;br&gt;  setting of the header subargument takes precedence over the frontend’s if&lt;br&gt;  both are defined. in the case of the “if-none” argument, if at least one of&lt;br&gt;  the frontend or the backend does not specify it, it wants the addition to be&lt;br&gt;  mandatory, so it wins.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public http address also used by stunnel on the same machine
frontend www
    mode http
    option forwardfor except 127.0.0.1  # stunnel already adds the header

# those servers want the ip address in x-client
backend www
    mode http
    option forwardfor header x-client
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httpclose”, “option http-server-close”,&lt;br&gt;             “option forceclose”, “option http-keep-alive”&lt;/p&gt;
&lt;p&gt;option http-buffer-request&lt;br&gt;no option http-buffer-request&lt;br&gt;  enable or disable waiting for whole http request body before proceeding&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  it is sometimes desirable to wait for the body of an http request before&lt;br&gt;  taking a decision. this is what is being done by “balance url_param” for&lt;br&gt;  example. the first use case is to buffer requests from slow clients before&lt;br&gt;  connecting to the server. another use case consists in taking the routing&lt;br&gt;  decision based on the request body’s contents. this option placed in a&lt;br&gt;  frontend or backend forces the http processing to wait until either the whole&lt;br&gt;  body is received, or the request buffer is full, or the first chunk is&lt;br&gt;  complete in case of chunked encoding. it can have undesired side effects with&lt;br&gt;  some applications abusing http by expecting unbufferred transmissions between&lt;br&gt;  the frontend and the backend, so this should definitely not be used by&lt;br&gt;  default.&lt;/p&gt;
&lt;p&gt;  see also : “option http-no-delay”&lt;/p&gt;
&lt;p&gt;option http-ignore-probes&lt;br&gt;no option http-ignore-probes&lt;br&gt;  enable or disable logging of null connections and request timeouts&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  recently some browsers started to implement a “pre-connect” feature&lt;br&gt;  consisting in speculatively connecting to some recently visited web sites&lt;br&gt;  just in case the user would like to visit them. this results in many&lt;br&gt;  connections being established to web sites, which end up in 408 request&lt;br&gt;  timeout if the timeout strikes first, or 400 bad request when the browser&lt;br&gt;  decides to close them first. these ones pollute the log and feed the error&lt;br&gt;  counters. there was already “option dontlognull” but it’s insufficient in&lt;br&gt;  this case. instead, this option does the following things :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- prevent any 400/408 message from being sent to the client if nothing
  was received over a connection before it was closed ;
- prevent any log from being emitted in this situation ;
- prevent any error counter from being incremented
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  that way the empty connection is silently ignored. note that it is better&lt;br&gt;  not to use this unless it is clear that it is needed, because it will hide&lt;br&gt;  real problems. the most common reason for not receiving a request and seeing&lt;br&gt;  a 408 is due to an mtu inconsistency between the client and an intermediary&lt;br&gt;  element such as a vpn, which blocks too large packets. these issues are&lt;br&gt;  generally seen with post requests as well as get with large cookies. the logs&lt;br&gt;  are often the only way to detect them.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “log”, “dontlognull”, “errorfile”, and section 8 about logging.&lt;/p&gt;
&lt;p&gt;option http-keep-alive&lt;br&gt;no option http-keep-alive&lt;br&gt;  enable or disable http keep-alive from client to server&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default haproxy operates in keep-alive mode with regards to persistent&lt;br&gt;  connections: for each connection it processes each request and response, and&lt;br&gt;  leaves the connection idle on both sides between the end of a response and the&lt;br&gt;  start of a new request. this mode may be changed by several options such as&lt;br&gt;  “option http-server-close”, “option forceclose”, “option httpclose” or&lt;br&gt;  “option http-tunnel”. this option allows to set back the keep-alive mode,&lt;br&gt;  which can be useful when another mode was used in a defaults section.&lt;/p&gt;
&lt;p&gt;  setting “option http-keep-alive” enables http keep-alive mode on the client-&lt;br&gt;  and server- sides. this provides the lowest latency on the client side (slow&lt;br&gt;  network) and the fastest session reuse on the server side at the expense&lt;br&gt;  of maintaining idle connections to the servers. in general, it is possible&lt;br&gt;  with this option to achieve approximately twice the request rate that the&lt;br&gt;  “http-server-close” option achieves on small objects. there are mainly two&lt;br&gt;  situations where this option may be useful :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- when the server is non-http compliant and authenticates the connection
  instead of requests (eg: ntlm authentication)

- when the cost of establishing the connection to the server is significant
  compared to the cost of retrieving the associated object from the server.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  this last case can happen when the server is a fast static server of cache.&lt;br&gt;  in this case, the server will need to be properly tuned to support high enough&lt;br&gt;  connection counts because connections will last until the client sends another&lt;br&gt;  request.&lt;/p&gt;
&lt;p&gt;  if the client request has to go to another backend or another server due to&lt;br&gt;  content switching or the load balancing algorithm, the idle connection will&lt;br&gt;  immediately be closed and a new one re-opened. option “prefer-last-server” is&lt;br&gt;  available to try optimize server selection so that if the server currently&lt;br&gt;  attached to an idle connection is usable, it will be used.&lt;/p&gt;
&lt;p&gt;  in general it is preferred to use “option http-server-close” with application&lt;br&gt;  servers, and some static servers might benefit from “option http-keep-alive”.&lt;/p&gt;
&lt;p&gt;  at the moment, logs will not indicate whether requests came from the same&lt;br&gt;  session or not. the accept date reported in the logs corresponds to the end&lt;br&gt;  of the previous request, and the request time corresponds to the time spent&lt;br&gt;  waiting for a new request. the keep-alive request time is still bound to the&lt;br&gt;  timeout defined by “timeout http-keep-alive” or “timeout http-request” if&lt;br&gt;  not set.&lt;/p&gt;
&lt;p&gt;  this option disables and replaces any previous “option httpclose”, “option&lt;br&gt;  http-server-close”, “option forceclose” or “option http-tunnel”. when backend&lt;br&gt;  and frontend options differ, all of these 4 options have precedence over&lt;br&gt;  “option http-keep-alive”.&lt;/p&gt;
&lt;p&gt;  see also : “option forceclose”, “option http-server-close”,&lt;br&gt;             “option prefer-last-server”, “option http-pretend-keepalive”,&lt;br&gt;             “option httpclose”, and “1.1. the http transaction model”.&lt;/p&gt;
&lt;p&gt;option http-no-delay&lt;br&gt;no option http-no-delay&lt;br&gt;  instruct the system to favor low interactive delays over performance in http&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  in http, each payload is unidirectional and has no notion of interactivity.&lt;br&gt;  any agent is expected to queue data somewhat for a reasonably low delay.&lt;br&gt;  there are some very rare server-to-server applications that abuse the http&lt;br&gt;  protocol and expect the payload phase to be highly interactive, with many&lt;br&gt;  interleaved data chunks in both directions within a single request. this is&lt;br&gt;  absolutely not supported by the http specification and will not work across&lt;br&gt;  most proxies or servers. when such applications attempt to do this through&lt;br&gt;  haproxy, it works but they will experience high delays due to the network&lt;br&gt;  optimizations which favor performance by instructing the system to wait for&lt;br&gt;  enough data to be available in order to only send full packets. typical&lt;br&gt;  delays are around 200 ms per round trip. note that this only happens with&lt;br&gt;  abnormal uses. normal uses such as connect requests nor websockets are not&lt;br&gt;  affected.&lt;/p&gt;
&lt;p&gt;  when “option http-no-delay” is present in either the frontend or the backend&lt;br&gt;  used by a connection, all such optimizations will be disabled in order to&lt;br&gt;  make the exchanges as fast as possible. of course this offers no guarantee on&lt;br&gt;  the functionality, as it may break at any other place. but if it works via&lt;br&gt;  haproxy, it will work as fast as possible. this option should never be used&lt;br&gt;  by default, and should never be used at all unless such a buggy application&lt;br&gt;  is discovered. the impact of using this option is an increase of bandwidth&lt;br&gt;  usage and cpu usage, which may significantly lower performance in high&lt;br&gt;  latency environments.&lt;/p&gt;
&lt;p&gt;  see also : “option http-buffer-request”&lt;/p&gt;
&lt;p&gt;option http-pretend-keepalive&lt;br&gt;no option http-pretend-keepalive&lt;br&gt;  define whether haproxy will announce keepalive to the server or not&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when running with “option http-server-close” or “option forceclose”, haproxy&lt;br&gt;  adds a “connection: close” header to the request forwarded to the server.&lt;br&gt;  unfortunately, when some servers see this header, they automatically refrain&lt;br&gt;  from using the chunked encoding for responses of unknown length, while this&lt;br&gt;  is totally unrelated. the immediate effect is that this prevents haproxy from&lt;br&gt;  maintaining the client connection alive. a second effect is that a client or&lt;br&gt;  a cache could receive an incomplete response without being aware of it, and&lt;br&gt;  consider the response complete.&lt;/p&gt;
&lt;p&gt;  by setting “option http-pretend-keepalive”, haproxy will make the server&lt;br&gt;  believe it will keep the connection alive. the server will then not fall back&lt;br&gt;  to the abnormal undesired above. when haproxy gets the whole response, it&lt;br&gt;  will close the connection with the server just as it would do with the&lt;br&gt;  “forceclose” option. that way the client gets a normal response and the&lt;br&gt;  connection is correctly closed on the server side.&lt;/p&gt;
&lt;p&gt;  it is recommended not to enable this option by default, because most servers&lt;br&gt;  will more efficiently close the connection themselves after the last packet,&lt;br&gt;  and release its buffers slightly earlier. also, the added packet on the&lt;br&gt;  network could slightly reduce the overall peak performance. however it is&lt;br&gt;  worth noting that when this option is enabled, haproxy will have slightly&lt;br&gt;  less work to do. so if haproxy is the bottleneck on the whole architecture,&lt;br&gt;  enabling this option might save a few cpu cycles.&lt;/p&gt;
&lt;p&gt;  this option may be set both in a frontend and in a backend. it is enabled if&lt;br&gt;  at least one of the frontend or backend holding a connection has it enabled.&lt;br&gt;  this option may be combined with “option httpclose”, which will cause&lt;br&gt;  keepalive to be announced to the server and close to be announced to the&lt;br&gt;  client. this practice is discouraged though.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option forceclose”, “option http-server-close”, and&lt;br&gt;             “option http-keep-alive”&lt;/p&gt;
&lt;p&gt;option http-server-close&lt;br&gt;no option http-server-close&lt;br&gt;  enable or disable http connection closing on the server side&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default haproxy operates in keep-alive mode with regards to persistent&lt;br&gt;  connections: for each connection it processes each request and response, and&lt;br&gt;  leaves the connection idle on both sides between the end of a response and&lt;br&gt;  the start of a new request. this mode may be changed by several options such&lt;br&gt;  as “option http-server-close”, “option forceclose”, “option httpclose” or&lt;br&gt;  “option http-tunnel”. setting “option http-server-close” enables http&lt;br&gt;  connection-close mode on the server side while keeping the ability to support&lt;br&gt;  http keep-alive and pipelining on the client side.  this provides the lowest&lt;br&gt;  latency on the client side (slow network) and the fastest session reuse on&lt;br&gt;  the server side to save server resources, similarly to “option forceclose”.&lt;br&gt;  it also permits non-keepalive capable servers to be served in keep-alive mode&lt;br&gt;  to the clients if they conform to the requirements of rfc2616. please note&lt;br&gt;  that some servers do not always conform to those requirements when they see&lt;br&gt;  “connection: close” in the request. the effect will be that keep-alive will&lt;br&gt;  never be used. a workaround consists in enabling “option&lt;br&gt;  http-pretend-keepalive”.&lt;/p&gt;
&lt;p&gt;  at the moment, logs will not indicate whether requests came from the same&lt;br&gt;  session or not. the accept date reported in the logs corresponds to the end&lt;br&gt;  of the previous request, and the request time corresponds to the time spent&lt;br&gt;  waiting for a new request. the keep-alive request time is still bound to the&lt;br&gt;  timeout defined by “timeout http-keep-alive” or “timeout http-request” if&lt;br&gt;  not set.&lt;/p&gt;
&lt;p&gt;  this option may be set both in a frontend and in a backend. it is enabled if&lt;br&gt;  at least one of the frontend or backend holding a connection has it enabled.&lt;br&gt;  it disables and replaces any previous “option httpclose”, “option forceclose”,&lt;br&gt;  “option http-tunnel” or “option http-keep-alive”. please check section 4&lt;br&gt;  (“proxies”) to see how this option combines with others when frontend and&lt;br&gt;  backend options differ.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option forceclose”, “option http-pretend-keepalive”,&lt;br&gt;             “option httpclose”, “option http-keep-alive”, and&lt;br&gt;             “1.1. the http transaction model”.&lt;/p&gt;
&lt;p&gt;option http-tunnel&lt;br&gt;no option http-tunnel&lt;br&gt;  disable or enable http connection processing after first transaction&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default haproxy operates in keep-alive mode with regards to persistent&lt;br&gt;  connections: for each connection it processes each request and response, and&lt;br&gt;  leaves the connection idle on both sides between the end of a response and&lt;br&gt;  the start of a new request. this mode may be changed by several options such&lt;br&gt;  as “option http-server-close”, “option forceclose”, “option httpclose” or&lt;br&gt;  “option http-tunnel”.&lt;/p&gt;
&lt;p&gt;  option “http-tunnel” disables any http processing past the first request and&lt;br&gt;  the first response. this is the mode which was used by default in versions&lt;br&gt;  1.0 to 1.5-dev21. it is the mode with the lowest processing overhead, which&lt;br&gt;  is normally not needed anymore unless in very specific cases such as when&lt;br&gt;  using an in-house protocol that looks like http but is not compatible, or&lt;br&gt;  just to log one request per client in order to reduce log size. note that&lt;br&gt;  everything which works at the http level, including header parsing/addition,&lt;br&gt;  cookie processing or content switching will only work for the first request&lt;br&gt;  and will be ignored after the first response.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option forceclose”, “option http-server-close”,&lt;br&gt;             “option httpclose”, “option http-keep-alive”, and&lt;br&gt;             “1.1. the http transaction model”.&lt;/p&gt;
&lt;p&gt;option http-use-proxy-header&lt;br&gt;no option http-use-proxy-header&lt;br&gt;  make use of non-standard proxy-connection header instead of connection&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  while rfc2616 explicitly states that http/1.1 agents must use the&lt;br&gt;  connection header to indicate their wish of persistent or non-persistent&lt;br&gt;  connections, both browsers and proxies ignore this header for proxied&lt;br&gt;  connections and make use of the undocumented, non-standard proxy-connection&lt;br&gt;  header instead. the issue begins when trying to put a load balancer between&lt;br&gt;  browsers and such proxies, because there will be a difference between what&lt;br&gt;  haproxy understands and what the client and the proxy agree on.&lt;/p&gt;
&lt;p&gt;  by setting this option in a frontend, haproxy can automatically switch to use&lt;br&gt;  that non-standard header if it sees proxied requests. a proxied request is&lt;br&gt;  defined here as one where the uri begins with neither a ‘/‘ nor a ‘*’. the&lt;br&gt;  choice of header only affects requests passing through proxies making use of&lt;br&gt;  one of the “httpclose”, “forceclose” and “http-server-close” options. note&lt;br&gt;  that this option can only be specified in a frontend and will affect the&lt;br&gt;  request along its whole life.&lt;/p&gt;
&lt;p&gt;  also, when this option is set, a request which requires authentication will&lt;br&gt;  automatically switch to use proxy authentication headers if it is itself a&lt;br&gt;  proxied request. that makes it possible to check or enforce authentication in&lt;br&gt;  front of an existing proxy.&lt;/p&gt;
&lt;p&gt;  this option should normally never be used, except in front of a proxy.&lt;/p&gt;
&lt;p&gt;  see also : “option httpclose”, “option forceclose” and “option&lt;br&gt;             http-server-close”.&lt;/p&gt;
&lt;p&gt;option httpchk&lt;br&gt;option httpchk &lt;uri&gt;&lt;br&gt;option httpchk &lt;method&gt; &lt;uri&gt;&lt;br&gt;option httpchk &lt;method&gt; &lt;uri&gt; &lt;version&gt;&lt;br&gt;  enable http protocol to check on the servers health&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;method&gt;  is the optional http method used with the requests. when not set,&lt;br&gt;              the “options” method is used, as it generally requires low server&lt;br&gt;              processing and is easy to filter out from the logs. any method&lt;br&gt;              may be used, though it is not recommended to invent non-standard&lt;br&gt;              ones.&lt;/method&gt;&lt;/version&gt;&lt;/uri&gt;&lt;/method&gt;&lt;/uri&gt;&lt;/method&gt;&lt;/uri&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;uri&amp;gt;     is the uri referenced in the http requests. it defaults to &amp;quot; / &amp;quot;
          which is accessible by default on almost any server, but may be
          changed to any other uri. query strings are permitted.

&amp;lt;version&amp;gt; is the optional http version string. it defaults to &amp;quot;http/1.0&amp;quot;
          but some servers might behave incorrectly in http 1.0, so turning
          it to http/1.1 may sometimes help. note that the host field is
          mandatory in http/1.1, and as a trick, it is possible to pass it
          after &amp;quot;\r\n&amp;quot; following the version string.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  by default, server health checks only consist in trying to establish a tcp&lt;br&gt;  connection. when “option httpchk” is specified, a complete http request is&lt;br&gt;  sent once the tcp connection is established, and responses 2xx and 3xx are&lt;br&gt;  considered valid, while all other ones indicate a server failure, including&lt;br&gt;  the lack of any response.&lt;/p&gt;
&lt;p&gt;  the port and interval are specified in the server configuration.&lt;/p&gt;
&lt;p&gt;  this option does not necessarily require an http backend, it also works with&lt;br&gt;  plain tcp backends. this is particularly useful to check simple scripts bound&lt;br&gt;  to some dedicated ports using the inetd daemon.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# relay https traffic to apache instance and check service availability
# using http request &amp;quot;options * http/1.1&amp;quot; on port 80.
backend https_relay
    mode tcp
    option httpchk options * http/1.1\r\nhost:\ www
    server apache1 192.168.1.1:443 check port 80
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option ssl-hello-chk”, “option smtpchk”, “option mysql-check”,&lt;br&gt;             “option pgsql-check”, “http-check” and the “check”, “port” and&lt;br&gt;             “inter” server options.&lt;/p&gt;
&lt;p&gt;option httpclose&lt;br&gt;no option httpclose&lt;br&gt;  enable or disable passive http connection closing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default haproxy operates in keep-alive mode with regards to persistent&lt;br&gt;  connections: for each connection it processes each request and response, and&lt;br&gt;  leaves the connection idle on both sides between the end of a response and&lt;br&gt;  the start of a new request. this mode may be changed by several options such&lt;br&gt;  as “option http-server-close”, “option forceclose”, “option httpclose” or&lt;br&gt;  “option http-tunnel”.&lt;/p&gt;
&lt;p&gt;  if “option httpclose” is set, haproxy will work in http tunnel mode and check&lt;br&gt;  if a “connection: close” header is already set in each direction, and will&lt;br&gt;  add one if missing. each end should react to this by actively closing the tcp&lt;br&gt;  connection after each transfer, thus resulting in a switch to the http close&lt;br&gt;  mode. any “connection” header different from “close” will also be removed.&lt;br&gt;  note that this option is deprecated since what it does is very cheap but not&lt;br&gt;  reliable. using “option http-server-close” or “option forceclose” is strongly&lt;br&gt;  recommended instead.&lt;/p&gt;
&lt;p&gt;  it seldom happens that some servers incorrectly ignore this header and do not&lt;br&gt;  close the connection even though they reply “connection: close”. for this&lt;br&gt;  reason, they are not compatible with older http 1.0 browsers. if this happens&lt;br&gt;  it is possible to use the “option forceclose” which actively closes the&lt;br&gt;  request connection once the server responds. option “forceclose” also&lt;br&gt;  releases the server connection earlier because it does not have to wait for&lt;br&gt;  the client to acknowledge it.&lt;/p&gt;
&lt;p&gt;  this option may be set both in a frontend and in a backend. it is enabled if&lt;br&gt;  at least one of the frontend or backend holding a connection has it enabled.&lt;br&gt;  it disables and replaces any previous “option http-server-close”,&lt;br&gt;  “option forceclose”, “option http-keep-alive” or “option http-tunnel”. please&lt;br&gt;  check section 4 (“proxies”) to see how this option combines with others when&lt;br&gt;  frontend and backend options differ.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option forceclose”, “option http-server-close” and&lt;br&gt;             “1.1. the http transaction model”.&lt;/p&gt;
&lt;p&gt;option httplog [ clf ]&lt;br&gt;  enable logging of http request, session state and timers&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    clf       if the “clf” argument is added, then the output format will be&lt;br&gt;              the clf format instead of haproxy’s default http format. you can&lt;br&gt;              use this when you need to feed haproxy’s logs through a specific&lt;br&gt;              log analyser which only support the clf format and which is not&lt;br&gt;              extensible.&lt;/p&gt;
&lt;p&gt;  by default, the log output format is very poor, as it only contains the&lt;br&gt;  source and destination addresses, and the instance name. by specifying&lt;br&gt;  “option httplog”, each log line turns into a much richer format including,&lt;br&gt;  but not limited to, the http request, the connection timers, the session&lt;br&gt;  status, the connections numbers, the captured headers and cookies, the&lt;br&gt;  frontend, backend and server name, and of course the source address and&lt;br&gt;  ports.&lt;/p&gt;
&lt;p&gt;  this option may be set either in the frontend or the backend.&lt;/p&gt;
&lt;p&gt;  specifying only “option httplog” will automatically clear the ‘clf’ mode&lt;br&gt;  if it was set by default.&lt;/p&gt;
&lt;p&gt;  see also :  section 8 about logging.&lt;/p&gt;
&lt;p&gt;option http_proxy&lt;br&gt;no option http_proxy&lt;br&gt;  enable or disable plain http proxy mode&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  it sometimes happens that people need a pure http proxy which understands&lt;br&gt;  basic proxy requests without caching nor any fancy feature. in this case,&lt;br&gt;  it may be worth setting up an haproxy instance with the “option http_proxy”&lt;br&gt;  set. in this mode, no server is declared, and the connection is forwarded to&lt;br&gt;  the ip address and port found in the url after the “http://“ scheme.&lt;/p&gt;
&lt;p&gt;  no host address resolution is performed, so this only works when pure ip&lt;br&gt;  addresses are passed. since this option’s usage perimeter is rather limited,&lt;br&gt;  it will probably be used only by experts who know they need exactly it. last,&lt;br&gt;  if the clients are susceptible of sending keep-alive requests, it will be&lt;br&gt;  needed to add “option httpclose” to ensure that all requests will correctly&lt;br&gt;  be analyzed.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this backend understands http proxy requests and forwards them directly.
backend direct_forward
    option httpclose
    option http_proxy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httpclose”&lt;/p&gt;
&lt;p&gt;option independent-streams&lt;br&gt;no option independent-streams&lt;br&gt;  enable or disable independent timeout processing for both directions&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |  yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, when data is sent over a socket, both the write timeout and the&lt;br&gt;  read timeout for that socket are refreshed, because we consider that there is&lt;br&gt;  activity on that socket, and we have no other means of guessing if we should&lt;br&gt;  receive data or not.&lt;/p&gt;
&lt;p&gt;  while this default behaviour is desirable for almost all applications, there&lt;br&gt;  exists a situation where it is desirable to disable it, and only refresh the&lt;br&gt;  read timeout if there are incoming data. this happens on sessions with large&lt;br&gt;  timeouts and low amounts of exchanged data such as telnet session. if the&lt;br&gt;  server suddenly disappears, the output data accumulates in the system’s&lt;br&gt;  socket buffers, both timeouts are correctly refreshed, and there is no way&lt;br&gt;  to know the server does not receive them, so we don’t timeout. however, when&lt;br&gt;  the underlying protocol always echoes sent data, it would be enough by itself&lt;br&gt;  to detect the issue using the read timeout. note that this problem does not&lt;br&gt;  happen with more verbose protocols because data won’t accumulate long in the&lt;br&gt;  socket buffers.&lt;/p&gt;
&lt;p&gt;  when this option is set on the frontend, it will disable read timeout updates&lt;br&gt;  on data sent to the client. there probably is little use of this case. when&lt;br&gt;  the option is set on the backend, it will disable read timeout updates on&lt;br&gt;  data sent to the server. doing so will typically break large http posts from&lt;br&gt;  slow lines, so use it with caution.&lt;/p&gt;
&lt;p&gt;  note: older versions used to call this setting “option independent-streams”&lt;br&gt;        with a spelling mistake. this spelling is still supported but&lt;br&gt;        deprecated.&lt;/p&gt;
&lt;p&gt;  see also : “timeout client”, “timeout server” and “timeout tunnel”&lt;/p&gt;
&lt;p&gt;option ldap-check&lt;br&gt;  use ldapv3 health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  it is possible to test that the server correctly talks ldapv3 instead of just&lt;br&gt;  testing that it accepts the tcp connection. when this option is set, an&lt;br&gt;  ldapv3 anonymous simple bind message is sent to the server, and the response&lt;br&gt;  is analyzed to find an ldapv3 bind response message.&lt;/p&gt;
&lt;p&gt;  the server is considered valid only when the ldap response contains success&lt;br&gt;  resultcode (&lt;a href=&quot;http://tools.ietf.org/html/rfc4511#section-4.1.9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tools.ietf.org/html/rfc4511#section-4.1.9&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;  logging of bind requests is server dependent see your documentation how to&lt;br&gt;  configure it.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option ldap-check&lt;/p&gt;
&lt;p&gt;  see also : “option httpchk”&lt;/p&gt;
&lt;p&gt;option external-check&lt;br&gt;  use external processes for server health checks&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  it is possible to test the health of a server using an external command.&lt;br&gt;  this is achieved by running the executable set using “external-check&lt;br&gt;  command”.&lt;/p&gt;
&lt;p&gt;  requires the “external-check” global to be set.&lt;/p&gt;
&lt;p&gt;  see also : “external-check”, “external-check command”, “external-check path”&lt;/p&gt;
&lt;p&gt;option log-health-checks&lt;br&gt;no option log-health-checks&lt;br&gt;  enable or disable logging of health checks status updates&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |  yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, failed health check are logged if server is up and successful&lt;br&gt;  health checks are logged if server is down, so the amount of additional&lt;br&gt;  information is limited.&lt;/p&gt;
&lt;p&gt;  when this option is enabled, any change of the health check status or to&lt;br&gt;  the server’s health will be logged, so that it becomes possible to know&lt;br&gt;  that a server was failing occasional checks before crashing, or exactly when&lt;br&gt;  it failed to respond a valid http status, then when the port started to&lt;br&gt;  reject connections, then when the server stopped responding at all.&lt;/p&gt;
&lt;p&gt;  note that status changes not caused by health checks (eg: enable/disable on&lt;br&gt;  the cli) are intentionally not logged by this option.&lt;/p&gt;
&lt;p&gt;  see also: “option httpchk”, “option ldap-check”, “option mysql-check”,&lt;br&gt;            “option pgsql-check”, “option redis-check”, “option smtpchk”,&lt;br&gt;            “option tcp-check”, “log” and section 8 about logging.&lt;/p&gt;
&lt;p&gt;option log-separate-errors&lt;br&gt;no option log-separate-errors&lt;br&gt;  change log level for non-completely successful connections&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  sometimes looking for errors in logs is not easy. this option makes haproxy&lt;br&gt;  raise the level of logs containing potentially interesting information such&lt;br&gt;  as errors, timeouts, retries, redispatches, or http status codes 5xx. the&lt;br&gt;  level changes from “info” to “err”. this makes it possible to log them&lt;br&gt;  separately to a different file with most syslog daemons. be careful not to&lt;br&gt;  remove them from the original file, otherwise you would lose ordering which&lt;br&gt;  provides very important information.&lt;/p&gt;
&lt;p&gt;  using this option, large sites dealing with several thousand connections per&lt;br&gt;  second may log normal traffic to a rotating buffer and only archive smaller&lt;br&gt;  error logs.&lt;/p&gt;
&lt;p&gt;  see also : “log”, “dontlognull”, “dontlog-normal” and section 8 about&lt;br&gt;             logging.&lt;/p&gt;
&lt;p&gt;option logasap&lt;br&gt;no option logasap&lt;br&gt;  enable or disable early logging of http requests&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, http requests are logged upon termination so that the total&lt;br&gt;  transfer time and the number of bytes appear in the logs. when large objects&lt;br&gt;  are being transferred, it may take a while before the request appears in the&lt;br&gt;  logs. using “option logasap”, the request gets logged as soon as the server&lt;br&gt;  sends the complete headers. the only missing information in the logs will be&lt;br&gt;  the total number of bytes which will indicate everything except the amount&lt;br&gt;  of data transferred, and the total time which will not take the transfer&lt;br&gt;  time into account. in such a situation, it’s a good practice to capture the&lt;br&gt;  “content-length” response header so that the logs at least indicate how many&lt;br&gt;  bytes are expected to be transferred.&lt;/p&gt;
&lt;p&gt;  examples :&lt;br&gt;      listen http_proxy 0.0.0.0:80&lt;br&gt;          mode http&lt;br&gt;          option httplog&lt;br&gt;          option logasap&lt;br&gt;          log 192.168.2.200 local3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; feb  6 12:14:14 localhost \
      haproxy[14389]: 10.0.1.2:33317 [06/feb/2009:12:14:14.655] http-in \
      static/srv1 9/10/7/14/+30 200 +243 - - ---- 3/1/1/1/0 1/0 \
      &amp;quot;get /image.iso http/1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httplog”, “capture response header”, and section 8 about&lt;br&gt;             logging.&lt;/p&gt;
&lt;p&gt;option mysql-check [ user &lt;username&gt; [ post-41 ] ]&lt;br&gt;  use mysql health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;username&gt; this is the username which will be used when connecting to mysql&lt;br&gt;               server.&lt;br&gt;    post-41    send post v4.1 client compatible checks&lt;/username&gt;&lt;/username&gt;&lt;/p&gt;
&lt;p&gt;  if you specify a username, the check consists of sending two mysql packet,&lt;br&gt;  one client authentication packet, and one quit packet, to correctly close&lt;br&gt;  mysql session. we then parse the mysql handshake initialisation packet and/or&lt;br&gt;  error packet. it is a basic but useful test which does not produce error nor&lt;br&gt;  aborted connect on the server. however, it requires adding an authorization&lt;br&gt;  in the mysql table, like this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;use mysql;
insert into user (host,user) values (&amp;apos;&amp;lt;ip_of_haproxy&amp;gt;&amp;apos;,&amp;apos;&amp;lt;username&amp;gt;&amp;apos;);
flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  if you don’t specify a username (it is deprecated and not recommended), the&lt;br&gt;  check only consists in parsing the mysql handshake initialisation packet or&lt;br&gt;  error packet, we don’t send anything in this mode. it was reported that it&lt;br&gt;  can generate lockout if check is too frequent and/or if there is not enough&lt;br&gt;  traffic. in fact, you need in this case to check mysql “max_connect_errors”&lt;br&gt;  value as if a connection is established successfully within fewer than mysql&lt;br&gt;  “max_connect_errors” attempts after a previous connection was interrupted,&lt;br&gt;  the error count for the host is cleared to zero. if haproxy’s server get&lt;br&gt;  blocked, the “flush hosts” statement is the only way to unblock it.&lt;/p&gt;
&lt;p&gt;  remember that this does not check database presence nor database consistency.&lt;br&gt;  to do this, you can use an external check with xinetd for example.&lt;/p&gt;
&lt;p&gt;  the check requires mysql &amp;gt;=3.22, for older version, please use tcp check.&lt;/p&gt;
&lt;p&gt;  most often, an incoming mysql server needs to see the client’s ip address for&lt;br&gt;  various purposes, including ip privilege matching and connection logging.&lt;br&gt;  when possible, it is often wise to masquerade the client’s ip address when&lt;br&gt;  connecting to the server using the “usesrc” argument of the “source” keyword,&lt;br&gt;  which requires the cttproxy feature to be compiled in, and the mysql server&lt;br&gt;  to route the client via the machine hosting haproxy.&lt;/p&gt;
&lt;p&gt;  see also: “option httpchk”&lt;/p&gt;
&lt;p&gt;option nolinger&lt;br&gt;no option nolinger&lt;br&gt;  enable or disable immediate session resource cleaning after close&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when clients or servers abort connections in a dirty way (eg: they are&lt;br&gt;  physically disconnected), the session timeouts triggers and the session is&lt;br&gt;  closed. but it will remain in fin_wait1 state for some time in the system,&lt;br&gt;  using some resources and possibly limiting the ability to establish newer&lt;br&gt;  connections.&lt;/p&gt;
&lt;p&gt;  when this happens, it is possible to activate “option nolinger” which forces&lt;br&gt;  the system to immediately remove any socket’s pending data on close. thus,&lt;br&gt;  the session is instantly purged from the system’s tables. this usually has&lt;br&gt;  side effects such as increased number of tcp resets due to old retransmits&lt;br&gt;  getting immediately rejected. some firewalls may sometimes complain about&lt;br&gt;  this too.&lt;/p&gt;
&lt;p&gt;  for this reason, it is not recommended to use this option when not absolutely&lt;br&gt;  needed. you know that you need it when you have thousands of fin_wait1&lt;br&gt;  sessions on your system (time_wait ones do not count).&lt;/p&gt;
&lt;p&gt;  this option may be used both on frontends and backends, depending on the side&lt;br&gt;  where it is required. use it on the frontend for clients, and on the backend&lt;br&gt;  for servers.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;option originalto [ except &lt;network&gt; ] [ header &lt;name&gt; ]&lt;br&gt;  enable insertion of the x-original-to header to requests sent to servers&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;network&gt; is an optional argument used to disable this option for sources&lt;br&gt;              matching &lt;network&gt;&lt;br&gt;    &lt;name&gt;    an optional argument to specify a different “x-original-to”&lt;br&gt;              header name.&lt;/name&gt;&lt;/network&gt;&lt;/network&gt;&lt;/name&gt;&lt;/network&gt;&lt;/p&gt;
&lt;p&gt;  since haproxy can work in transparent mode, every request from a client can&lt;br&gt;  be redirected to the proxy and haproxy itself can proxy every request to a&lt;br&gt;  complex squid environment and the destination host from so_original_dst will&lt;br&gt;  be lost. this is annoying when you want access rules based on destination ip&lt;br&gt;  addresses. to solve this problem, a new http header “x-original-to” may be&lt;br&gt;  added by haproxy to all requests sent to the server. this header contains a&lt;br&gt;  value representing the original destination ip address. since this must be&lt;br&gt;  configured to always use the last occurrence of this header only. note that&lt;br&gt;  only the last occurrence of the header must be used, since it is really&lt;br&gt;  possible that the client has already brought one.&lt;/p&gt;
&lt;p&gt;  the keyword “header” may be used to supply a different header name to replace&lt;br&gt;  the default “x-original-to”. this can be useful where you might already&lt;br&gt;  have a “x-original-to” header from a different application, and you need&lt;br&gt;  preserve it. also if your backend server doesn’t use the “x-original-to”&lt;br&gt;  header and requires different one.&lt;/p&gt;
&lt;p&gt;  sometimes, a same haproxy instance may be shared between a direct client&lt;br&gt;  access and a reverse-proxy access (for instance when an ssl reverse-proxy is&lt;br&gt;  used to decrypt https traffic). it is possible to disable the addition of the&lt;br&gt;  header for a known source address or network by adding the “except” keyword&lt;br&gt;  followed by the network address. in this case, any source ip matching the&lt;br&gt;  network will not cause an addition of this header. most common uses are with&lt;br&gt;  private networks or 127.0.0.1.&lt;/p&gt;
&lt;p&gt;  this option may be specified either in the frontend or in the backend. if at&lt;br&gt;  least one of them uses it, the header will be added. note that the backend’s&lt;br&gt;  setting of the header subargument takes precedence over the frontend’s if&lt;br&gt;  both are defined.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# original destination address
frontend www
    mode http
    option originalto except 127.0.0.1

# those servers want the ip address in x-client-dst
backend www
    mode http
    option originalto header x-client-dst
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option httpclose”, “option http-server-close”,&lt;br&gt;             “option forceclose”&lt;/p&gt;
&lt;p&gt;option persist&lt;br&gt;no option persist&lt;br&gt;  enable or disable forced persistence on down servers&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when an http request reaches a backend with a cookie which references a dead&lt;br&gt;  server, by default it is redispatched to another server. it is possible to&lt;br&gt;  force the request to be sent to the dead server first using “option persist”&lt;br&gt;  if absolutely needed. a common use case is when servers are under extreme&lt;br&gt;  load and spend their time flapping. in this case, the users would still be&lt;br&gt;  directed to the server they opened the session on, in the hope they would be&lt;br&gt;  correctly served. it is recommended to use “option redispatch” in conjunction&lt;br&gt;  with this option so that in the event it would not be possible to connect to&lt;br&gt;  the server at all (server definitely dead), the client would finally be&lt;br&gt;  redirected to another valid server.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option redispatch”, “retries”, “force-persist”&lt;/p&gt;
&lt;p&gt;option pgsql-check [ user &lt;username&gt; ]&lt;br&gt;  use postgresql health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;username&gt; this is the username which will be used when connecting to&lt;br&gt;               postgresql server.&lt;/username&gt;&lt;/username&gt;&lt;/p&gt;
&lt;p&gt;  the check sends a postgresql startupmessage and waits for either&lt;br&gt;  authentication request or errorresponse message. it is a basic but useful&lt;br&gt;  test which does not produce error nor aborted connect on the server.&lt;br&gt;  this check is identical with the “mysql-check”.&lt;/p&gt;
&lt;p&gt;  see also: “option httpchk”&lt;/p&gt;
&lt;p&gt;option prefer-last-server&lt;br&gt;no option prefer-last-server&lt;br&gt;  allow multiple load balanced requests to remain on the same server&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when the load balancing algorithm in use is not deterministic, and a previous&lt;br&gt;  request was sent to a server to which haproxy still holds a connection, it is&lt;br&gt;  sometimes desirable that subsequent requests on a same session go to the same&lt;br&gt;  server as much as possible. note that this is different from persistence, as&lt;br&gt;  we only indicate a preference which haproxy tries to apply without any form&lt;br&gt;  of warranty. the real use is for keep-alive connections sent to servers. when&lt;br&gt;  this option is used, haproxy will try to reuse the same connection that is&lt;br&gt;  attached to the server instead of rebalancing to another server, causing a&lt;br&gt;  close of the connection. this can make sense for static file servers. it does&lt;br&gt;  not make much sense to use this in combination with hashing algorithms. note,&lt;br&gt;  haproxy already automatically tries to stick to a server which sends a 401 or&lt;br&gt;  to a proxy which sends a 407 (authentication required). this is mandatory for&lt;br&gt;  use with the broken ntlm authentication challenge, and significantly helps in&lt;br&gt;  troubleshooting some faulty applications. option prefer-last-server might be&lt;br&gt;  desirable in these environments as well, to avoid redistributing the traffic&lt;br&gt;  after every other response.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also: “option http-keep-alive”&lt;/p&gt;
&lt;p&gt;option redispatch&lt;br&gt;option redispatch &lt;interval&gt;&lt;br&gt;no option redispatch&lt;br&gt;  enable or disable session redistribution in case of connection failure&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;interval&gt; the optional integer value that controls how often redispatches&lt;br&gt;               occur when retrying connections. positive value p indicates a&lt;br&gt;               redispatch is desired on every pth retry, and negative value&lt;br&gt;               n indicate a redispath is desired on the nth retry prior to the&lt;br&gt;               last retry. for example, the default of -1 preserves the&lt;br&gt;               historical behaviour of redispatching on the last retry, a&lt;br&gt;               positive value of 1 would indicate a redispatch on every retry,&lt;br&gt;               and a positive value of 3 would indicate a redispatch on every&lt;br&gt;               third retry. you can disable redispatches with a value of 0.&lt;/interval&gt;&lt;/interval&gt;&lt;/p&gt;
&lt;p&gt;  in http mode, if a server designated by a cookie is down, clients may&lt;br&gt;  definitely stick to it because they cannot flush the cookie, so they will not&lt;br&gt;  be able to access the service anymore.&lt;/p&gt;
&lt;p&gt;  specifying “option redispatch” will allow the proxy to break their&lt;br&gt;  persistence and redistribute them to a working server.&lt;/p&gt;
&lt;p&gt;  it also allows to retry connections to another server in case of multiple&lt;br&gt;  connection failures. of course, it requires having “retries” set to a nonzero&lt;br&gt;  value.&lt;/p&gt;
&lt;p&gt;  this form is the preferred form, which replaces both the “redispatch” and&lt;br&gt;  “redisp” keywords.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “redispatch”, “retries”, “force-persist”&lt;/p&gt;
&lt;p&gt;option redis-check&lt;br&gt;  use redis health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  it is possible to test that the server correctly talks redis protocol instead&lt;br&gt;  of just testing that it accepts the tcp connection. when this option is set,&lt;br&gt;  a ping redis command is sent to the server, and the response is analyzed to&lt;br&gt;  find the “+pong” response message.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option redis-check&lt;/p&gt;
&lt;p&gt;  see also : “option httpchk”&lt;/p&gt;
&lt;p&gt;option smtpchk&lt;br&gt;option smtpchk &lt;hello&gt; &lt;domain&gt;&lt;br&gt;  use smtp health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;hello&gt;   is an optional argument. it is the “hello” command to use. it can&lt;br&gt;              be either “helo” (for smtp) or “ehlo” (for estmp). all other&lt;br&gt;              values will be turned into the default command (“helo”).&lt;/hello&gt;&lt;/domain&gt;&lt;/hello&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;domain&amp;gt;  is the domain name to present to the server. it may only be
          specified (and is mandatory) if the hello command has been
          specified. by default, &amp;quot;localhost&amp;quot; is used.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when “option smtpchk” is set, the health checks will consist in tcp&lt;br&gt;  connections followed by an smtp command. by default, this command is&lt;br&gt;  “helo localhost”. the server’s return code is analyzed and only return codes&lt;br&gt;  starting with a “2” will be considered as valid. all other responses,&lt;br&gt;  including a lack of response will constitute an error and will indicate a&lt;br&gt;  dead server.&lt;/p&gt;
&lt;p&gt;  this test is meant to be used with smtp servers or relays. depending on the&lt;br&gt;  request, it is possible that some servers do not log each connection attempt,&lt;br&gt;  so you may want to experiment to improve the behaviour. using telnet on port&lt;br&gt;  25 is often easier than adjusting the configuration.&lt;/p&gt;
&lt;p&gt;  most often, an incoming smtp server needs to see the client’s ip address for&lt;br&gt;  various purposes, including spam filtering, anti-spoofing and logging. when&lt;br&gt;  possible, it is often wise to masquerade the client’s ip address when&lt;br&gt;  connecting to the server using the “usesrc” argument of the “source” keyword,&lt;br&gt;  which requires the cttproxy feature to be compiled in.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option smtpchk helo mydomain.org&lt;/p&gt;
&lt;p&gt;  see also : “option httpchk”, “source”&lt;/p&gt;
&lt;p&gt;option socket-stats&lt;br&gt;no option socket-stats&lt;/p&gt;
&lt;p&gt;  enable or disable collecting &amp;amp; providing separate statistics for each socket.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;/p&gt;
&lt;p&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;option splice-auto&lt;br&gt;no option splice-auto&lt;br&gt;  enable or disable automatic kernel acceleration on sockets in both directions&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when this option is enabled either on a frontend or on a backend, haproxy&lt;br&gt;  will automatically evaluate the opportunity to use kernel tcp splicing to&lt;br&gt;  forward data between the client and the server, in either direction. haproxy&lt;br&gt;  uses heuristics to estimate if kernel splicing might improve performance or&lt;br&gt;  not. both directions are handled independently. note that the heuristics used&lt;br&gt;  are not much aggressive in order to limit excessive use of splicing. this&lt;br&gt;  option requires splicing to be enabled at compile time, and may be globally&lt;br&gt;  disabled with the global option “nosplice”. since splice uses pipes, using it&lt;br&gt;  requires that there are enough spare pipes.&lt;/p&gt;
&lt;p&gt;  important note: kernel-based tcp splicing is a linux-specific feature which&lt;br&gt;  first appeared in kernel 2.6.25. it offers kernel-based acceleration to&lt;br&gt;  transfer data between sockets without copying these data to user-space, thus&lt;br&gt;  providing noticeable performance gains and cpu cycles savings. since many&lt;br&gt;  early implementations are buggy, corrupt data and/or are inefficient, this&lt;br&gt;  feature is not enabled by default, and it should be used with extreme care.&lt;br&gt;  while it is not possible to detect the correctness of an implementation,&lt;br&gt;  2.6.29 is the first version offering a properly working implementation. in&lt;br&gt;  case of doubt, splicing may be globally disabled using the global “nosplice”&lt;br&gt;  keyword.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option splice-auto&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option splice-request”, “option splice-response”, and global&lt;br&gt;             options “nosplice” and “maxpipes”&lt;/p&gt;
&lt;p&gt;option splice-request&lt;br&gt;no option splice-request&lt;br&gt;  enable or disable automatic kernel acceleration on sockets for requests&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when this option is enabled either on a frontend or on a backend, haproxy&lt;br&gt;  will use kernel tcp splicing whenever possible to forward data going from&lt;br&gt;  the client to the server. it might still use the recv/send scheme if there&lt;br&gt;  are no spare pipes left. this option requires splicing to be enabled at&lt;br&gt;  compile time, and may be globally disabled with the global option “nosplice”.&lt;br&gt;  since splice uses pipes, using it requires that there are enough spare pipes.&lt;/p&gt;
&lt;p&gt;  important note: see “option splice-auto” for usage limitations.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option splice-request&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option splice-auto”, “option splice-response”, and global options&lt;br&gt;             “nosplice” and “maxpipes”&lt;/p&gt;
&lt;p&gt;option splice-response&lt;br&gt;no option splice-response&lt;br&gt;  enable or disable automatic kernel acceleration on sockets for responses&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when this option is enabled either on a frontend or on a backend, haproxy&lt;br&gt;  will use kernel tcp splicing whenever possible to forward data going from&lt;br&gt;  the server to the client. it might still use the recv/send scheme if there&lt;br&gt;  are no spare pipes left. this option requires splicing to be enabled at&lt;br&gt;  compile time, and may be globally disabled with the global option “nosplice”.&lt;br&gt;  since splice uses pipes, using it requires that there are enough spare pipes.&lt;/p&gt;
&lt;p&gt;  important note: see “option splice-auto” for usage limitations.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        option splice-response&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option splice-auto”, “option splice-request”, and global options&lt;br&gt;             “nosplice” and “maxpipes”&lt;/p&gt;
&lt;p&gt;option srvtcpka&lt;br&gt;no option srvtcpka&lt;br&gt;  enable or disable the sending of tcp keepalive packets on the server side&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when there is a firewall or any session-aware component between a client and&lt;br&gt;  a server, and when the protocol involves very long sessions with long idle&lt;br&gt;  periods (eg: remote desktops), there is a risk that one of the intermediate&lt;br&gt;  components decides to expire a session which has remained idle for too long.&lt;/p&gt;
&lt;p&gt;  enabling socket-level tcp keep-alives makes the system regularly send packets&lt;br&gt;  to the other end of the connection, leaving it active. the delay between&lt;br&gt;  keep-alive probes is controlled by the system only and depends both on the&lt;br&gt;  operating system and its tuning parameters.&lt;/p&gt;
&lt;p&gt;  it is important to understand that keep-alive packets are neither emitted nor&lt;br&gt;  received at the application level. it is only the network stacks which sees&lt;br&gt;  them. for this reason, even if one side of the proxy already uses keep-alives&lt;br&gt;  to maintain its connection alive, those keep-alive packets will not be&lt;br&gt;  forwarded to the other side of the proxy.&lt;/p&gt;
&lt;p&gt;  please note that this has nothing to do with http keep-alive.&lt;/p&gt;
&lt;p&gt;  using option “srvtcpka” enables the emission of tcp keep-alive probes on the&lt;br&gt;  server side of a connection, which should help when session expirations are&lt;br&gt;  noticed between haproxy and a server.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option clitcpka”, “option tcpka”&lt;/p&gt;
&lt;p&gt;option ssl-hello-chk&lt;br&gt;  use sslv3 client hello health checks for server testing&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when some ssl-based protocols are relayed in tcp mode through haproxy, it is&lt;br&gt;  possible to test that the server correctly talks ssl instead of just testing&lt;br&gt;  that it accepts the tcp connection. when “option ssl-hello-chk” is set, pure&lt;br&gt;  sslv3 client hello messages are sent once the connection is established to&lt;br&gt;  the server, and the response is analyzed to find an ssl server hello message.&lt;br&gt;  the server is considered valid only when the response contains this server&lt;br&gt;  hello message.&lt;/p&gt;
&lt;p&gt;  all servers tested till there correctly reply to sslv3 client hello messages,&lt;br&gt;  and most servers tested do not even log the requests containing only hello&lt;br&gt;  messages, which is appreciable.&lt;/p&gt;
&lt;p&gt;  note that this check works even when ssl support was not built into haproxy&lt;br&gt;  because it forges the ssl message. when ssl support is available, it is best&lt;br&gt;  to use native ssl health checks instead of this one.&lt;/p&gt;
&lt;p&gt;  see also: “option httpchk”, “check-ssl”&lt;/p&gt;
&lt;p&gt;option tcp-check&lt;br&gt;  perform health checks using tcp-check send/expect sequences&lt;br&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               yes    |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  this health check method is intended to be combined with “tcp-check” command&lt;br&gt;  lists in order to support send/expect types of health check sequences.&lt;/p&gt;
&lt;p&gt;  tcp checks currently support 4 modes of operations :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- no &amp;quot;tcp-check&amp;quot; directive : the health check only consists in a connection
  attempt, which remains the default mode.

- &amp;quot;tcp-check send&amp;quot; or &amp;quot;tcp-check send-binary&amp;quot; only is mentioned : this is
  used to send a string along with a connection opening. with some
  protocols, it helps sending a &amp;quot;quit&amp;quot; message for example that prevents
  the server from logging a connection error for each health check. the
  check result will still be based on the ability to open the connection
  only.

- &amp;quot;tcp-check expect&amp;quot; only is mentioned : this is used to test a banner.
  the connection is opened and haproxy waits for the server to present some
  contents which must validate some rules. the check result will be based
  on the matching between the contents and the rules. this is suited for
  pop, imap, smtp, ftp, ssh, telnet.

- both &amp;quot;tcp-check send&amp;quot; and &amp;quot;tcp-check expect&amp;quot; are mentioned : this is
  used to test a hello-type protocol. haproxy sends a message, the server
  responds and its response is analysed. the check result will be based on
  the matching between the response contents and the rules. this is often
  suited for protocols which require a binding or a request/response model.
  ldap, mysql, redis and ssl are example of such protocols, though they
  already all have their dedicated checks with a deeper understanding of
  the respective protocols.
  in this mode, many questions may be sent and many answers may be
  analysed.

a fifth mode can be used to insert comments in different steps of the
script.

for each tcp-check rule you create, you can add a &amp;quot;comment&amp;quot; directive,
followed by a string. this string will be reported in the log and stderr
in debug mode. it is useful to make user-friendly error reporting.
the &amp;quot;comment&amp;quot; is of course optional.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# perform a pop check (analyse only server&amp;apos;s banner)
option tcp-check
tcp-check expect string +ok\ pop3\ ready comment pop\ protocol

# perform an imap check (analyse only server&amp;apos;s banner)
option tcp-check
tcp-check expect string *\ ok\ imap4\ ready comment imap\ protocol

# look for the redis master server after ensuring it speaks well
# redis protocol, then it exits properly.
# (send a command then analyse the response 3 times)
option tcp-check
tcp-check comment ping\ phase
tcp-check send ping\r\n
tcp-check expect +ponge
tcp-check comment role\ check
tcp-check send info\ replication\r\n
tcp-check expect string role:master
tcp-check comment quit\ phase
tcp-check send quit\r\n
tcp-check expect string +ok

forge a http request, then analyse the response
(send many headers before analyzing)
option tcp-check
tcp-check comment forge\ and\ send\ http\ request
tcp-check send head\ /\ http/1.1\r\n
tcp-check send host:\ www.mydomain.com\r\n
tcp-check send user-agent:\ haproxy\ tcpcheck\r\n
tcp-check send \r\n
tcp-check expect rstring http/1\..\ (2..|3..) comment check\ http\ response
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “tcp-check expect”, “tcp-check send”&lt;/p&gt;
&lt;p&gt;option tcp-smart-accept&lt;br&gt;no option tcp-smart-accept&lt;br&gt;  enable or disable the saving of one ack packet during the accept sequence&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |    no&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when an http connection request comes in, the system acknowledges it on&lt;br&gt;  behalf of haproxy, then the client immediately sends its request, and the&lt;br&gt;  system acknowledges it too while it is notifying haproxy about the new&lt;br&gt;  connection. haproxy then reads the request and responds. this means that we&lt;br&gt;  have one tcp ack sent by the system for nothing, because the request could&lt;br&gt;  very well be acknowledged by haproxy when it sends its response.&lt;/p&gt;
&lt;p&gt;  for this reason, in http mode, haproxy automatically asks the system to avoid&lt;br&gt;  sending this useless ack on platforms which support it (currently at least&lt;br&gt;  linux). it must not cause any problem, because the system will send it anyway&lt;br&gt;  after 40 ms if the response takes more time than expected to come.&lt;/p&gt;
&lt;p&gt;  during complex network debugging sessions, it may be desirable to disable&lt;br&gt;  this optimization because delayed acks can make troubleshooting more complex&lt;br&gt;  when trying to identify where packets are delayed. it is then possible to&lt;br&gt;  fall back to normal behaviour by specifying “no option tcp-smart-accept”.&lt;/p&gt;
&lt;p&gt;  it is also possible to force it for non-http proxies by simply specifying&lt;br&gt;  “option tcp-smart-accept”. for instance, it can make sense with some services&lt;br&gt;  such as smtp where the server speaks first.&lt;/p&gt;
&lt;p&gt;  it is recommended to avoid forcing this option in a defaults section. in case&lt;br&gt;  of doubt, consider setting it back to automatic values by prepending the&lt;br&gt;  “default” keyword before it, or disabling it using the “no” keyword.&lt;/p&gt;
&lt;p&gt;  see also : “option tcp-smart-connect”&lt;/p&gt;
&lt;p&gt;option tcp-smart-connect&lt;br&gt;no option tcp-smart-connect&lt;br&gt;  enable or disable the saving of one ack packet during the connect sequence&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  on certain systems (at least linux), haproxy can ask the kernel not to&lt;br&gt;  immediately send an empty ack upon a connection request, but to directly&lt;br&gt;  send the buffer request instead. this saves one packet on the network and&lt;br&gt;  thus boosts performance. it can also be useful for some servers, because they&lt;br&gt;  immediately get the request along with the incoming connection.&lt;/p&gt;
&lt;p&gt;  this feature is enabled when “option tcp-smart-connect” is set in a backend.&lt;br&gt;  it is not enabled by default because it makes network troubleshooting more&lt;br&gt;  complex.&lt;/p&gt;
&lt;p&gt;  it only makes sense to enable it with protocols where the client speaks first&lt;br&gt;  such as http. in other situations, if there is no data to send in place of&lt;br&gt;  the ack, a normal ack is sent.&lt;/p&gt;
&lt;p&gt;  if this option has been enabled in a “defaults” section, it can be disabled&lt;br&gt;  in a specific instance by prepending the “no” keyword before it.&lt;/p&gt;
&lt;p&gt;  see also : “option tcp-smart-accept”&lt;/p&gt;
&lt;p&gt;option tcpka&lt;br&gt;  enable or disable the sending of tcp keepalive packets on both sides&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  when there is a firewall or any session-aware component between a client and&lt;br&gt;  a server, and when the protocol involves very long sessions with long idle&lt;br&gt;  periods (eg: remote desktops), there is a risk that one of the intermediate&lt;br&gt;  components decides to expire a session which has remained idle for too long.&lt;/p&gt;
&lt;p&gt;  enabling socket-level tcp keep-alives makes the system regularly send packets&lt;br&gt;  to the other end of the connection, leaving it active. the delay between&lt;br&gt;  keep-alive probes is controlled by the system only and depends both on the&lt;br&gt;  operating system and its tuning parameters.&lt;/p&gt;
&lt;p&gt;  it is important to understand that keep-alive packets are neither emitted nor&lt;br&gt;  received at the application level. it is only the network stacks which sees&lt;br&gt;  them. for this reason, even if one side of the proxy already uses keep-alives&lt;br&gt;  to maintain its connection alive, those keep-alive packets will not be&lt;br&gt;  forwarded to the other side of the proxy.&lt;/p&gt;
&lt;p&gt;  please note that this has nothing to do with http keep-alive.&lt;/p&gt;
&lt;p&gt;  using option “tcpka” enables the emission of tcp keep-alive probes on both&lt;br&gt;  the client and server sides of a connection. note that this is meaningful&lt;br&gt;  only in “defaults” or “listen” sections. if this option is used in a&lt;br&gt;  frontend, only the client side will get keep-alives, and if this option is&lt;br&gt;  used in a backend, only the server side will get keep-alives. for this&lt;br&gt;  reason, it is strongly recommended to explicitly use “option clitcpka” and&lt;br&gt;  “option srvtcpka” when the configuration is split between frontends and&lt;br&gt;  backends.&lt;/p&gt;
&lt;p&gt;  see also : “option clitcpka”, “option srvtcpka”&lt;/p&gt;
&lt;p&gt;option tcplog&lt;br&gt;  enable advanced logging of tcp connections with session state and timers&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, the log output format is very poor, as it only contains the&lt;br&gt;  source and destination addresses, and the instance name. by specifying&lt;br&gt;  “option tcplog”, each log line turns into a much richer format including, but&lt;br&gt;  not limited to, the connection timers, the session status, the connections&lt;br&gt;  numbers, the frontend, backend and server name, and of course the source&lt;br&gt;  address and ports. this option is useful for pure tcp proxies in order to&lt;br&gt;  find which of the client or server disconnects or times out. for normal http&lt;br&gt;  proxies, it’s better to use “option httplog” which is even more complete.&lt;/p&gt;
&lt;p&gt;  this option may be set either in the frontend or the backend.&lt;/p&gt;
&lt;p&gt;  see also :  “option httplog”, and section 8 about logging.&lt;/p&gt;
&lt;p&gt;option transparent&lt;br&gt;no option transparent&lt;br&gt;  enable client-side transparent proxying&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  this option was introduced in order to provide layer 7 persistence to layer 3&lt;br&gt;  load balancers. the idea is to use the os’s ability to redirect an incoming&lt;br&gt;  connection for a remote address to a local process (here haproxy), and let&lt;br&gt;  this process know what address was initially requested. when this option is&lt;br&gt;  used, sessions without cookies will be forwarded to the original destination&lt;br&gt;  ip address of the incoming request (which should match that of another&lt;br&gt;  equipment), while requests with cookies will still be forwarded to the&lt;br&gt;  appropriate server.&lt;/p&gt;
&lt;p&gt;  note that contrary to a common belief, this option does not make haproxy&lt;br&gt;  present the client’s ip to the server when establishing the connection.&lt;/p&gt;
&lt;p&gt;  see also: the “usesrc” argument of the “source” keyword, and the&lt;br&gt;            “transparent” option of the “bind” keyword.&lt;/p&gt;
&lt;p&gt;external-check command &lt;command&gt;&lt;br&gt;  executable to run when performing an external-check&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;command&gt; is the external command to run&lt;/p&gt;
&lt;p&gt;  the arguments passed to the to the command are:&lt;/p&gt;
&lt;p&gt;  &lt;proxy_address&gt; &lt;proxy_port&gt; &lt;server_address&gt; &lt;server_port&gt;&lt;/server_port&gt;&lt;/server_address&gt;&lt;/proxy_port&gt;&lt;/proxy_address&gt;&lt;/p&gt;
&lt;p&gt;  the &lt;proxy_address&gt; and &lt;proxy_port&gt; are derived from the first listener&lt;br&gt;  that is either ipv4, ipv6 or a unix socket. in the case of a unix socket&lt;br&gt;  listener the proxy_address will be the path of the socket and the&lt;br&gt;  &lt;proxy_port&gt; will be the string “not_used”. in a backend section, it’s not&lt;br&gt;  possible to determine a listener, and both &lt;proxy_address&gt; and &lt;proxy_port&gt;&lt;br&gt;  will have the string value “not_used”.&lt;/proxy_port&gt;&lt;/proxy_address&gt;&lt;/proxy_port&gt;&lt;/proxy_port&gt;&lt;/proxy_address&gt;&lt;/p&gt;
&lt;p&gt;  some values are also provided through environment variables.&lt;/p&gt;
&lt;p&gt;  environment variables :&lt;br&gt;    haproxy_proxy_addr      the first bind address if available (or empty if not&lt;br&gt;                            applicable, for example in a “backend” section).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;haproxy_proxy_id        the backend id.

haproxy_proxy_name      the backend name.

haproxy_proxy_port      the first bind port if available (or empty if not
                        applicable, for example in a &amp;quot;backend&amp;quot; section or
                        for a unix socket).

haproxy_server_addr     the server address.

haproxy_server_curconn  the current number of connections on the server.

haproxy_server_id       the server id.

haproxy_server_maxconn  the server max connections.

haproxy_server_name     the server name.

haproxy_server_port     the server port if available (or empty for a unix
                        socket).

path                    the path environment variable used when executing
                        the command may be set using &amp;quot;external-check path&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  if the command executed and exits with a zero status then the check is&lt;br&gt;  considered to have passed, otherwise the check is considered to have&lt;br&gt;  failed.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        external-check command /bin/true&lt;/p&gt;
&lt;p&gt;  see also : “external-check”, “option external-check”, “external-check path”&lt;/p&gt;
&lt;p&gt;external-check path &lt;path&gt;&lt;/path&gt;&lt;br&gt;  the value of the path environment variable used when running an external-check&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;path&gt;&lt;/path&gt; is the path used when executing external command to run&lt;/p&gt;
&lt;p&gt;  the default path is “”.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        external-check path “/usr/bin:/bin”&lt;/p&gt;
&lt;p&gt;  see also : “external-check”, “option external-check”,&lt;br&gt;             “external-check command”&lt;/p&gt;
&lt;p&gt;persist rdp-cookie&lt;br&gt;persist rdp-cookie(&lt;name&gt;)&lt;br&gt;  enable rdp cookie-based persistence&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the optional name of the rdp cookie to check. if omitted, the&lt;br&gt;              default cookie name “msts” will be used. there currently is no&lt;br&gt;              valid reason to change this name.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  this statement enables persistence based on an rdp cookie. the rdp cookie&lt;br&gt;  contains all information required to find the server in the list of known&lt;br&gt;  servers. so when this option is set in the backend, the request is analysed&lt;br&gt;  and if an rdp cookie is found, it is decoded. if it matches a known server&lt;br&gt;  which is still up (or if “option persist” is set), then the connection is&lt;br&gt;  forwarded to this server.&lt;/p&gt;
&lt;p&gt;  note that this only makes sense in a tcp backend, but for this to work, the&lt;br&gt;  frontend must have waited long enough to ensure that an rdp cookie is present&lt;br&gt;  in the request buffer. this is the same requirement as with the “rdp-cookie”&lt;br&gt;  load-balancing method. thus it is highly recommended to put all statements in&lt;br&gt;  a single “listen” section.&lt;/p&gt;
&lt;p&gt;  also, it is important to understand that the terminal server will emit this&lt;br&gt;  rdp cookie only if it is configured for “token redirection mode”, which means&lt;br&gt;  that the “ip address redirection” option is disabled.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        listen tse-farm&lt;br&gt;            bind :3389&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wait up to 5s for an rdp cookie in the request
tcp-request inspect-delay 5s
tcp-request content accept if rdp_cookie
# apply rdp cookie persistence
persist rdp-cookie
# if server is unknown, let&amp;apos;s balance on the same cookie.
# alternatively, &amp;quot;balance leastconn&amp;quot; may be useful too.
balance rdp-cookie
server srv1 1.1.1.1:3389
server srv2 1.1.1.2:3389
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “balance rdp-cookie”, “tcp-request”, the “req_rdp_cookie” acl and&lt;br&gt;  the rdp_cookie pattern fetch function.&lt;/p&gt;
&lt;p&gt;rate-limit sessions &lt;rate&gt;&lt;br&gt;  set a limit on the number of new sessions accepted per second on a frontend&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;rate&gt;    the &lt;rate&gt; parameter is an integer designating the maximum number&lt;br&gt;              of new sessions per second to accept on the frontend.&lt;/rate&gt;&lt;/rate&gt;&lt;/rate&gt;&lt;/p&gt;
&lt;p&gt;  when the frontend reaches the specified number of new sessions per second, it&lt;br&gt;  stops accepting new connections until the rate drops below the limit again.&lt;br&gt;  during this time, the pending sessions will be kept in the socket’s backlog&lt;br&gt;  (in system buffers) and haproxy will not even be aware that sessions are&lt;br&gt;  pending. when applying very low limit on a highly loaded service, it may make&lt;br&gt;  sense to increase the socket’s backlog using the “backlog” keyword.&lt;/p&gt;
&lt;p&gt;  this feature is particularly efficient at blocking connection-based attacks&lt;br&gt;  or service abuse on fragile servers. since the session rate is measured every&lt;br&gt;  millisecond, it is extremely accurate. also, the limit applies immediately,&lt;br&gt;  no delay is needed at all to detect the threshold.&lt;/p&gt;
&lt;p&gt;  example : limit the connection rate on smtp to 10 per second max&lt;br&gt;        listen smtp&lt;br&gt;            mode tcp&lt;br&gt;            bind :25&lt;br&gt;            rate-limit sessions 10&lt;br&gt;            server 127.0.0.1:1025&lt;/p&gt;
&lt;p&gt;  note : when the maximum rate is reached, the frontend’s status is not changed&lt;br&gt;         but its sockets appear as “waiting” in the statistics if the&lt;br&gt;         “socket-stats” option is enabled.&lt;/p&gt;
&lt;p&gt;  see also : the “backlog” keyword and the “fe_sess_rate” acl criterion.&lt;/p&gt;
&lt;p&gt;redirect location &lt;loc&gt; [code &lt;code&gt;] &lt;option&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;redirect prefix   &lt;pfx&gt; [code &lt;code&gt;] &lt;option&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;redirect scheme   &lt;sch&gt; [code &lt;code&gt;] &lt;option&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;  return an http redirection if/unless a condition is matched&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;/condition&gt;&lt;/option&gt;&lt;/code&gt;&lt;/sch&gt;&lt;/condition&gt;&lt;/option&gt;&lt;/code&gt;&lt;/pfx&gt;&lt;/condition&gt;&lt;/option&gt;&lt;/code&gt;&lt;/loc&gt;&lt;/p&gt;
&lt;p&gt;  if/unless the condition is matched, the http request will lead to a redirect&lt;br&gt;  response. if no condition is specified, the redirect applies unconditionally.&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;loc&gt;     with “redirect location”, the exact value in &lt;loc&gt; is placed into&lt;br&gt;              the http “location” header. when used in an “http-request” rule,&lt;br&gt;              &lt;loc&gt; value follows the log-format rules and can include some&lt;br&gt;              dynamic values (see custom log format in section 8.2.4).&lt;/loc&gt;&lt;/loc&gt;&lt;/loc&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;pfx&amp;gt;     with &amp;quot;redirect prefix&amp;quot;, the &amp;quot;location&amp;quot; header is built from the
          concatenation of &amp;lt;pfx&amp;gt; and the complete uri path, including the
          query string, unless the &amp;quot;drop-query&amp;quot; option is specified (see
          below). as a special case, if &amp;lt;pfx&amp;gt; equals exactly &amp;quot;/&amp;quot;, then
          nothing is inserted before the original uri. it allows one to
          redirect to the same url (for instance, to insert a cookie). when
          used in an &amp;quot;http-request&amp;quot; rule, &amp;lt;pfx&amp;gt; value follows the log-format
          rules and can include some dynamic values (see custom log format
          in section 8.2.4).

&amp;lt;sch&amp;gt;     with &amp;quot;redirect scheme&amp;quot;, then the &amp;quot;location&amp;quot; header is built by
          concatenating &amp;lt;sch&amp;gt; with &amp;quot;://&amp;quot; then the first occurrence of the
          &amp;quot;host&amp;quot; header, and then the uri path, including the query string
          unless the &amp;quot;drop-query&amp;quot; option is specified (see below). if no
          path is found or if the path is &amp;quot;*&amp;quot;, then &amp;quot;/&amp;quot; is used instead. if
          no &amp;quot;host&amp;quot; header is found, then an empty host component will be
          returned, which most recent browsers interpret as redirecting to
          the same host. this directive is mostly used to redirect http to
          https. when used in an &amp;quot;http-request&amp;quot; rule, &amp;lt;sch&amp;gt; value follows
          the log-format rules and can include some dynamic values (see
          custom log format in section 8.2.4).

&amp;lt;code&amp;gt;    the code is optional. it indicates which type of http redirection
          is desired. only codes 301, 302, 303, 307 and 308 are supported,
          with 302 used by default if no code is specified. 301 means
          &amp;quot;moved permanently&amp;quot;, and a browser may cache the location. 302
          means &amp;quot;moved permanently&amp;quot; and means that the browser should not
          cache the redirection. 303 is equivalent to 302 except that the
          browser will fetch the location with a get method. 307 is just
          like 302 but makes it clear that the same method must be reused.
          likewise, 308 replaces 301 if the same method must be used.

&amp;lt;option&amp;gt;  there are several options which can be specified to adjust the
          expected behaviour of a redirection :

  - &amp;quot;drop-query&amp;quot;
    when this keyword is used in a prefix-based redirection, then the
    location will be set without any possible query-string, which is useful
    for directing users to a non-secure page for instance. it has no effect
    with a location-type redirect.

  - &amp;quot;append-slash&amp;quot;
    this keyword may be used in conjunction with &amp;quot;drop-query&amp;quot; to redirect
    users who use a url not ending with a &amp;apos;/&amp;apos; to the same one with the &amp;apos;/&amp;apos;.
    it can be useful to ensure that search engines will only see one url.
    for this, a return code 301 is preferred.

  - &amp;quot;set-cookie name[=value]&amp;quot;
    a &amp;quot;set-cookie&amp;quot; header will be added with name (and optionally &amp;quot;=value&amp;quot;)
    to the response. this is sometimes used to indicate that a user has
    been seen, for instance to protect against some types of dos. no other
    cookie option is added, so the cookie will be a session cookie. note
    that for a browser, a sole cookie name without an equal sign is
    different from a cookie with an equal sign.

  - &amp;quot;clear-cookie name[=]&amp;quot;
    a &amp;quot;set-cookie&amp;quot; header will be added with name (and optionally &amp;quot;=&amp;quot;), but
    with the &amp;quot;max-age&amp;quot; attribute set to zero. this will tell the browser to
    delete this cookie. it is useful for instance on logout pages. it is
    important to note that clearing the cookie &amp;quot;name&amp;quot; will not remove a
    cookie set with &amp;quot;name=value&amp;quot;. you have to clear the cookie &amp;quot;name=&amp;quot; for
    that, because the browser makes the difference.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example: move the login url only to https.&lt;br&gt;        acl clear      dst_port  80&lt;br&gt;        acl secure     dst_port  8080&lt;br&gt;        acl login_page url_beg   /login&lt;br&gt;        acl logout     url_beg   /logout&lt;br&gt;        acl uid_given  url_reg   /login?userid=[^&amp;amp;]+&lt;br&gt;        acl cookie_set hdr_sub(cookie) seen=1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redirect prefix   https://mysite.com set-cookie seen=1 if !cookie_set
redirect prefix   https://mysite.com           if login_page !secure
redirect prefix   http://mysite.com drop-query if login_page !uid_given
redirect location http://mysite.com/           if !login_page secure
redirect location / clear-cookie userid=       if logout
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example: send redirects for request for articles without a ‘/‘.&lt;br&gt;        acl missing_slash path_reg ^/article/[^/]*$&lt;br&gt;        redirect code 301 prefix / drop-query append-slash if missing_slash&lt;/p&gt;
&lt;p&gt;  example: redirect all http traffic to https when ssl is handled by haproxy.&lt;br&gt;        redirect scheme https if !{ ssl_fc }&lt;/p&gt;
&lt;p&gt;  example: append ‘www.’ prefix in front of all hosts not having it&lt;br&gt;        http-request redirect code 301 location www.%[hdr(host)]%[req.uri] \&lt;br&gt;          unless { hdr_beg(host) -i www }&lt;/p&gt;
&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;redisp (deprecated)&lt;br&gt;redispatch (deprecated)&lt;br&gt;  enable or disable session redistribution in case of connection failure&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  in http mode, if a server designated by a cookie is down, clients may&lt;br&gt;  definitely stick to it because they cannot flush the cookie, so they will not&lt;br&gt;  be able to access the service anymore.&lt;/p&gt;
&lt;p&gt;  specifying “redispatch” will allow the proxy to break their persistence and&lt;br&gt;  redistribute them to a working server.&lt;/p&gt;
&lt;p&gt;  it also allows to retry last connection to another server in case of multiple&lt;br&gt;  connection failures. of course, it requires having “retries” set to a nonzero&lt;br&gt;  value.&lt;/p&gt;
&lt;p&gt;  this form is deprecated, do not use it in any new configuration, use the new&lt;br&gt;  “option redispatch” instead.&lt;/p&gt;
&lt;p&gt;  see also : “option redispatch”&lt;/p&gt;
&lt;p&gt;reqadd  &lt;string&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;  add a header at the end of the http request&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;string&gt;  is the complete line to be added. any space or known delimiter&lt;br&gt;              must be escaped using a backslash (‘\’). please refer to section&lt;br&gt;              6 about http header manipulation for more information.&lt;/string&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a new line consisting in &lt;string&gt; followed by a line feed will be added after&lt;br&gt;  the last header of an http request.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses.&lt;/p&gt;
&lt;p&gt;  example : add “x-proto: ssl” to requests coming via port 81&lt;br&gt;     acl is-ssl  dst_port       81&lt;br&gt;     reqadd      x-proto:\ ssl  if is-ssl&lt;/p&gt;
&lt;p&gt;  see also: “rspadd”, section 6 about http header manipulation, and section 7&lt;br&gt;            about acls.&lt;/p&gt;
&lt;p&gt;reqallow  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqiallow &lt;search&gt; [{if | unless} &lt;cond&gt;] (ignore case)&lt;br&gt;  definitely allow an http request if a line matches a regular expression&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the&lt;br&gt;              “reqallow” keyword strictly matches case while “reqiallow”&lt;br&gt;              ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a request containing any line which matches extended regular expression&lt;br&gt;  &lt;search&gt; will mark the request as allowed, even if any later test would&lt;br&gt;  result in a deny. the test applies both to the request line and to request&lt;br&gt;  headers. keep in mind that urls in request line are case-sensitive while&lt;br&gt;  header names are not.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  it is easier, faster and more powerful to use acls to write access policies.&lt;br&gt;  reqdeny, reqallow and reqpass should be avoided in new designs.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# allow www.* but refuse *.local
reqiallow ^host:\ www\.
reqideny  ^host:\ .*\.local
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqdeny”, “block”, section 6 about http header manipulation, and&lt;br&gt;            section 7 about acls.&lt;/p&gt;
&lt;p&gt;reqdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqidel &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  delete all headers matching a regular expression in an http request&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the “reqdel”&lt;br&gt;              keyword strictly matches case while “reqidel” ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  any header line matching extended regular expression &lt;search&gt; in the request&lt;br&gt;  will be completely deleted. most common use of this is to remove unwanted&lt;br&gt;  and/or dangerous headers or cookies from a request before passing it to the&lt;br&gt;  next servers.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses. keep in mind that header names are not case-sensitive.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# remove x-forwarded-for header and server cookie
reqidel ^x-forwarded-for:.*
reqidel ^cookie:.*server=
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqadd”, “reqrep”, “rspdel”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;reqdeny  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqideny &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  deny an http request if a line matches a regular expression&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the&lt;br&gt;              “reqdeny” keyword strictly matches case while “reqideny” ignores&lt;br&gt;              case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a request containing any line which matches extended regular expression&lt;br&gt;  &lt;search&gt; will mark the request as denied, even if any later test would&lt;br&gt;  result in an allow. the test applies both to the request line and to request&lt;br&gt;  headers. keep in mind that urls in request line are case-sensitive while&lt;br&gt;  header names are not.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  a denied request will generate an “http 403 forbidden” response once the&lt;br&gt;  complete request has been parsed. this is consistent with what is practiced&lt;br&gt;  using acls.&lt;/p&gt;
&lt;p&gt;  it is easier, faster and more powerful to use acls to write access policies.&lt;br&gt;  reqdeny, reqallow and reqpass should be avoided in new designs.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# refuse *.local, then allow www.*
reqideny  ^host:\ .*\.local
reqiallow ^host:\ www\.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqallow”, “rspdeny”, “block”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;reqpass  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqipass &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  ignore any http request line matching a regular expression in next rules&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the&lt;br&gt;              “reqpass” keyword strictly matches case while “reqipass” ignores&lt;br&gt;              case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a request containing any line which matches extended regular expression&lt;br&gt;  &lt;search&gt; will skip next rules, without assigning any deny or allow verdict.&lt;br&gt;  the test applies both to the request line and to request headers. keep in&lt;br&gt;  mind that urls in request line are case-sensitive while header names are not.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  it is easier, faster and more powerful to use acls to write access policies.&lt;br&gt;  reqdeny, reqallow and reqpass should be avoided in new designs.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# refuse *.local, then allow www.*, but ignore &amp;quot;www.private.local&amp;quot;
reqipass  ^host:\ www.private\.local
reqideny  ^host:\ .*\.local
reqiallow ^host:\ www\.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqallow”, “reqdeny”, “block”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;reqrep  &lt;search&gt; &lt;string&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqirep &lt;search&gt; &lt;string&gt; [{if | unless} &lt;cond&gt;]   (ignore case)&lt;br&gt;  replace a regular expression with a string in an http request line&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the “reqrep”&lt;br&gt;              keyword strictly matches case while “reqirep” ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;string&amp;gt;  is the complete line to be added. any space or known delimiter
          must be escaped using a backslash (&amp;apos;\&amp;apos;). references to matched
          pattern groups are possible using the common \n form, with n
          being a single digit between 0 and 9\. please refer to section
          6 about http header manipulation for more information.

&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  any line matching extended regular expression &lt;search&gt; in the request (both&lt;br&gt;  the request line and header lines) will be completely replaced with &lt;string&gt;.&lt;br&gt;  most common use of this is to rewrite urls or domain names in “host” headers.&lt;/string&gt;&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses. note that for increased readability, it is suggested to add enough&lt;br&gt;  spaces between the request and the response. keep in mind that urls in&lt;br&gt;  request line are case-sensitive while header names are not.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# replace &amp;quot;/static/&amp;quot; with &amp;quot;/&amp;quot; at the beginning of any request path.
reqrep ^([^\ :]*)\ /static/(.*)     \1\ /\2
# replace &amp;quot;www.mydomain.com&amp;quot; with &amp;quot;www&amp;quot; in the host name.
reqirep ^host:\ www.mydomain.com   host:\ www
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqadd”, “reqdel”, “rsprep”, “tune.bufsize”, section 6 about&lt;br&gt;            http header manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;reqtarpit  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;reqitarpit &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  tarpit an http request containing a line matching a regular expression&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              request line. this is an extended regular expression. parenthesis&lt;br&gt;              grouping is supported and no preliminary backslash is required.&lt;br&gt;              any space or known delimiter must be escaped using a backslash&lt;br&gt;              (‘\’). the pattern applies to a full line at a time. the&lt;br&gt;              “reqtarpit” keyword strictly matches case while “reqitarpit”&lt;br&gt;              ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a request containing any line which matches extended regular expression&lt;br&gt;  &lt;search&gt; will be tarpitted, which means that it will connect to nowhere, will&lt;br&gt;  be kept open for a pre-defined time, then will return an http error 500 so&lt;br&gt;  that the attacker does not suspect it has been tarpitted. the status 500 will&lt;br&gt;  be reported in the logs, but the completion flags will indicate “pt”. the&lt;br&gt;  delay is defined by “timeout tarpit”, or “timeout connect” if the former is&lt;br&gt;  not set.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  the goal of the tarpit is to slow down robots attacking servers with&lt;br&gt;  identifiable requests. many robots limit their outgoing number of connections&lt;br&gt;  and stay connected waiting for a reply which can take several minutes to&lt;br&gt;  come. depending on the environment and attack, it may be particularly&lt;br&gt;  efficient at reducing the load on the network and firewalls.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ignore user-agents reporting any flavour of &amp;quot;mozilla&amp;quot; or &amp;quot;msie&amp;quot;, but
# block all others.
reqipass   ^user-agent:\.*(mozilla|msie)
reqitarpit ^user-agent:

# block bad guys
acl badguys src 10.1.0.3 172.16.13.20/28
reqitarpit . if badguys
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqallow”, “reqdeny”, “reqpass”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;retries &lt;value&gt;&lt;br&gt;  set the number of retries to perform on a server after a connection failure&lt;br&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;value&gt;   is the number of times a connection attempt should be retried on&lt;br&gt;              a server when a connection either is refused or times out. the&lt;br&gt;              default value is 3.&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  it is important to understand that this value applies to the number of&lt;br&gt;  connection attempts, not full requests. when a connection has effectively&lt;br&gt;  been established to a server, there will be no more retry.&lt;/p&gt;
&lt;p&gt;  in order to avoid immediate reconnections to a server which is restarting,&lt;br&gt;  a turn-around timer of min(“timeout connect”, one second) is applied before&lt;br&gt;  a retry occurs.&lt;/p&gt;
&lt;p&gt;  when “option redispatch” is set, the last retry may be performed on another&lt;br&gt;  server even if a cookie references a different server.&lt;/p&gt;
&lt;p&gt;  see also : “option redispatch”&lt;/p&gt;
&lt;p&gt;rspadd &lt;string&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;  add a header at the end of the http response&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;string&gt;  is the complete line to be added. any space or known delimiter&lt;br&gt;              must be escaped using a backslash (‘\’). please refer to section&lt;br&gt;              6 about http header manipulation for more information.&lt;/string&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a new line consisting in &lt;string&gt; followed by a line feed will be added after&lt;br&gt;  the last header of an http response.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses.&lt;/p&gt;
&lt;p&gt;  see also: “reqadd”, section 6 about http header manipulation, and section 7&lt;br&gt;            about acls.&lt;/p&gt;
&lt;p&gt;rspdel  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;rspidel &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  delete all headers matching a regular expression in an http response&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              response line. this is an extended regular expression, so&lt;br&gt;              parenthesis grouping is supported and no preliminary backslash&lt;br&gt;              is required. any space or known delimiter must be escaped using&lt;br&gt;              a backslash (‘\’). the pattern applies to a full line at a time.&lt;br&gt;              the “rspdel” keyword strictly matches case while “rspidel”&lt;br&gt;              ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  any header line matching extended regular expression &lt;search&gt; in the response&lt;br&gt;  will be completely deleted. most common use of this is to remove unwanted&lt;br&gt;  and/or sensitive headers or cookies from a response before passing it to the&lt;br&gt;  client.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses. keep in mind that header names are not case-sensitive.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# remove the server header from responses
rspidel ^server:.*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “rspadd”, “rsprep”, “reqdel”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;rspdeny  &lt;search&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;rspideny &lt;search&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  block an http response if a line matches a regular expression&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              response line. this is an extended regular expression, so&lt;br&gt;              parenthesis grouping is supported and no preliminary backslash&lt;br&gt;              is required. any space or known delimiter must be escaped using&lt;br&gt;              a backslash (‘\’). the pattern applies to a full line at a time.&lt;br&gt;              the “rspdeny” keyword strictly matches case while “rspideny”&lt;br&gt;              ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a response containing any line which matches extended regular expression&lt;br&gt;  &lt;search&gt; will mark the request as denied. the test applies both to the&lt;br&gt;  response line and to response headers. keep in mind that header names are not&lt;br&gt;  case-sensitive.&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  main use of this keyword is to prevent sensitive information leak and to&lt;br&gt;  block the response before it reaches the client. if a response is denied, it&lt;br&gt;  will be replaced with an http 502 error so that the client never retrieves&lt;br&gt;  any sensitive data.&lt;/p&gt;
&lt;p&gt;  it is easier, faster and more powerful to use acls to write access policies.&lt;br&gt;  rspdeny should be avoided in new designs.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ensure that no content type matching ms-word will leak
rspideny  ^content-type:\.*/ms-word
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “reqdeny”, “acl”, “block”, section 6 about http header manipulation&lt;br&gt;            and section 7 about acls.&lt;/p&gt;
&lt;p&gt;rsprep  &lt;search&gt; &lt;string&gt; [{if | unless} &lt;cond&gt;]&lt;br&gt;rspirep &lt;search&gt; &lt;string&gt; [{if | unless} &lt;cond&gt;]  (ignore case)&lt;br&gt;  replace a regular expression with a string in an http response line&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;search&gt;  is the regular expression applied to http headers and to the&lt;br&gt;              response line. this is an extended regular expression, so&lt;br&gt;              parenthesis grouping is supported and no preliminary backslash&lt;br&gt;              is required. any space or known delimiter must be escaped using&lt;br&gt;              a backslash (‘\’). the pattern applies to a full line at a time.&lt;br&gt;              the “rsprep” keyword strictly matches case while “rspirep”&lt;br&gt;              ignores case.&lt;/search&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/search&gt;&lt;/cond&gt;&lt;/string&gt;&lt;/search&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;string&amp;gt;  is the complete line to be added. any space or known delimiter
          must be escaped using a backslash (&amp;apos;\&amp;apos;). references to matched
          pattern groups are possible using the common \n form, with n
          being a single digit between 0 and 9\. please refer to section
          6 about http header manipulation for more information.

&amp;lt;cond&amp;gt;    is an optional matching condition built from acls. it makes it
          possible to ignore this rule when other conditions are not met.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  any line matching extended regular expression &lt;search&gt; in the response (both&lt;br&gt;  the response line and header lines) will be completely replaced with&lt;br&gt;  &lt;string&gt;. most common use of this is to rewrite location headers.&lt;/string&gt;&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  header transformations only apply to traffic which passes through haproxy,&lt;br&gt;  and not to traffic generated by haproxy, such as health-checks or error&lt;br&gt;  responses. note that for increased readability, it is suggested to add enough&lt;br&gt;  spaces between the request and the response. keep in mind that header names&lt;br&gt;  are not case-sensitive.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# replace &amp;quot;location: 127.0.0.1:8080&amp;quot; with &amp;quot;location: www.mydomain.com&amp;quot;
rspirep ^location:\ 127.0.0.1:8080    location:\ www.mydomain.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “rspadd”, “rspdel”, “reqrep”, section 6 about http header&lt;br&gt;            manipulation, and section 7 about acls.&lt;/p&gt;
&lt;p&gt;server &lt;name&gt; &lt;address&gt;[:[port]] [param*]&lt;br&gt;  declare a server in a backend&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the internal name assigned to this server. this name will&lt;br&gt;              appear in logs and alerts.  if “http-send-name-header” is&lt;br&gt;              set, it will be added to the request header sent to the server.&lt;/name&gt;&lt;/address&gt;&lt;/name&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;address&amp;gt; is the ipv4 or ipv6 address of the server. alternatively, a
          resolvable hostname is supported, but this name will be resolved
          during start-up. address &amp;quot;0.0.0.0&amp;quot; or &amp;quot;*&amp;quot; has a special meaning.
          it indicates that the connection will be forwarded to the same ip
          address as the one from the client connection. this is useful in
          transparent proxy architectures where the client&amp;apos;s connection is
          intercepted and haproxy must forward to the original destination
          address. this is more or less what the &amp;quot;transparent&amp;quot; keyword does
          except that with a server it&amp;apos;s possible to limit concurrency and
          to report statistics. optionally, an address family prefix may be
          used before the address to force the family regardless of the
          address format, which can be useful to specify a path to a unix
          socket with no slash (&amp;apos;/&amp;apos;). currently supported prefixes are :
                - &amp;apos;ipv4@&amp;apos;  -&amp;gt; address is always ipv4
                - &amp;apos;ipv6@&amp;apos;  -&amp;gt; address is always ipv6
                - &amp;apos;unix@&amp;apos;  -&amp;gt; address is a path to a local unix socket
                - &amp;apos;abns@&amp;apos;  -&amp;gt; address is in abstract namespace (linux only)
          you may want to reference some environment variables in the
          address parameter, see section 2.3 about environment
          variables.

&amp;lt;port&amp;gt;    is an optional port specification. if set, all connections will
          be sent to this port. if unset, the same port the client
          connected to will be used. the port may also be prefixed by a &amp;quot;+&amp;quot;
          or a &amp;quot;-&amp;quot;. in this case, the server&amp;apos;s port will be determined by
          adding this value to the client&amp;apos;s port.

&amp;lt;param*&amp;gt;  is a list of parameters for this server. the &amp;quot;server&amp;quot; keywords
          accepts an important number of options and has a complete section
          dedicated to it. please refer to section 5 for more details.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  examples :&lt;br&gt;        server first  10.1.1.1:1080 cookie first  check inter 1000&lt;br&gt;        server second 10.1.1.2:1080 cookie second check inter 1000&lt;br&gt;        server transp ipv4@&lt;br&gt;        server backup “${srv_backup}:1080” backup&lt;br&gt;        server www1_dc1 “${lan_dc1}.101:80”&lt;br&gt;        server www1_dc2 “${lan_dc2}.101:80”&lt;/p&gt;
&lt;p&gt;  see also: “default-server”, “http-send-name-header” and section 5 about&lt;br&gt;             server options&lt;/p&gt;
&lt;p&gt;source &lt;addr&gt;[:&lt;port&gt;] [usesrc { &lt;addr2&gt;[:&lt;port2&gt;] | client | clientip } ]&lt;br&gt;source &lt;addr&gt;[:&lt;port&gt;] [usesrc { &lt;addr2&gt;[:&lt;port2&gt;] | hdr_ip(&lt;hdr&gt;[,&lt;occ&gt;]) } ]&lt;br&gt;source &lt;addr&gt;[:&lt;port&gt;] [interface &lt;name&gt;]&lt;br&gt;  set the source address for outgoing connections&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;addr&gt;    is the ipv4 address haproxy will bind to before connecting to a&lt;br&gt;              server. this address is also used as a source for health checks.&lt;/addr&gt;&lt;/name&gt;&lt;/port&gt;&lt;/addr&gt;&lt;/occ&gt;&lt;/hdr&gt;&lt;/port2&gt;&lt;/addr2&gt;&lt;/port&gt;&lt;/addr&gt;&lt;/port2&gt;&lt;/addr2&gt;&lt;/port&gt;&lt;/addr&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          the default value of 0.0.0.0 means that the system will select
          the most appropriate address to reach its destination. optionally
          an address family prefix may be used before the address to force
          the family regardless of the address format, which can be useful
          to specify a path to a unix socket with no slash (&amp;apos;/&amp;apos;). currently
          supported prefixes are :
            - &amp;apos;ipv4@&amp;apos; -&amp;gt; address is always ipv4
            - &amp;apos;ipv6@&amp;apos; -&amp;gt; address is always ipv6
            - &amp;apos;unix@&amp;apos; -&amp;gt; address is a path to a local unix socket
            - &amp;apos;abns@&amp;apos; -&amp;gt; address is in abstract namespace (linux only)
          you may want to reference some environment variables in the address
          parameter, see section 2.3 about environment variables.

&amp;lt;port&amp;gt;    is an optional port. it is normally not needed but may be useful
          in some very specific contexts. the default value of zero means
          the system will select a free port. note that port ranges are not
          supported in the backend. if you want to force port ranges, you
          have to specify them on each &amp;quot;server&amp;quot; line.

&amp;lt;addr2&amp;gt;   is the ip address to present to the server when connections are
          forwarded in full transparent proxy mode. this is currently only
          supported on some patched linux kernels. when this address is
          specified, clients connecting to the server will be presented
          with this address, while health checks will still use the address
          &amp;lt;addr&amp;gt;.

&amp;lt;port2&amp;gt;   is the optional port to present to the server when connections
          are forwarded in full transparent proxy mode (see &amp;lt;addr2&amp;gt; above).
          the default value of zero means the system will select a free
          port.

&amp;lt;hdr&amp;gt;     is the name of a http header in which to fetch the ip to bind to.
          this is the name of a comma-separated header list which can
          contain multiple ip addresses. by default, the last occurrence is
          used. this is designed to work with the x-forwarded-for header
          and to automatically bind to the client&amp;apos;s ip address as seen
          by previous proxy, typically stunnel. in order to use another
          occurrence from the last one, please see the &amp;lt;occ&amp;gt; parameter
          below. when the header (or occurrence) is not found, no binding
          is performed so that the proxy&amp;apos;s default ip address is used. also
          keep in mind that the header name is case insensitive, as for any
          http header.

&amp;lt;occ&amp;gt;     is the occurrence number of a value to be used in a multi-value
          header. this is to be used in conjunction with &amp;quot;hdr_ip(&amp;lt;hdr&amp;gt;)&amp;quot;,
          in order to specify which occurrence to use for the source ip
          address. positive values indicate a position from the first
          occurrence, 1 being the first one. negative values indicate
          positions relative to the last one, -1 being the last one. this
          is helpful for situations where an x-forwarded-for header is set
          at the entry point of an infrastructure and must be used several
          proxy layers away. when this value is not specified, -1 is
          assumed. passing a zero here disables the feature.

&amp;lt;name&amp;gt;    is an optional interface name to which to bind to for outgoing
          traffic. on systems supporting this features (currently, only
          linux), this allows one to bind all traffic to the server to
          this interface even if it is not the one the system would select
          based on routing tables. this should be used with extreme care.
          note that using this option requires root privileges.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the “source” keyword is useful in complex environments where a specific&lt;br&gt;  address only is allowed to connect to the servers. it may be needed when a&lt;br&gt;  private address must be used through a public gateway for instance, and it is&lt;br&gt;  known that the system cannot determine the adequate source address by itself.&lt;/p&gt;
&lt;p&gt;  an extension which is available on certain patched linux kernels may be used&lt;br&gt;  through the “usesrc” optional keyword. it makes it possible to connect to the&lt;br&gt;  servers with an ip address which does not belong to the system itself. this&lt;br&gt;  is called “full transparent proxy mode”. for this to work, the destination&lt;br&gt;  servers have to route their traffic back to this address through the machine&lt;br&gt;  running haproxy, and ip forwarding must generally be enabled on this machine.&lt;/p&gt;
&lt;p&gt;  in this “full transparent proxy” mode, it is possible to force a specific ip&lt;br&gt;  address to be presented to the servers. this is not much used in fact. a more&lt;br&gt;  common use is to tell haproxy to present the client’s ip address. for this,&lt;br&gt;  there are two methods :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- present the client&amp;apos;s ip and port addresses. this is the most transparent
  mode, but it can cause problems when ip connection tracking is enabled on
  the machine, because a same connection may be seen twice with different
  states. however, this solution presents the huge advantage of not
  limiting the system to the 64k outgoing address+port couples, because all
  of the client ranges may be used.

- present only the client&amp;apos;s ip address and select a spare port. this
  solution is still quite elegant but slightly less transparent (downstream
  firewalls logs will not match upstream&amp;apos;s). it also presents the downside
  of limiting the number of concurrent connections to the usual 64k ports.
  however, since the upstream and downstream ports are different, local ip
  connection tracking on the machine will not be upset by the reuse of the
  same session.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  note that depending on the transparent proxy technology used, it may be&lt;br&gt;  required to force the source address. in fact, cttproxy version 2 requires an&lt;br&gt;  ip address in &lt;addr&gt; above, and does not support setting of “0.0.0.0” as the&lt;br&gt;  ip address because it creates nat entries which much match the exact outgoing&lt;br&gt;  address. tproxy version 4 and some other kernel patches which work in pure&lt;br&gt;  forwarding mode generally will not have this limitation.&lt;/addr&gt;&lt;/p&gt;
&lt;p&gt;  this option sets the default source for all servers in the backend. it may&lt;br&gt;  also be specified in a “defaults” section. finer source address specification&lt;br&gt;  is possible at the server level using the “source” server option. refer to&lt;br&gt;  section 5 for more information.&lt;/p&gt;
&lt;p&gt;  in order to work, “usesrc” requires root privileges.&lt;/p&gt;
&lt;p&gt;  examples :&lt;br&gt;        backend private&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # connect to the servers using our 192.168.1.200 source address
    source 192.168.1.200

backend transparent_ssl1
    # connect to the ssl farm from the client&amp;apos;s source address
    source 192.168.1.200 usesrc clientip

backend transparent_ssl2
    # connect to the ssl farm from the client&amp;apos;s source address and port
    # not recommended if ip conntrack is present on the local machine.
    source 192.168.1.200 usesrc client

backend transparent_ssl3
    # connect to the ssl farm from the client&amp;apos;s source address. it
    # is more conntrack-friendly.
    source 192.168.1.200 usesrc clientip

backend transparent_smtp
    # connect to the smtp farm from the client&amp;apos;s source address/port
    # with tproxy version 4.
    source 0.0.0.0 usesrc clientip

backend transparent_http
    # connect to the servers using the client&amp;apos;s ip as seen by previous
    # proxy.
    source 0.0.0.0 usesrc hdr_ip(x-forwarded-for,-1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : the “source” server option in section 5, the tproxy patches for&lt;br&gt;             the linux kernel on www.balabit.com, the “bind” keyword.&lt;/p&gt;
&lt;p&gt;srvtimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum inactivity time on the server side.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the server is expected to acknowledge or&lt;br&gt;  send data. in http mode, this timeout is particularly important to consider&lt;br&gt;  during the first phase of the server’s response, when it has to send the&lt;br&gt;  headers, as it directly represents the server’s processing time for the&lt;br&gt;  request. to find out what value to put there, it’s often good to start with&lt;br&gt;  what would be considered as unacceptable response times, then check the logs&lt;br&gt;  to observe the response time distribution, and adjust the value accordingly.&lt;/p&gt;
&lt;p&gt;  the value is specified in milliseconds by default, but can be in any other&lt;br&gt;  unit if the number is suffixed by the unit, as specified at the top of this&lt;br&gt;  document. in tcp mode (and to a lesser extent, in http mode), it is highly&lt;br&gt;  recommended that the client timeout remains equal to the server timeout in&lt;br&gt;  order to avoid complex situations to debug. whatever the expected server&lt;br&gt;  response times, it is a good practice to cover at least one or several tcp&lt;br&gt;  packet losses by specifying timeouts that are slightly above multiples of 3&lt;br&gt;  seconds (eg: 4 or 5 seconds minimum).&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of expired sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter is provided for compatibility but is currently deprecated.&lt;br&gt;  please use “timeout server” instead.&lt;/p&gt;
&lt;p&gt;  see also : “timeout server”, “timeout tunnel”, “timeout client” and&lt;br&gt;             “clitimeout”.&lt;/p&gt;
&lt;p&gt;stats admin { if | unless } &lt;cond&gt;&lt;br&gt;  enable statistics admin level if/unless a condition is matched&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;/cond&gt;&lt;/p&gt;
&lt;p&gt;  this statement enables the statistics admin level if/unless a condition is&lt;br&gt;  matched.&lt;/p&gt;
&lt;p&gt;  the admin level allows to enable/disable servers from the web interface. by&lt;br&gt;  default, statistics page is read-only for security reasons.&lt;/p&gt;
&lt;p&gt;  note : consider not using this feature in multi-process mode (nbproc &amp;gt; 1)&lt;br&gt;         unless you know what you do : memory is not shared between the&lt;br&gt;         processes, which can result in random behaviours.&lt;/p&gt;
&lt;p&gt;  currently, the post request is limited to the buffer size minus the reserved&lt;br&gt;  buffer space, which means that if the list of servers is too long, the&lt;br&gt;  request won’t be processed. it is recommended to alter few servers at a&lt;br&gt;  time.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# statistics admin level only for localhost
backend stats_localhost
    stats enable
    stats admin if localhost
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# statistics admin level always enabled because of the authentication
backend stats_auth
    stats enable
    stats auth  admin:admin123
    stats admin if true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# statistics admin level depends on the authenticated user
userlist stats-auth
    group admin    users admin
    user  admin    insecure-password admin123
    group readonly users haproxy
    user  haproxy  insecure-password haproxy

backend stats_auth
    stats enable
    acl auth       http_auth(stats-auth)
    acl auth_admin http_auth_group(stats-auth) admin
    stats http-request auth unless auth
    stats admin if auth_admin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats enable”, “stats auth”, “stats http-request”, “nbproc”,&lt;br&gt;             “bind-process”, section 3.4 about userlists and section 7 about&lt;br&gt;             acl usage.&lt;/p&gt;
&lt;p&gt;stats auth &lt;user&gt;:&lt;passwd&gt;&lt;br&gt;  enable statistics with authentication and grant access to an account&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;user&gt;    is a user name to grant access to&lt;/user&gt;&lt;/passwd&gt;&lt;/user&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;passwd&amp;gt;  is the cleartext password associated to this user
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  this statement enables statistics with default settings, and restricts access&lt;br&gt;  to declared users only. it may be repeated as many times as necessary to&lt;br&gt;  allow as many users as desired. when a user tries to access the statistics&lt;br&gt;  without a valid account, a “401 forbidden” response will be returned so that&lt;br&gt;  the browser asks the user to provide a valid user and password. the real&lt;br&gt;  which will be returned to the browser is configurable using “stats realm”.&lt;/p&gt;
&lt;p&gt;  since the authentication method is http basic authentication, the passwords&lt;br&gt;  circulate in cleartext on the network. thus, it was decided that the&lt;br&gt;  configuration file would also use cleartext passwords to remind the users&lt;br&gt;  that those ones should not be sensitive and not shared with any other account.&lt;/p&gt;
&lt;p&gt;  it is also possible to reduce the scope of the proxies which appear in the&lt;br&gt;  report using “stats scope”.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats enable”, “stats realm”, “stats scope”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats enable&lt;br&gt;  enable statistics reporting with default settings&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  this statement enables statistics reporting with default settings defined&lt;br&gt;  at build time. unless stated otherwise, these settings are used :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- stats uri   : /haproxy?stats
- stats realm : &amp;quot;haproxy statistics&amp;quot;
- stats auth  : no authentication
- stats scope : no restriction
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats realm”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats hide-version&lt;br&gt;  enable statistics and hide haproxy version reporting&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  by default, the stats page reports some useful status information along with&lt;br&gt;  the statistics. among them is haproxy’s version. however, it is generally&lt;br&gt;  considered dangerous to report precise version to anyone, as it can help them&lt;br&gt;  target known weaknesses with specific attacks. the “stats hide-version”&lt;br&gt;  statement removes the version from the statistics report. this is recommended&lt;br&gt;  for public sites or any site with a weak login/password.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats enable”, “stats realm”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats http-request { allow | deny | auth [realm &lt;realm&gt;] }&lt;br&gt;             [ { if | unless } &lt;condition&gt; ]&lt;br&gt;  access control for statistics&lt;/condition&gt;&lt;/realm&gt;&lt;/p&gt;
&lt;p&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                                no    |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  as “http-request”, these set of options allow to fine control access to&lt;br&gt;  statistics. each option may be followed by if/unless and acl.&lt;br&gt;  first option with matched condition (or option without condition) is final.&lt;br&gt;  for “deny” a 403 error will be returned, for “allow” normal processing is&lt;br&gt;  performed, for “auth” a 401/407 error code is returned so the client&lt;br&gt;  should be asked to enter a username and password.&lt;/p&gt;
&lt;p&gt;  there is no fixed limit to the number of http-request statements per&lt;br&gt;  instance.&lt;/p&gt;
&lt;p&gt;  see also : “http-request”, section 3.4 about userlists and section 7&lt;br&gt;             about acl usage.&lt;/p&gt;
&lt;p&gt;stats realm &lt;realm&gt;&lt;br&gt;  enable statistics and set authentication realm&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;realm&gt;   is the name of the http basic authentication realm reported to&lt;br&gt;              the browser. the browser uses it to display it in the pop-up&lt;br&gt;              inviting the user to enter a valid username and password.&lt;/realm&gt;&lt;/realm&gt;&lt;/p&gt;
&lt;p&gt;  the realm is read as a single word, so any spaces in it should be escaped&lt;br&gt;  using a backslash (‘\’).&lt;/p&gt;
&lt;p&gt;  this statement is useful only in conjunction with “stats auth” since it is&lt;br&gt;  only related to authentication.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats enable”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats refresh &lt;delay&gt;&lt;br&gt;  enable statistics with automatic refresh&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;delay&gt;   is the suggested refresh delay, specified in seconds, which will&lt;br&gt;              be returned to the browser consulting the report page. while the&lt;br&gt;              browser is free to apply any delay, it will generally respect it&lt;br&gt;              and refresh the page this every seconds. the refresh interval may&lt;br&gt;              be specified in any other non-default time unit, by suffixing the&lt;br&gt;              unit after the value, as explained at the top of this document.&lt;/delay&gt;&lt;/delay&gt;&lt;/p&gt;
&lt;p&gt;  this statement is useful on monitoring displays with a permanent page&lt;br&gt;  reporting the load balancer’s activity. when set, the html report page will&lt;br&gt;  include a link “refresh”/“stop refresh” so that the user can select whether&lt;br&gt;  he wants automatic refresh of the page or not.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats enable”, “stats realm”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats scope { &lt;name&gt; | “.” }&lt;br&gt;  enable statistics and limit access scope&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;    is the name of a listen, frontend or backend section to be&lt;br&gt;              reported. the special name “.” (a single dot) designates the&lt;br&gt;              section in which the statement appears.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  when this statement is specified, only the sections enumerated with this&lt;br&gt;  statement will appear in the report. all other ones will be hidden. this&lt;br&gt;  statement may appear as many times as needed if multiple sections need to be&lt;br&gt;  reported. please note that the name checking is performed as simple string&lt;br&gt;  comparisons, and that it is never checked that a give section name really&lt;br&gt;  exists.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats enable”, “stats realm”, “stats uri”&lt;/p&gt;
&lt;p&gt;stats show-desc [ &lt;desc&gt; ]&lt;br&gt;  enable reporting of a description on the statistics page.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;/desc&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;desc&amp;gt;    is an optional description to be reported. if unspecified, the
          description from global section is automatically used instead.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  this statement is useful for users that offer shared services to their&lt;br&gt;  customers, where node or description should be different for each customer.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.  by default description is not shown.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats show-desc master node for europe, asia, africa
    stats uri       /admin?stats
    stats refresh   5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “show-node”, “stats enable”, “stats uri” and “description” in&lt;br&gt;            global section.&lt;/p&gt;
&lt;p&gt;stats show-legends&lt;br&gt;  enable reporting additional information on the statistics page&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  enable reporting additional information on the statistics page :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- cap: capabilities (proxy)
- mode: one of tcp, http or health (proxy)
- id: snmp id (proxy, socket, server)
- ip (socket, server)
- cookie (backend, server)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.  default behaviour is not to show this information.&lt;/p&gt;
&lt;p&gt;  see also: “stats enable”, “stats uri”.&lt;/p&gt;
&lt;p&gt;stats show-node [ &lt;name&gt; ]&lt;br&gt;  enable reporting of a host name on the statistics page.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments:&lt;br&gt;    &lt;name&gt;    is an optional name to be reported. if unspecified, the&lt;br&gt;              node name from global section is automatically used instead.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  this statement is useful for users that offer shared services to their&lt;br&gt;  customers, where node or description might be different on a stats page&lt;br&gt;  provided for each customer.  default behaviour is not to show host name.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats show-node europe-1
    stats uri       /admin?stats
    stats refresh   5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “show-desc”, “stats enable”, “stats uri”, and “node” in global&lt;br&gt;            section.&lt;/p&gt;
&lt;p&gt;stats uri &lt;prefix&gt;&lt;br&gt;  enable statistics and define the uri prefix to access them&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;prefix&gt;  is the prefix of any uri which will be redirected to stats. this&lt;br&gt;              prefix may contain a question mark (‘?’) to indicate part of a&lt;br&gt;              query string.&lt;/prefix&gt;&lt;/prefix&gt;&lt;/p&gt;
&lt;p&gt;  the statistics uri is intercepted on the relayed traffic, so it appears as a&lt;br&gt;  page within the normal application. it is strongly advised to ensure that the&lt;br&gt;  selected uri will never appear in the application, otherwise it will never be&lt;br&gt;  possible to reach it in the application.&lt;/p&gt;
&lt;p&gt;  the default uri compiled in haproxy is “/haproxy?stats”, but this may be&lt;br&gt;  changed at build time, so it’s better to always explicitly specify it here.&lt;br&gt;  it is generally a good idea to include a question mark in the uri so that&lt;br&gt;  intermediate proxies refrain from caching the results. also, since any string&lt;br&gt;  beginning with the prefix will be accepted as a stats request, the question&lt;br&gt;  mark helps ensuring that no valid uri will begin with the same words.&lt;/p&gt;
&lt;p&gt;  it is sometimes very convenient to use “/“ as the uri prefix, and put that&lt;br&gt;  statement in a “listen” instance of its own. that makes it easy to dedicate&lt;br&gt;  an address or a port to statistics only.&lt;/p&gt;
&lt;p&gt;  though this statement alone is enough to enable statistics reporting, it is&lt;br&gt;  recommended to set all other settings in order to avoid relying on default&lt;br&gt;  unobvious parameters.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# public access (limited to this backend only)
backend public_www
    server srv1 192.168.0.1:80
    stats enable
    stats hide-version
    stats scope   .
    stats uri     /admin?stats
    stats realm   haproxy\ statistics
    stats auth    admin1:admin123
    stats auth    admin2:admin321

# internal monitoring access (unlimited)
backend private_monitoring
    stats enable
    stats uri     /admin?stats
    stats refresh 5s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stats auth”, “stats enable”, “stats realm”&lt;/p&gt;
&lt;p&gt;stick match &lt;pattern&gt; [table &lt;table&gt;] [{if | unless} &lt;cond&gt;]&lt;br&gt;  define a request pattern matching condition to stick a user to a server&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;/cond&gt;&lt;/table&gt;&lt;/pattern&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;pattern&gt;  is a sample expression rule as described in section 7.3. it&lt;br&gt;               describes what elements of the incoming request or connection&lt;br&gt;               will be analysed in the hope to find a matching entry in a&lt;br&gt;               stickiness table. this rule is mandatory.&lt;/pattern&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;    is an optional stickiness table name. if unspecified, the same
           backend&amp;apos;s table is used. a stickiness table is declared using
           the &amp;quot;stick-table&amp;quot; statement.

&amp;lt;cond&amp;gt;     is an optional matching condition. it makes it possible to match
           on a certain criterion only when other conditions are met (or
           not met). for instance, it could be used to match on a source ip
           address except when a request passes through a known proxy, in
           which case we&amp;apos;d match on a header containing that ip address.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  some protocols or applications require complex stickiness rules and cannot&lt;br&gt;  always simply rely on cookies nor hashing. the “stick match” statement&lt;br&gt;  describes a rule to extract the stickiness criterion from an incoming request&lt;br&gt;  or connection. see section 7 for a complete list of possible patterns and&lt;br&gt;  transformation rules.&lt;/p&gt;
&lt;p&gt;  the table has to be declared using the “stick-table” statement. it must be of&lt;br&gt;  a type compatible with the pattern. by default it is the one which is present&lt;br&gt;  in the same backend. it is possible to share a table with other backends by&lt;br&gt;  referencing it using the “table” keyword. if another table is referenced,&lt;br&gt;  the server’s id inside the backends are used. by default, all server ids&lt;br&gt;  start at 1 in each backend, so the server ordering is enough. but in case of&lt;br&gt;  doubt, it is highly recommended to force server ids using their “id” setting.&lt;/p&gt;
&lt;p&gt;  it is possible to restrict the conditions where a “stick match” statement&lt;br&gt;  will apply, using “if” or “unless” followed by a condition. see section 7 for&lt;br&gt;  acl based conditions.&lt;/p&gt;
&lt;p&gt;  there is no limit on the number of “stick match” statements. the first that&lt;br&gt;  applies and matches will cause the request to be directed to the same server&lt;br&gt;  as was used for the request which created the entry. that way, multiple&lt;br&gt;  matches can be used as fallbacks.&lt;/p&gt;
&lt;p&gt;  the stick rules are checked after the persistence cookies, so they will not&lt;br&gt;  affect stickiness if a cookie has already been used to select a server. that&lt;br&gt;  way, it becomes very easy to insert cookies and match on ip addresses in&lt;br&gt;  order to maintain stickiness between http and https.&lt;/p&gt;
&lt;p&gt;  note : consider not using this feature in multi-process mode (nbproc &amp;gt; 1)&lt;br&gt;         unless you know what you do : memory is not shared between the&lt;br&gt;         processes, which can result in random behaviours.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# forward smtp users to the same server they just used for pop in the
# last 30 minutes
backend pop
    mode tcp
    balance roundrobin
    stick store-request src
    stick-table type ip size 200k expire 30m
    server s1 192.168.1.1:110
    server s2 192.168.1.1:110

backend smtp
    mode tcp
    balance roundrobin
    stick match src table pop
    server s1 192.168.1.1:25
    server s2 192.168.1.1:25
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stick-table”, “stick on”, “nbproc”, “bind-process” and section 7&lt;br&gt;             about acls and samples fetching.&lt;/p&gt;
&lt;p&gt;stick on &lt;pattern&gt; [table &lt;table&gt;] [{if | unless} &lt;condition&gt;]&lt;br&gt;  define a request pattern to associate a user to a server&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;/condition&gt;&lt;/table&gt;&lt;/pattern&gt;&lt;/p&gt;
&lt;p&gt;  note : this form is exactly equivalent to “stick match” followed by&lt;br&gt;         “stick store-request”, all with the same arguments. please refer&lt;br&gt;         to both keywords for details. it is only provided as a convenience&lt;br&gt;         for writing more maintainable configurations.&lt;/p&gt;
&lt;p&gt;  note : consider not using this feature in multi-process mode (nbproc &amp;gt; 1)&lt;br&gt;         unless you know what you do : memory is not shared between the&lt;br&gt;         processes, which can result in random behaviours.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# the following form ...
stick on src table pop if !localhost

# ...is strictly equivalent to this one :
stick match src table pop if !localhost
stick store-request src table pop if !localhost

# use cookie persistence for http, and stick on source address for https as
# well as http without cookie. share the same table between both accesses.
backend http
    mode http
    balance roundrobin
    stick on src table https
    cookie srv insert indirect nocache
    server s1 192.168.1.1:80 cookie s1
    server s2 192.168.1.1:80 cookie s2

backend https
    mode tcp
    balance roundrobin
    stick-table type ip size 200k expire 30m
    stick on src
    server s1 192.168.1.1:443
    server s2 192.168.1.1:443
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stick match”, “stick store-request”, “nbproc” and “bind-process”.&lt;/p&gt;
&lt;p&gt;stick store-request &lt;pattern&gt; [table &lt;table&gt;] [{if | unless} &lt;condition&gt;]&lt;br&gt;  define a request pattern used to create an entry in a stickiness table&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;/condition&gt;&lt;/table&gt;&lt;/pattern&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;pattern&gt;  is a sample expression rule as described in section 7.3. it&lt;br&gt;               describes what elements of the incoming request or connection&lt;br&gt;               will be analysed, extracted and stored in the table once a&lt;br&gt;               server is selected.&lt;/pattern&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;    is an optional stickiness table name. if unspecified, the same
           backend&amp;apos;s table is used. a stickiness table is declared using
           the &amp;quot;stick-table&amp;quot; statement.

&amp;lt;cond&amp;gt;     is an optional storage condition. it makes it possible to store
           certain criteria only when some conditions are met (or not met).
           for instance, it could be used to store the source ip address
           except when the request passes through a known proxy, in which
           case we&amp;apos;d store a converted form of a header containing that ip
           address.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  some protocols or applications require complex stickiness rules and cannot&lt;br&gt;  always simply rely on cookies nor hashing. the “stick store-request” statement&lt;br&gt;  describes a rule to decide what to extract from the request and when to do&lt;br&gt;  it, in order to store it into a stickiness table for further requests to&lt;br&gt;  match it using the “stick match” statement. obviously the extracted part must&lt;br&gt;  make sense and have a chance to be matched in a further request. storing a&lt;br&gt;  client’s ip address for instance often makes sense. storing an id found in a&lt;br&gt;  url parameter also makes sense. storing a source port will almost never make&lt;br&gt;  any sense because it will be randomly matched. see section 7 for a complete&lt;br&gt;  list of possible patterns and transformation rules.&lt;/p&gt;
&lt;p&gt;  the table has to be declared using the “stick-table” statement. it must be of&lt;br&gt;  a type compatible with the pattern. by default it is the one which is present&lt;br&gt;  in the same backend. it is possible to share a table with other backends by&lt;br&gt;  referencing it using the “table” keyword. if another table is referenced,&lt;br&gt;  the server’s id inside the backends are used. by default, all server ids&lt;br&gt;  start at 1 in each backend, so the server ordering is enough. but in case of&lt;br&gt;  doubt, it is highly recommended to force server ids using their “id” setting.&lt;/p&gt;
&lt;p&gt;  it is possible to restrict the conditions where a “stick store-request”&lt;br&gt;  statement will apply, using “if” or “unless” followed by a condition. this&lt;br&gt;  condition will be evaluated while parsing the request, so any criteria can be&lt;br&gt;  used. see section 7 for acl based conditions.&lt;/p&gt;
&lt;p&gt;  there is no limit on the number of “stick store-request” statements, but&lt;br&gt;  there is a limit of 8 simultaneous stores per request or response. this&lt;br&gt;  makes it possible to store up to 8 criteria, all extracted from either the&lt;br&gt;  request or the response, regardless of the number of rules. only the 8 first&lt;br&gt;  ones which match will be kept. using this, it is possible to feed multiple&lt;br&gt;  tables at once in the hope to increase the chance to recognize a user on&lt;br&gt;  another protocol or access method. using multiple store-request rules with&lt;br&gt;  the same table is possible and may be used to find the best criterion to rely&lt;br&gt;  on, by arranging the rules by decreasing preference order. only the first&lt;br&gt;  extracted criterion for a given table will be stored. all subsequent store-&lt;br&gt;  request rules referencing the same table will be skipped and their acls will&lt;br&gt;  not be evaluated.&lt;/p&gt;
&lt;p&gt;  the “store-request” rules are evaluated once the server connection has been&lt;br&gt;  established, so that the table will contain the real server that processed&lt;br&gt;  the request.&lt;/p&gt;
&lt;p&gt;  note : consider not using this feature in multi-process mode (nbproc &amp;gt; 1)&lt;br&gt;         unless you know what you do : memory is not shared between the&lt;br&gt;         processes, which can result in random behaviours.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# forward smtp users to the same server they just used for pop in the
# last 30 minutes
backend pop
    mode tcp
    balance roundrobin
    stick store-request src
    stick-table type ip size 200k expire 30m
    server s1 192.168.1.1:110
    server s2 192.168.1.1:110

backend smtp
    mode tcp
    balance roundrobin
    stick match src table pop
    server s1 192.168.1.1:25
    server s2 192.168.1.1:25
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stick-table”, “stick on”, “nbproc”, “bind-process” and section 7&lt;br&gt;             about acls and sample fetching.&lt;/p&gt;
&lt;p&gt;stick-table type {ip | integer | string [len &lt;length&gt;] | binary [len &lt;length&gt;]}&lt;br&gt;            size &lt;size&gt; [expire &lt;expire&gt;] [nopurge] [peers &lt;peersect&gt;]&lt;br&gt;            [store &lt;data_type&gt;]*&lt;br&gt;  configure the stickiness table for the current section&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;/data_type&gt;&lt;/peersect&gt;&lt;/expire&gt;&lt;/size&gt;&lt;/length&gt;&lt;/length&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    ip         a table declared with “type ip” will only store ipv4 addresses.&lt;br&gt;               this form is very compact (about 50 bytes per entry) and allows&lt;br&gt;               very fast entry lookup and stores with almost no overhead. this&lt;br&gt;               is mainly used to store client source ip addresses.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ipv6       a table declared with &amp;quot;type ipv6&amp;quot; will only store ipv6 addresses.
           this form is very compact (about 60 bytes per entry) and allows
           very fast entry lookup and stores with almost no overhead. this
           is mainly used to store client source ip addresses.

integer    a table declared with &amp;quot;type integer&amp;quot; will store 32bit integers
           which can represent a client identifier found in a request for
           instance.

string     a table declared with &amp;quot;type string&amp;quot; will store substrings of up
           to &amp;lt;len&amp;gt; characters. if the string provided by the pattern
           extractor is larger than &amp;lt;len&amp;gt;, it will be truncated before
           being stored. during matching, at most &amp;lt;len&amp;gt; characters will be
           compared between the string in the table and the extracted
           pattern. when not specified, the string is automatically limited
           to 32 characters.

binary     a table declared with &amp;quot;type binary&amp;quot; will store binary blocks
           of &amp;lt;len&amp;gt; bytes. if the block provided by the pattern
           extractor is larger than &amp;lt;len&amp;gt;, it will be truncated before
           being stored. if the block provided by the sample expression
           is shorter than &amp;lt;len&amp;gt;, it will be padded by 0\. when not
           specified, the block is automatically limited to 32 bytes.

&amp;lt;length&amp;gt;   is the maximum number of characters that will be stored in a
           &amp;quot;string&amp;quot; type table (see type &amp;quot;string&amp;quot; above). or the number
           of bytes of the block in &amp;quot;binary&amp;quot; type table. be careful when
           changing this parameter as memory usage will proportionally
           increase.

&amp;lt;size&amp;gt;     is the maximum number of entries that can fit in the table. this
           value directly impacts memory usage. count approximately
           50 bytes per entry, plus the size of a string if any. the size
           supports suffixes &amp;quot;k&amp;quot;, &amp;quot;m&amp;quot;, &amp;quot;g&amp;quot; for 2^10, 2^20 and 2^30 factors.

[nopurge]  indicates that we refuse to purge older entries when the table
           is full. when not specified and the table is full when haproxy
           wants to store an entry in it, it will flush a few of the oldest
           entries in order to release some space for the new ones. this is
           most often the desired behaviour. in some specific cases, it
           be desirable to refuse new entries instead of purging the older
           ones. that may be the case when the amount of data to store is
           far above the hardware limits and we prefer not to offer access
           to new clients than to reject the ones already connected. when
           using this parameter, be sure to properly set the &amp;quot;expire&amp;quot;
           parameter (see below).

&amp;lt;peersect&amp;gt; is the name of the peers section to use for replication. entries
           which associate keys to server ids are kept synchronized with
           the remote peers declared in this section. all entries are also
           automatically learned from the local peer (old process) during a
           soft restart.

           note : each peers section may be referenced only by tables
                  belonging to the same unique process.

&amp;lt;expire&amp;gt;   defines the maximum duration of an entry in the table since it
           was last created, refreshed or matched. the expiration delay is
           defined using the standard time format, similarly as the various
           timeouts. the maximum duration is slightly above 24 days. see
           section 2.2 for more information. if this delay is not specified,
           the session won&amp;apos;t automatically expire, but older entries will
           be removed once full. be sure not to use the &amp;quot;nopurge&amp;quot; parameter
           if not expiration delay is specified.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   &lt;data_type&gt; is used to store additional information in the stick-table. this&lt;br&gt;               may be used by acls in order to control various criteria related&lt;br&gt;               to the activity of the client matching the stick-table. for each&lt;br&gt;               item specified here, the size of each entry will be inflated so&lt;br&gt;               that the additional data can fit. several data types may be&lt;br&gt;               stored with an entry. multiple data types may be specified after&lt;br&gt;               the “store” keyword, as a comma-separated list. alternatively,&lt;br&gt;               it is possible to repeat the “store” keyword followed by one or&lt;br&gt;               several data types. except for the “server_id” type which is&lt;br&gt;               automatically detected and enabled, all data types must be&lt;br&gt;               explicitly declared to be stored. if an acl references a data&lt;br&gt;               type which is not stored, the acl will simply not match. some&lt;br&gt;               data types require an argument which must be passed just after&lt;br&gt;               the type between parenthesis. see below for the supported data&lt;br&gt;               types and their arguments.&lt;/data_type&gt;&lt;/p&gt;
&lt;p&gt;  the data types that can be stored with an entry are the following :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- server_id : this is an integer which holds the numeric id of the server a
  request was assigned to. it is used by the &amp;quot;stick match&amp;quot;, &amp;quot;stick store&amp;quot;,
  and &amp;quot;stick on&amp;quot; rules. it is automatically enabled when referenced.

- gpc0 : first general purpose counter. it is a positive 32-bit integer
  integer which may be used for anything. most of the time it will be used
  to put a special tag on some entries, for instance to note that a
  specific behaviour was detected and must be known for future matches.

- gpc0_rate(&amp;lt;period&amp;gt;) : increment rate of the first general purpose counter
  over a period. it is a positive 32-bit integer integer which may be used
  for anything. just like &amp;lt;gpc0&amp;gt;, it counts events, but instead of keeping
  a cumulative count, it maintains the rate at which the counter is
  incremented. most of the time it will be used to measure the frequency of
  occurrence of certain events (eg: requests to a specific url).

- conn_cnt : connection count. it is a positive 32-bit integer which counts
  the absolute number of connections received from clients which matched
  this entry. it does not mean the connections were accepted, just that
  they were received.

- conn_cur : current connections. it is a positive 32-bit integer which
  stores the concurrent connection counts for the entry. it is incremented
  once an incoming connection matches the entry, and decremented once the
  connection leaves. that way it is possible to know at any time the exact
  number of concurrent connections for an entry.

- conn_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes an
  integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  incoming connection rate over that period, in connections per period. the
  result is an integer which can be matched using acls.

- sess_cnt : session count. it is a positive 32-bit integer which counts
  the absolute number of sessions received from clients which matched this
  entry. a session is a connection that was accepted by the layer 4 rules.

- sess_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes an
  integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  incoming session rate over that period, in sessions per period. the
  result is an integer which can be matched using acls.

- http_req_cnt : http request count. it is a positive 32-bit integer which
  counts the absolute number of http requests received from clients which
  matched this entry. it does not matter whether they are valid requests or
  not. note that this is different from sessions when keep-alive is used on
  the client side.

- http_req_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes an
  integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  http request rate over that period, in requests per period. the result is
  an integer which can be matched using acls. it does not matter whether
  they are valid requests or not. note that this is different from sessions
  when keep-alive is used on the client side.

- http_err_cnt : http error count. it is a positive 32-bit integer which
  counts the absolute number of http requests errors induced by clients
  which matched this entry. errors are counted on invalid and truncated
  requests, as well as on denied or tarpitted requests, and on failed
  authentications. if the server responds with 4xx, then the request is
  also counted as an error since it&amp;apos;s an error triggered by the client
  (eg: vulnerability scan).

- http_err_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes an
  integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  http request error rate over that period, in requests per period (see
  http_err_cnt above for what is accounted as an error). the result is an
  integer which can be matched using acls.

- bytes_in_cnt : client to server byte count. it is a positive 64-bit
  integer which counts the cumulated amount of bytes received from clients
  which matched this entry. headers are included in the count. this may be
  used to limit abuse of upload features on photo or video servers.

- bytes_in_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes an
  integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  incoming bytes rate over that period, in bytes per period. it may be used
  to detect users which upload too much and too fast. warning: with large
  uploads, it is possible that the amount of uploaded data will be counted
  once upon termination, thus causing spikes in the average transfer speed
  instead of having a smooth one. this may partially be smoothed with
  &amp;quot;option contstats&amp;quot; though this is not perfect yet. use of byte_in_cnt is
  recommended for better fairness.

- bytes_out_cnt : server to client byte count. it is a positive 64-bit
  integer which counts the cumulated amount of bytes sent to clients which
  matched this entry. headers are included in the count. this may be used
  to limit abuse of bots sucking the whole site.

- bytes_out_rate(&amp;lt;period&amp;gt;) : frequency counter (takes 12 bytes). it takes
  an integer parameter &amp;lt;period&amp;gt; which indicates in milliseconds the length
  of the period over which the average is measured. it reports the average
  outgoing bytes rate over that period, in bytes per period. it may be used
  to detect users which download too much and too fast. warning: with large
  transfers, it is possible that the amount of transferred data will be
  counted once upon termination, thus causing spikes in the average
  transfer speed instead of having a smooth one. this may partially be
  smoothed with &amp;quot;option contstats&amp;quot; though this is not perfect yet. use of
  byte_out_cnt is recommended for better fairness.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  there is only one stick-table per proxy. at the moment of writing this doc,&lt;br&gt;  it does not seem useful to have multiple tables per proxy. if this happens&lt;br&gt;  to be required, simply create a dummy backend with a stick-table in it and&lt;br&gt;  reference it.&lt;/p&gt;
&lt;p&gt;  it is important to understand that stickiness based on learning information&lt;br&gt;  has some limitations, including the fact that all learned associations are&lt;br&gt;  lost upon restart. in general it can be good as a complement but not always&lt;br&gt;  as an exclusive stickiness.&lt;/p&gt;
&lt;p&gt;  last, memory requirements may be important when storing many data types.&lt;br&gt;  indeed, storing all indicators above at once in each entry requires 116 bytes&lt;br&gt;  per entry, or 116 mb for a 1-million entries table. this is definitely not&lt;br&gt;  something that can be ignored.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# keep track of counters of up to 1 million ip addresses over 5 minutes
# and store a general purpose counter and the average connection rate
# computed over a sliding window of 30 seconds.
stick-table type ip size 1m expire 5m store gpc0,conn_rate(30s)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stick match”, “stick on”, “stick store-request”, section 2.2&lt;br&gt;             about time format and section 7 about acls.&lt;/p&gt;
&lt;p&gt;stick store-response &lt;pattern&gt; [table &lt;table&gt;] [{if | unless} &lt;condition&gt;]&lt;br&gt;  define a request pattern used to create an entry in a stickiness table&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;/condition&gt;&lt;/table&gt;&lt;/pattern&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;pattern&gt;  is a sample expression rule as described in section 7.3. it&lt;br&gt;               describes what elements of the response or connection will&lt;br&gt;               be analysed, extracted and stored in the table once a&lt;br&gt;               server is selected.&lt;/pattern&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table&amp;gt;    is an optional stickiness table name. if unspecified, the same
           backend&amp;apos;s table is used. a stickiness table is declared using
           the &amp;quot;stick-table&amp;quot; statement.

&amp;lt;cond&amp;gt;     is an optional storage condition. it makes it possible to store
           certain criteria only when some conditions are met (or not met).
           for instance, it could be used to store the ssl session id only
           when the response is a ssl server hello.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  some protocols or applications require complex stickiness rules and cannot&lt;br&gt;  always simply rely on cookies nor hashing. the “stick store-response”&lt;br&gt;  statement  describes a rule to decide what to extract from the response and&lt;br&gt;  when to do it, in order to store it into a stickiness table for further&lt;br&gt;  requests to match it using the “stick match” statement. obviously the&lt;br&gt;  extracted part must make sense and have a chance to be matched in a further&lt;br&gt;  request. storing an id found in a header of a response makes sense.&lt;br&gt;  see section 7 for a complete list of possible patterns and transformation&lt;br&gt;  rules.&lt;/p&gt;
&lt;p&gt;  the table has to be declared using the “stick-table” statement. it must be of&lt;br&gt;  a type compatible with the pattern. by default it is the one which is present&lt;br&gt;  in the same backend. it is possible to share a table with other backends by&lt;br&gt;  referencing it using the “table” keyword. if another table is referenced,&lt;br&gt;  the server’s id inside the backends are used. by default, all server ids&lt;br&gt;  start at 1 in each backend, so the server ordering is enough. but in case of&lt;br&gt;  doubt, it is highly recommended to force server ids using their “id” setting.&lt;/p&gt;
&lt;p&gt;  it is possible to restrict the conditions where a “stick store-response”&lt;br&gt;  statement will apply, using “if” or “unless” followed by a condition. this&lt;br&gt;  condition will be evaluated while parsing the response, so any criteria can&lt;br&gt;  be used. see section 7 for acl based conditions.&lt;/p&gt;
&lt;p&gt;  there is no limit on the number of “stick store-response” statements, but&lt;br&gt;  there is a limit of 8 simultaneous stores per request or response. this&lt;br&gt;  makes it possible to store up to 8 criteria, all extracted from either the&lt;br&gt;  request or the response, regardless of the number of rules. only the 8 first&lt;br&gt;  ones which match will be kept. using this, it is possible to feed multiple&lt;br&gt;  tables at once in the hope to increase the chance to recognize a user on&lt;br&gt;  another protocol or access method. using multiple store-response rules with&lt;br&gt;  the same table is possible and may be used to find the best criterion to rely&lt;br&gt;  on, by arranging the rules by decreasing preference order. only the first&lt;br&gt;  extracted criterion for a given table will be stored. all subsequent store-&lt;br&gt;  response rules referencing the same table will be skipped and their acls will&lt;br&gt;  not be evaluated. however, even if a store-request rule references a table, a&lt;br&gt;  store-response rule may also use the same table. this means that each table&lt;br&gt;  may learn exactly one element from the request and one element from the&lt;br&gt;  response at once.&lt;/p&gt;
&lt;p&gt;  the table will contain the real server that processed the request.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# learn ssl session id from both request and response and create affinity.
backend https
    mode tcp
    balance roundrobin
    # maximum ssl session id length is 32 bytes.
    stick-table type binary len 32 size 30k expire 30m

    acl clienthello req_ssl_hello_type 1
    acl serverhello rep_ssl_hello_type 2

    # use tcp content accepts to detects ssl client and server hello.
    tcp-request inspect-delay 5s
    tcp-request content accept if clienthello

    # no timeout on response inspect delay by default.
    tcp-response content accept if serverhello

    # ssl session id (sslid) may be present on a client or server hello.
    # its length is coded on 1 byte at offset 43 and its value starts
    # at offset 44.

    # match and learn on request if client hello.
    stick on payload_lv(43,1) if clienthello

    # learn on response if server hello.
    stick store-response payload_lv(43,1) if serverhello

    server s1 192.168.1.1:443
    server s2 192.168.1.1:443
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “stick-table”, “stick on”, and section 7 about acls and pattern&lt;br&gt;             extraction.&lt;/p&gt;
&lt;p&gt;tcp-check connect [params*]&lt;br&gt;  opens a new connection&lt;br&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               no     |    no    |   yes  |   yes&lt;/p&gt;
&lt;p&gt;  when an application lies on more than a single tcp port or when haproxy&lt;br&gt;  load-balance many services in a single backend, it makes sense to probe all&lt;br&gt;  the services individually before considering a server as operational.&lt;/p&gt;
&lt;p&gt;  when there are no tcp port configured on the server line neither server port&lt;br&gt;  directive, then the ‘tcp-check connect port &lt;port&gt;‘ must be the first step&lt;br&gt;  of the sequence.&lt;/port&gt;&lt;/p&gt;
&lt;p&gt;  in a tcp-check ruleset a ‘connect’ is required, it is also mandatory to start&lt;br&gt;  the ruleset with a ‘connect’ rule. purpose is to ensure admin know what they&lt;br&gt;  do.&lt;/p&gt;
&lt;p&gt;  parameters :&lt;br&gt;    they are optional and can be used to describe how haproxy should open and&lt;br&gt;    use the tcp connection.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;port      if not set, check port or server port is used.
          it tells haproxy where to open the connection to.
          &amp;lt;port&amp;gt; must be a valid tcp port source integer, from 1 to 65535.

send-proxy   send a proxy protocol string

ssl          opens a ciphered connection

examples:
     # check http and https services on a server.
     # first open port 80 thanks to server line port directive, then
     # tcp-check opens port 443, ciphered and run a request on it:
     option tcp-check
     tcp-check connect
     tcp-check send get\ /\ http/1.0\r\n
     tcp-check send host:\ haproxy.1wt.eu\r\n
     tcp-check send \r\n
     tcp-check expect rstring (2..|3..)
     tcp-check connect port 443 ssl
     tcp-check send get\ /\ http/1.0\r\n
     tcp-check send host:\ haproxy.1wt.eu\r\n
     tcp-check send \r\n
     tcp-check expect rstring (2..|3..)
     server www 10.0.0.1 check port 80

     # check both pop and imap from a single server:
     option tcp-check
     tcp-check connect port 110
     tcp-check expect string +ok\ pop3\ ready
     tcp-check connect port 143
     tcp-check expect string *\ ok\ imap4\ ready
     server mail 10.0.0.1 check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option tcp-check”, “tcp-check send”, “tcp-check expect”&lt;/p&gt;
&lt;p&gt;tcp-check expect [!] &lt;match&gt; &lt;pattern&gt;&lt;br&gt;  specify data to be collected and analysed during a generic health check&lt;br&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               no     |    no    |   yes  |   yes&lt;/pattern&gt;&lt;/match&gt;&lt;/p&gt;
&lt;p&gt;  arguments :&lt;br&gt;    &lt;match&gt;   is a keyword indicating how to look for a specific pattern in the&lt;br&gt;              response. the keyword may be one of “string”, “rstring” or&lt;br&gt;              binary.&lt;br&gt;              the keyword may be preceded by an exclamation mark (“!”) to negate&lt;br&gt;              the match. spaces are allowed between the exclamation mark and the&lt;br&gt;              keyword. see below for more details on the supported keywords.&lt;/match&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;pattern&amp;gt; is the pattern to look for. it may be a string or a regular
          expression. if the pattern contains spaces, they must be escaped
          with the usual backslash (&amp;apos;\&amp;apos;).
          if the match is set to binary, then the pattern must be passed as
          a serie of hexadecimal digits in an even number. each sequence of
          two digits will represent a byte. the hexadecimal digits may be
          used upper or lower case.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the available matches are intentionally similar to their http-check cousins :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string &amp;lt;string&amp;gt; : test the exact string matches in the response buffer.
                  a health check response will be considered valid if the
                  response&amp;apos;s buffer contains this exact string. if the
                  &amp;quot;string&amp;quot; keyword is prefixed with &amp;quot;!&amp;quot;, then the response
                  will be considered invalid if the body contains this
                  string. this can be used to look for a mandatory pattern
                  in a protocol response, or to detect a failure when a
                  specific error appears in a protocol banner.

rstring &amp;lt;regex&amp;gt; : test a regular expression on the response buffer.
                  a health check response will be considered valid if the
                  response&amp;apos;s buffer matches this expression. if the
                  &amp;quot;rstring&amp;quot; keyword is prefixed with &amp;quot;!&amp;quot;, then the response
                  will be considered invalid if the body matches the
                  expression.

binary &amp;lt;hexstring&amp;gt; : test the exact string in its hexadecimal form matches
                     in the response buffer. a health check response will
                     be considered valid if the response&amp;apos;s buffer contains
                     this exact hexadecimal string.
                     purpose is to match data on binary protocols.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  it is important to note that the responses will be limited to a certain size&lt;br&gt;  defined by the global “tune.chksize” option, which defaults to 16384 bytes.&lt;br&gt;  thus, too large responses may not contain the mandatory pattern when using&lt;br&gt;  “string”, “rstring” or binary. if a large response is absolutely required, it&lt;br&gt;  is possible to change the default max size by setting the global variable.&lt;br&gt;  however, it is worth keeping in mind that parsing very large responses can&lt;br&gt;  waste some cpu cycles, especially when regular expressions are used, and that&lt;br&gt;  it is always better to focus the checks on smaller resources. also, in its&lt;br&gt;  current state, the check will not find any string nor regex past a null&lt;br&gt;  character in the response. similarly it is not possible to request matching&lt;br&gt;  the null character.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# perform a pop check
option tcp-check
tcp-check expect string +ok\ pop3\ ready

# perform an imap check
option tcp-check
tcp-check expect string *\ ok\ imap4\ ready

# look for the redis master server
option tcp-check
tcp-check send ping\r\n
tcp-check expect +pong
tcp-check send info\ replication\r\n
tcp-check expect string role:master
tcp-check send quit\r\n
tcp-check expect string +ok
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option tcp-check”, “tcp-check connect”, “tcp-check send”,&lt;br&gt;             “tcp-check send-binary”, “http-check expect”, tune.chksize&lt;/p&gt;
&lt;p&gt;tcp-check send &lt;data&gt;&lt;br&gt;  specify a string to be sent as a question during a generic health check&lt;br&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               no     |    no    |   yes  |   yes&lt;/data&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;data&amp;gt; : the data to be sent as a question during a generic health check
         session. for now, &amp;lt;data&amp;gt; must be a string.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# look for the redis master server
option tcp-check
tcp-check send info\ replication\r\n
tcp-check expect string role:master
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option tcp-check”, “tcp-check connect”, “tcp-check expect”,&lt;br&gt;             “tcp-check send-binary”, tune.chksize&lt;/p&gt;
&lt;p&gt;tcp-check send-binary &lt;hexastring&gt;&lt;br&gt;  specify an hexa digits string to be sent as a binary question during a raw&lt;br&gt;  tcp health check&lt;br&gt;  may be used in sections:   defaults | frontend | listen | backend&lt;br&gt;                               no     |    no    |   yes  |   yes&lt;/hexastring&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;data&amp;gt; : the data to be sent as a question during a generic health check
         session. for now, &amp;lt;data&amp;gt; must be a string.
&amp;lt;hexastring&amp;gt; : test the exact string in its hexadecimal form matches in the
               response buffer. a health check response will be considered
               valid if the response&amp;apos;s buffer contains this exact
               hexadecimal string.
               purpose is to send binary data to ask on binary protocols.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# redis check in binary
option tcp-check
tcp-check send-binary 50494e470d0a # ping\r\n
tcp-check expect binary 2b504f4e47 # +pong
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “option tcp-check”, “tcp-check connect”, “tcp-check expect”,&lt;br&gt;             “tcp-check send”, tune.chksize&lt;/p&gt;
&lt;p&gt;tcp-request connection &lt;action&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;  perform an action on an incoming connection depending on a layer 4 condition&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;action&gt;    defines the action to perform if the condition applies. valid&lt;br&gt;                actions include : “accept”, “reject”, “track-sc0”, “track-sc1”,&lt;br&gt;                “track-sc2”, and “expect-proxy”. see below for more details.&lt;/action&gt;&lt;/condition&gt;&lt;/action&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;condition&amp;gt; is a standard layer4-only acl-based condition (see section 7).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  immediately after acceptance of a new incoming connection, it is possible to&lt;br&gt;  evaluate some conditions to decide whether this connection must be accepted&lt;br&gt;  or dropped or have its counters tracked. those conditions cannot make use of&lt;br&gt;  any data contents because the connection has not been read from yet, and the&lt;br&gt;  buffers are not yet allocated. this is used to selectively and very quickly&lt;br&gt;  accept or drop connections from various sources with a very low overhead. if&lt;br&gt;  some contents need to be inspected in order to take the decision, the&lt;br&gt;  “tcp-request content” statements must be used instead.&lt;/p&gt;
&lt;p&gt;  the “tcp-request connection” rules are evaluated in their exact declaration&lt;br&gt;  order. if no rule matches or if there is no rule, the default action is to&lt;br&gt;  accept the incoming connection. there is no specific limit to the number of&lt;br&gt;  rules which may be inserted.&lt;/p&gt;
&lt;p&gt;  four types of actions are supported :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- accept :
    accepts the connection if the condition is true (when used with &amp;quot;if&amp;quot;)
    or false (when used with &amp;quot;unless&amp;quot;). the first such rule executed ends
    the rules evaluation.

- reject :
    rejects the connection if the condition is true (when used with &amp;quot;if&amp;quot;)
    or false (when used with &amp;quot;unless&amp;quot;). the first such rule executed ends
    the rules evaluation. rejected connections do not even become a
    session, which is why they are accounted separately for in the stats,
    as &amp;quot;denied connections&amp;quot;. they are not considered for the session
    rate-limit and are not logged either. the reason is that these rules
    should only be used to filter extremely high connection rates such as
    the ones encountered during a massive ddos attack. under these extreme
    conditions, the simple action of logging each event would make the
    system collapse and would considerably lower the filtering capacity. if
    logging is absolutely desired, then &amp;quot;tcp-request content&amp;quot; rules should
    be used instead.

- expect-proxy layer4 :
    configures the client-facing connection to receive a proxy protocol
    header before any byte is read from the socket. this is equivalent to
    having the &amp;quot;accept-proxy&amp;quot; keyword on the &amp;quot;bind&amp;quot; line, except that using
    the tcp rule allows the proxy protocol to be accepted only for certain
    ip address ranges using an acl. this is convenient when multiple layers
    of load balancers are passed through by traffic coming from public
    hosts.

- capture &amp;lt;sample&amp;gt; len &amp;lt;length&amp;gt; :
    this only applies to &amp;quot;tcp-request content&amp;quot; rules. it captures sample
    expression &amp;lt;sample&amp;gt; from the request buffer, and converts it to a
    string of at most &amp;lt;len&amp;gt; characters. the resulting string is stored into
    the next request &amp;quot;capture&amp;quot; slot, so it will possibly appear next to
    some captured http headers. it will then automatically appear in the
    logs, and it will be possible to extract it using sample fetch rules to
    feed it into headers or anything. the length should be limited given
    that this size will be allocated for each capture during the whole
    session life. please check section 7.3 (fetching samples) and &amp;quot;capture
    request header&amp;quot; for more information.

- { track-sc0 | track-sc1 | track-sc2 } &amp;lt;key&amp;gt; [table &amp;lt;table&amp;gt;] :
    enables tracking of sticky counters from current connection. these
    rules do not stop evaluation and do not change default action. 3 sets
    of counters may be simultaneously tracked by the same connection. the
    first &amp;quot;track-sc0&amp;quot; rule executed enables tracking of the counters of the
    specified table as the first set. the first &amp;quot;track-sc1&amp;quot; rule executed
    enables tracking of the counters of the specified table as the second
    set. the first &amp;quot;track-sc2&amp;quot; rule executed enables tracking of the
    counters of the specified table as the third set. it is a recommended
    practice to use the first set of counters for the per-frontend counters
    and the second set for the per-backend ones. but this is just a
    guideline, all may be used everywhere.

    these actions take one or two arguments :
      &amp;lt;key&amp;gt;   is mandatory, and is a sample expression rule as described
              in section 7.3\. it describes what elements of the incoming
              request or connection will be analysed, extracted, combined,
              and used to select which table entry to update the counters.
              note that &amp;quot;tcp-request connection&amp;quot; cannot use content-based
              fetches.

     &amp;lt;table&amp;gt;  is an optional table to be used instead of the default one,
              which is the stick-table declared in the current proxy. all
              the counters for the matches and updates for the key will
              then be performed in that table until the session ends.

    once a &amp;quot;track-sc*&amp;quot; rule is executed, the key is looked up in the table
    and if it is not found, an entry is allocated for it. then a pointer to
    that entry is kept during all the session&amp;apos;s life, and this entry&amp;apos;s
    counters are updated as often as possible, every time the session&amp;apos;s
    counters are updated, and also systematically when the session ends.
    counters are only updated for events that happen after the tracking has
    been started. for example, connection counters will not be updated when
    tracking layer 7 information, since the connection event happens before
    layer7 information is extracted.

    if the entry tracks concurrent connection counters, one connection is
    counted for as long as the entry is tracked, and the entry will not
    expire during that time. tracking counters also provides a performance
    advantage over just checking the keys, because only one table lookup is
    performed for all acl checks that make use of it.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  note that the “if/unless” condition is optional. if no condition is set on&lt;br&gt;  the action, it is simply performed unconditionally. that can be useful for&lt;br&gt;  “track-sc*” actions as well as for changing the default action to a reject.&lt;/p&gt;
&lt;p&gt;  example: accept all connections from white-listed hosts, reject too fast&lt;br&gt;           connection without counting them, and track accepted connections.&lt;br&gt;           this results in connection rate being capped from abusive sources.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }
tcp-request connection reject if { src_conn_rate gt 10 }
tcp-request connection track-sc0 src
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example: accept all connections from white-listed hosts, count all other&lt;br&gt;           connections and reject too fast ones. this results in abusive ones&lt;br&gt;           being blocked as long as they don’t slow down.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcp-request connection accept if { src -f /etc/haproxy/whitelist.lst }
tcp-request connection track-sc0 src
tcp-request connection reject if { sc0_conn_rate gt 10 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example: enable the proxy protocol for traffic coming from all known proxies.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcp-request connection expect-proxy layer4 if { src -f proxies.lst }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;  see also : “tcp-request content”, “stick-table”&lt;/p&gt;
&lt;p&gt;tcp-request content &lt;action&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;  perform an action on a new session depending on a layer 4-7 condition&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;action&gt;    defines the action to perform if the condition applies. valid&lt;br&gt;                actions include : “accept”, “reject”, “track-sc0”, “track-sc1”,&lt;br&gt;                “track-sc2”, “capture” and “lua”. see “tcp-request connection”&lt;br&gt;                above for their signification.&lt;/action&gt;&lt;/condition&gt;&lt;/action&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;condition&amp;gt; is a standard layer 4-7 acl-based condition (see section 7).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  a request’s contents can be analysed at an early stage of request processing&lt;br&gt;  called “tcp content inspection”. during this stage, acl-based rules are&lt;br&gt;  evaluated every time the request contents are updated, until either an&lt;br&gt;  “accept” or a “reject” rule matches, or the tcp request inspection delay&lt;br&gt;  expires with no matching rule.&lt;/p&gt;
&lt;p&gt;  the first difference between these rules and “tcp-request connection” rules&lt;br&gt;  is that “tcp-request content” rules can make use of contents to take a&lt;br&gt;  decision. most often, these decisions will consider a protocol recognition or&lt;br&gt;  validity. the second difference is that content-based rules can be used in&lt;br&gt;  both frontends and backends. in case of http keep-alive with the client, all&lt;br&gt;  tcp-request content rules are evaluated again, so haproxy keeps a record of&lt;br&gt;  what sticky counters were assigned by a “tcp-request connection” versus a&lt;br&gt;  “tcp-request content” rule, and flushes all the content-related ones after&lt;br&gt;  processing an http request, so that they may be evaluated again by the rules&lt;br&gt;  being evaluated again for the next request. this is of particular importance&lt;br&gt;  when the rule tracks some l7 information or when it is conditioned by an&lt;br&gt;  l7-based acl, since tracking may change between requests.&lt;/p&gt;
&lt;p&gt;  content-based rules are evaluated in their exact declaration order. if no&lt;br&gt;  rule matches or if there is no rule, the default action is to accept the&lt;br&gt;  contents. there is no specific limit to the number of rules which may be&lt;br&gt;  inserted.&lt;/p&gt;
&lt;p&gt;  four types of actions are supported :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- accept : the request is accepted
- reject : the request is rejected and the connection is closed
- capture : the specified sample expression is captured
- { track-sc0 | track-sc1 | track-sc2 } &amp;lt;key&amp;gt; [table &amp;lt;table&amp;gt;]
- lua &amp;lt;function&amp;gt;
- set-var(&amp;lt;var-name&amp;gt;) &amp;lt;expr&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  they have the same meaning as their counter-parts in “tcp-request connection”&lt;br&gt;  so please refer to that section for a complete description.&lt;/p&gt;
&lt;p&gt;  while there is nothing mandatory about it, it is recommended to use the&lt;br&gt;  track-sc0 in “tcp-request connection” rules, track-sc1 for “tcp-request&lt;br&gt;  content” rules in the frontend, and track-sc2 for “tcp-request content”&lt;br&gt;  rules in the backend, because that makes the configuration more readable&lt;br&gt;  and easier to troubleshoot, but this is just a guideline and all counters&lt;br&gt;  may be used everywhere.&lt;/p&gt;
&lt;p&gt;  note that the “if/unless” condition is optional. if no condition is set on&lt;br&gt;  the action, it is simply performed unconditionally. that can be useful for&lt;br&gt;  “track-sc*” actions as well as for changing the default action to a reject.&lt;/p&gt;
&lt;p&gt;  it is perfectly possible to match layer 7 contents with “tcp-request content”&lt;br&gt;  rules, since http-specific acl matches are able to preliminarily parse the&lt;br&gt;  contents of a buffer before extracting the required data. if the buffered&lt;br&gt;  contents do not parse as a valid http message, then the acl does not match.&lt;br&gt;  the parser which is involved there is exactly the same as for all other http&lt;br&gt;  processing, so there is no risk of parsing something differently. in an http&lt;br&gt;  backend connected to from an http frontend, it is guaranteed that http&lt;br&gt;  contents will always be immediately present when the rule is evaluated first.&lt;/p&gt;
&lt;p&gt;  tracking layer7 information is also possible provided that the information&lt;br&gt;  are present when the rule is processed. the rule processing engine is able to&lt;br&gt;  wait until the inspect delay expires when the data to be tracked is not yet&lt;br&gt;  available.&lt;/p&gt;
&lt;p&gt;  the “lua” keyword is followed by a lua function name. it is used to run a lua&lt;br&gt;  function if the action is executed. the single parameter is the name of the&lt;br&gt;  function to run. the prototype of the function is documented in the api&lt;br&gt;  documentation.&lt;/p&gt;
&lt;p&gt;  the “set-var” is used to set the content of a variable. the variable is&lt;br&gt;  declared inline.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;var-name&amp;gt; the name of the variable starts by an indication about its scope.
           the allowed scopes are:
             &amp;quot;sess&amp;quot; : the variable is shared with all the session,
             &amp;quot;txn&amp;quot;  : the variable is shared with all the transaction
                      (request and response)
             &amp;quot;req&amp;quot;  : the variable is shared only during the request
                      processing
             &amp;quot;res&amp;quot;  : the variable is shared only during the response
                      processing.
           this prefix is followed by a name. the separator is a &amp;apos;.&amp;apos;.
           the name may only contain characters &amp;apos;a-z&amp;apos;, &amp;apos;a-z&amp;apos;, &amp;apos;0-9&amp;apos; and &amp;apos;_&amp;apos;.

&amp;lt;expr&amp;gt;     is a standard haproxy expression formed by a sample-fetch
           followed by some converters.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcp-request content set-var(sess.my_var) src
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# accept http requests containing a host header saying &amp;quot;example.com&amp;quot;
# and reject everything else.
acl is_host_com hdr(host) -i example.com
tcp-request inspect-delay 30s
tcp-request content accept if is_host_com
tcp-request content reject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# reject smtp connection if client speaks first
tcp-request inspect-delay 30s
acl content_present req_len gt 0
tcp-request content reject if content_present

# forward https connection only if client speaks
tcp-request inspect-delay 30s
acl content_present req_len gt 0
tcp-request content accept if content_present
tcp-request content reject
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# track the last ip from x-forwarded-for
tcp-request inspect-delay 10s
tcp-request content track-sc0 hdr(x-forwarded-for,-1)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# track request counts per &amp;quot;base&amp;quot; (concatenation of host+url)
tcp-request inspect-delay 10s
tcp-request content track-sc0 base table req-rate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example: track per-frontend and per-backend counters, block abusers at the&lt;br&gt;           frontend when the backend detects abuse.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;frontend http
    # use general purpose couter 0 in sc0 as a global abuse counter
    # protecting all our sites
    stick-table type ip size 1m expire 5m store gpc0
    tcp-request connection track-sc0 src
    tcp-request connection reject if { sc0_get_gpc0 gt 0 }
    ...
    use_backend http_dynamic if { path_end .php }

backend http_dynamic
    # if a source makes too fast requests to this dynamic site (tracked
    # by sc1), block it globally in the frontend.
    stick-table type ip size 1m expire 5m store http_req_rate(10s)
    acl click_too_fast sc1_http_req_rate gt 10
    acl mark_as_abuser sc0_inc_gpc0 gt 0
    tcp-request content track-sc1 src
    tcp-request content reject if click_too_fast mark_as_abuser
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;  see also : “tcp-request connection”, “tcp-request inspect-delay”&lt;/p&gt;
&lt;p&gt;tcp-request inspect-delay &lt;timeout&gt;&lt;br&gt;  set the maximum allowed time to wait for data during content inspection&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  people using haproxy primarily as a tcp relay are often worried about the&lt;br&gt;  risk of passing any type of protocol to a server without any analysis. in&lt;br&gt;  order to be able to analyze the request contents, we must first withhold&lt;br&gt;  the data then analyze them. this statement simply enables withholding of&lt;br&gt;  data for at most the specified amount of time.&lt;/p&gt;
&lt;p&gt;  tcp content inspection applies very early when a connection reaches a&lt;br&gt;  frontend, then very early when the connection is forwarded to a backend. this&lt;br&gt;  means that a connection may experience a first delay in the frontend and a&lt;br&gt;  second delay in the backend if both have tcp-request rules.&lt;/p&gt;
&lt;p&gt;  note that when performing content inspection, haproxy will evaluate the whole&lt;br&gt;  rules for every new chunk which gets in, taking into account the fact that&lt;br&gt;  those data are partial. if no rule matches before the aforementioned delay,&lt;br&gt;  a last check is performed upon expiration, this time considering that the&lt;br&gt;  contents are definitive. if no delay is set, haproxy will not wait at all&lt;br&gt;  and will immediately apply a verdict based on the available information.&lt;br&gt;  obviously this is unlikely to be very useful and might even be racy, so such&lt;br&gt;  setups are not recommended.&lt;/p&gt;
&lt;p&gt;  as soon as a rule matches, the request is released and continues as usual. if&lt;br&gt;  the timeout is reached and no rule matches, the default policy will be to let&lt;br&gt;  it pass through unaffected.&lt;/p&gt;
&lt;p&gt;  for most protocols, it is enough to set it to a few seconds, as most clients&lt;br&gt;  send the full request immediately upon connection. add 3 or more seconds to&lt;br&gt;  cover tcp retransmits but that’s all. for some protocols, it may make sense&lt;br&gt;  to use large values, for instance to ensure that the client never talks&lt;br&gt;  before the server (eg: smtp), or to wait for a client to talk before passing&lt;br&gt;  data to the server (eg: ssl). note that the client timeout must cover at&lt;br&gt;  least the inspection delay, otherwise it will expire first. if the client&lt;br&gt;  closes the connection or if the buffer is full, the delay immediately expires&lt;br&gt;  since the contents will not be able to change anymore.&lt;/p&gt;
&lt;p&gt;  see also : “tcp-request content accept”, “tcp-request content reject”,&lt;br&gt;             “timeout client”.&lt;/p&gt;
&lt;p&gt;tcp-response content &lt;action&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;  perform an action on a session response depending on a layer 4-7 condition&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;action&gt;    defines the action to perform if the condition applies. valid&lt;br&gt;                actions include : “accept”, “close”, “reject”, “lua”.&lt;/action&gt;&lt;/condition&gt;&lt;/action&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;condition&amp;gt; is a standard layer 4-7 acl-based condition (see section 7).
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  response contents can be analysed at an early stage of response processing&lt;br&gt;  called “tcp content inspection”. during this stage, acl-based rules are&lt;br&gt;  evaluated every time the response contents are updated, until either an&lt;br&gt;  “accept”, “close” or a “reject” rule matches, or a tcp response inspection&lt;br&gt;  delay is set and expires with no matching rule.&lt;/p&gt;
&lt;p&gt;  most often, these decisions will consider a protocol recognition or validity.&lt;/p&gt;
&lt;p&gt;  content-based rules are evaluated in their exact declaration order. if no&lt;br&gt;  rule matches or if there is no rule, the default action is to accept the&lt;br&gt;  contents. there is no specific limit to the number of rules which may be&lt;br&gt;  inserted.&lt;/p&gt;
&lt;p&gt;  two types of actions are supported :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- accept :
    accepts the response if the condition is true (when used with &amp;quot;if&amp;quot;)
    or false (when used with &amp;quot;unless&amp;quot;). the first such rule executed ends
    the rules evaluation.

- close :
    immediately closes the connection with the server if the condition is
    true (when used with &amp;quot;if&amp;quot;), or false (when used with &amp;quot;unless&amp;quot;). the
    first such rule executed ends the rules evaluation. the main purpose of
    this action is to force a connection to be finished between a client
    and a server after an exchange when the application protocol expects
    some long time outs to elapse first. the goal is to eliminate idle
    connections which take significant resources on servers with certain
    protocols.

- reject :
    rejects the response if the condition is true (when used with &amp;quot;if&amp;quot;)
    or false (when used with &amp;quot;unless&amp;quot;). the first such rule executed ends
    the rules evaluation. rejected session are immediately closed.

- lua &amp;lt;function&amp;gt;
    executes lua.

- set-var(&amp;lt;var-name&amp;gt;) &amp;lt;expr&amp;gt;
    sets a variable.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  note that the “if/unless” condition is optional. if no condition is set on&lt;br&gt;  the action, it is simply performed unconditionally. that can be useful for&lt;br&gt;  for changing the default action to a reject.&lt;/p&gt;
&lt;p&gt;  it is perfectly possible to match layer 7 contents with “tcp-response&lt;br&gt;  content” rules, but then it is important to ensure that a full response has&lt;br&gt;  been buffered, otherwise no contents will match. in order to achieve this,&lt;br&gt;  the best solution involves detecting the http protocol during the inspection&lt;br&gt;  period.&lt;/p&gt;
&lt;p&gt;  the “lua” keyword is followed by a lua function name. it is used to run a lua&lt;br&gt;  function if the action is executed. the single parameter is the name of the&lt;br&gt;  function to run. the prototype of the function is documented in the api&lt;br&gt;  documentation.&lt;/p&gt;
&lt;p&gt;  the “set-var” is used to set the content of a variable. the variable is&lt;br&gt;  declared inline.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;var-name&amp;gt; the name of the variable starts by an indication about its scope.
           the allowed scopes are:
             &amp;quot;sess&amp;quot; : the variable is shared with all the session,
             &amp;quot;txn&amp;quot;  : the variable is shared with all the transaction
                      (request and response)
             &amp;quot;req&amp;quot;  : the variable is shared only during the request
                      processing
             &amp;quot;res&amp;quot;  : the variable is shared only during the response
                      processing.
           this prefix is followed by a name. the separator is a &amp;apos;.&amp;apos;.
           the name may only contain characters &amp;apos;a-z&amp;apos;, &amp;apos;a-z&amp;apos;, &amp;apos;0-9&amp;apos; and &amp;apos;_&amp;apos;.

&amp;lt;expr&amp;gt;     is a standard haproxy expression formed by a sample-fetch
           followed by some converters.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tcp-request content set-var(sess.my_var) src
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see section 7 about acl usage.&lt;/p&gt;
&lt;p&gt;  see also : “tcp-request content”, “tcp-response inspect-delay”&lt;/p&gt;
&lt;p&gt;tcp-response inspect-delay &lt;timeout&gt;&lt;br&gt;  set the maximum allowed time to wait for a response during content inspection&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 no    |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  see also : “tcp-response content”, “tcp-request inspect-delay”.&lt;/p&gt;
&lt;p&gt;timeout check &lt;timeout&gt;&lt;br&gt;  set additional check timeout, but only after a connection has been already&lt;br&gt;  established.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  may be used in sections:    defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments:&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  if set, haproxy uses min(“timeout connect”, “inter”) as a connect timeout&lt;br&gt;  for check and “timeout check” as an additional read timeout. the “min” is&lt;br&gt;  used so that people running with &lt;em&gt;very&lt;/em&gt; long “timeout connect” (eg. those&lt;br&gt;  who needed this due to the queue or tarpit) do not slow down their checks.&lt;br&gt;  (please also note that there is no valid reason to have such long connect&lt;br&gt;  timeouts, because “timeout queue” and “timeout tarpit” can always be used to&lt;br&gt;  avoid that).&lt;/p&gt;
&lt;p&gt;  if “timeout check” is not set haproxy uses “inter” for complete check&lt;br&gt;  timeout (connect + read) exactly like all &amp;lt;1.3.15 version.&lt;/p&gt;
&lt;p&gt;  in most cases check request is much simpler and faster to handle than normal&lt;br&gt;  requests and people may want to kick out laggy servers so this timeout should&lt;br&gt;  be smaller than “timeout server”.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it.&lt;/p&gt;
&lt;p&gt;  see also: “timeout connect”, “timeout queue”, “timeout server”,&lt;br&gt;            “timeout tarpit”.&lt;/p&gt;
&lt;p&gt;timeout client &lt;timeout&gt;&lt;br&gt;timeout clitimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum inactivity time on the client side.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the client is expected to acknowledge or&lt;br&gt;  send data. in http mode, this timeout is particularly important to consider&lt;br&gt;  during the first phase, when the client sends the request, and during the&lt;br&gt;  response while it is reading data sent by the server. the value is specified&lt;br&gt;  in milliseconds by default, but can be in any other unit if the number is&lt;br&gt;  suffixed by the unit, as specified at the top of this document. in tcp mode&lt;br&gt;  (and to a lesser extent, in http mode), it is highly recommended that the&lt;br&gt;  client timeout remains equal to the server timeout in order to avoid complex&lt;br&gt;  situations to debug. it is a good practice to cover one or several tcp packet&lt;br&gt;  losses by specifying timeouts that are slightly above multiples of 3 seconds&lt;br&gt;  (eg: 4 or 5 seconds). if some long-lived sessions are mixed with short-lived&lt;br&gt;  sessions (eg: websocket and http), it’s worth considering “timeout tunnel”,&lt;br&gt;  which overrides “timeout client” and “timeout server” for tunnels, as well as&lt;br&gt;  “timeout client-fin” for half-closed connections.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to frontends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of expired sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter replaces the old, deprecated “clitimeout”. it is recommended&lt;br&gt;  to use it to write new configurations. the form “timeout clitimeout” is&lt;br&gt;  provided only by backwards compatibility but its use is strongly discouraged.&lt;/p&gt;
&lt;p&gt;  see also : “clitimeout”, “timeout server”, “timeout tunnel”.&lt;/p&gt;
&lt;p&gt;timeout client-fin &lt;timeout&gt;&lt;br&gt;  set the inactivity timeout on the client side for half-closed connections.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the client is expected to acknowledge or&lt;br&gt;  send data while one direction is already shut down. this timeout is different&lt;br&gt;  from “timeout client” in that it only applies to connections which are closed&lt;br&gt;  in one direction. this is particularly useful to avoid keeping connections in&lt;br&gt;  fin_wait state for too long when clients do not disconnect cleanly. this&lt;br&gt;  problem is particularly common long connections such as rdp or websocket.&lt;br&gt;  note that this timeout can override “timeout tunnel” when a connection shuts&lt;br&gt;  down in one direction.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to frontends, but can be specified once for all in&lt;br&gt;  “defaults” sections. by default it is not set, so half-closed connections&lt;br&gt;  will use the other timeouts (timeout.client or timeout.tunnel).&lt;/p&gt;
&lt;p&gt;  see also : “timeout client”, “timeout server-fin”, and “timeout tunnel”.&lt;/p&gt;
&lt;p&gt;timeout connect &lt;timeout&gt;&lt;br&gt;timeout contimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum time to wait for a connection attempt to a server to succeed.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  if the server is located on the same lan as haproxy, the connection should be&lt;br&gt;  immediate (less than a few milliseconds). anyway, it is a good practice to&lt;br&gt;  cover one or several tcp packet losses by specifying timeouts that are&lt;br&gt;  slightly above multiples of 3 seconds (eg: 4 or 5 seconds). by default, the&lt;br&gt;  connect timeout also presets both queue and tarpit timeouts to the same value&lt;br&gt;  if these have not been specified.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of failed sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter replaces the old, deprecated “contimeout”. it is recommended&lt;br&gt;  to use it to write new configurations. the form “timeout contimeout” is&lt;br&gt;  provided only by backwards compatibility but its use is strongly discouraged.&lt;/p&gt;
&lt;p&gt;  see also: “timeout check”, “timeout queue”, “timeout server”, “contimeout”,&lt;br&gt;            “timeout tarpit”.&lt;/p&gt;
&lt;p&gt;timeout http-keep-alive &lt;timeout&gt;&lt;br&gt;  set the maximum allowed time to wait for a new http request to appear&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  by default, the time to wait for a new request in case of keep-alive is set&lt;br&gt;  by “timeout http-request”. however this is not always convenient because some&lt;br&gt;  people want very short keep-alive timeouts in order to release connections&lt;br&gt;  faster, and others prefer to have larger ones but still have short timeouts&lt;br&gt;  once the request has started to present itself.&lt;/p&gt;
&lt;p&gt;  the “http-keep-alive” timeout covers these needs. it will define how long to&lt;br&gt;  wait for a new http request to start coming after a response was sent. once&lt;br&gt;  the first byte of request has been seen, the “http-request” timeout is used&lt;br&gt;  to wait for the complete request to come. note that empty lines prior to a&lt;br&gt;  new request do not refresh the timeout and are not counted as a new request.&lt;/p&gt;
&lt;p&gt;  there is also another difference between the two timeouts : when a connection&lt;br&gt;  expires during timeout http-keep-alive, no error is returned, the connection&lt;br&gt;  just closes. if the connection expires in “http-request” while waiting for a&lt;br&gt;  connection to complete, a http 408 error is returned.&lt;/p&gt;
&lt;p&gt;  in general it is optimal to set this value to a few tens to hundreds of&lt;br&gt;  milliseconds, to allow users to fetch all objects of a page at once but&lt;br&gt;  without waiting for further clicks. also, if set to a very small value (eg:&lt;br&gt;  1 millisecond) it will probably only accept pipelined requests but not the&lt;br&gt;  non-pipelined ones. it may be a nice trade-off for very large sites running&lt;br&gt;  with tens to hundreds of thousands of clients.&lt;/p&gt;
&lt;p&gt;  if this parameter is not set, the “http-request” timeout applies, and if both&lt;br&gt;  are not set, “timeout client” still applies at the lower level. it should be&lt;br&gt;  set in the frontend to take effect, unless the frontend is in tcp mode, in&lt;br&gt;  which case the http backend’s timeout will be used.&lt;/p&gt;
&lt;p&gt;  see also : “timeout http-request”, “timeout client”.&lt;/p&gt;
&lt;p&gt;timeout http-request &lt;timeout&gt;&lt;br&gt;  set the maximum allowed time to wait for a complete http request&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  in order to offer dos protection, it may be required to lower the maximum&lt;br&gt;  accepted time to receive a complete http request without affecting the client&lt;br&gt;  timeout. this helps protecting against established connections on which&lt;br&gt;  nothing is sent. the client timeout cannot offer a good protection against&lt;br&gt;  this abuse because it is an inactivity timeout, which means that if the&lt;br&gt;  attacker sends one character every now and then, the timeout will not&lt;br&gt;  trigger. with the http request timeout, no matter what speed the client&lt;br&gt;  types, the request will be aborted if it does not complete in time. when the&lt;br&gt;  timeout expires, an http 408 response is sent to the client to inform it&lt;br&gt;  about the problem, and the connection is closed. the logs will report&lt;br&gt;  termination codes “cr”. some recent browsers are having problems with this&lt;br&gt;  standard, well-documented behaviour, so it might be needed to hide the 408&lt;br&gt;  code using “option http-ignore-probes” or “errorfile 408 /dev/null”. see&lt;br&gt;  more details in the explanations of the “cr” termination code in section 8.5.&lt;/p&gt;
&lt;p&gt;  note that this timeout only applies to the header part of the request, and&lt;br&gt;  not to any data. as soon as the empty line is received, this timeout is not&lt;br&gt;  used anymore. it is used again on keep-alive connections to wait for a second&lt;br&gt;  request if “timeout http-keep-alive” is not set.&lt;/p&gt;
&lt;p&gt;  generally it is enough to set it to a few seconds, as most clients send the&lt;br&gt;  full request immediately upon connection. add 3 or more seconds to cover tcp&lt;br&gt;  retransmits but that’s all. setting it to very low values (eg: 50 ms) will&lt;br&gt;  generally work on local networks as long as there are no packet losses. this&lt;br&gt;  will prevent people from sending bare http requests using telnet.&lt;/p&gt;
&lt;p&gt;  if this parameter is not set, the client timeout still applies between each&lt;br&gt;  chunk of the incoming request. it should be set in the frontend to take&lt;br&gt;  effect, unless the frontend is in tcp mode, in which case the http backend’s&lt;br&gt;  timeout will be used.&lt;/p&gt;
&lt;p&gt;  see also : “errorfile”, “http-ignore-probes”, “timeout http-keep-alive”, and&lt;br&gt;             “timeout client”.&lt;/p&gt;
&lt;p&gt;timeout queue &lt;timeout&gt;&lt;br&gt;  set the maximum time to wait in the queue for a connection slot to be free&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  when a server’s maxconn is reached, connections are left pending in a queue&lt;br&gt;  which may be server-specific or global to the backend. in order not to wait&lt;br&gt;  indefinitely, a timeout is applied to requests pending in the queue. if the&lt;br&gt;  timeout is reached, it is considered that the request will almost never be&lt;br&gt;  served, so it is dropped and a 503 error is returned to the client.&lt;/p&gt;
&lt;p&gt;  the “timeout queue” statement allows to fix the maximum time for a request to&lt;br&gt;  be left pending in a queue. if unspecified, the same value as the backend’s&lt;br&gt;  connection timeout (“timeout connect”) is used, for backwards compatibility&lt;br&gt;  with older versions with no “timeout queue” parameter.&lt;/p&gt;
&lt;p&gt;  see also : “timeout connect”, “contimeout”.&lt;/p&gt;
&lt;p&gt;timeout server &lt;timeout&gt;&lt;br&gt;timeout srvtimeout &lt;timeout&gt; (deprecated)&lt;br&gt;  set the maximum inactivity time on the server side.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the server is expected to acknowledge or&lt;br&gt;  send data. in http mode, this timeout is particularly important to consider&lt;br&gt;  during the first phase of the server’s response, when it has to send the&lt;br&gt;  headers, as it directly represents the server’s processing time for the&lt;br&gt;  request. to find out what value to put there, it’s often good to start with&lt;br&gt;  what would be considered as unacceptable response times, then check the logs&lt;br&gt;  to observe the response time distribution, and adjust the value accordingly.&lt;/p&gt;
&lt;p&gt;  the value is specified in milliseconds by default, but can be in any other&lt;br&gt;  unit if the number is suffixed by the unit, as specified at the top of this&lt;br&gt;  document. in tcp mode (and to a lesser extent, in http mode), it is highly&lt;br&gt;  recommended that the client timeout remains equal to the server timeout in&lt;br&gt;  order to avoid complex situations to debug. whatever the expected server&lt;br&gt;  response times, it is a good practice to cover at least one or several tcp&lt;br&gt;  packet losses by specifying timeouts that are slightly above multiples of 3&lt;br&gt;  seconds (eg: 4 or 5 seconds minimum). if some long-lived sessions are mixed&lt;br&gt;  with short-lived sessions (eg: websocket and http), it’s worth considering&lt;br&gt;  “timeout tunnel”, which overrides “timeout client” and “timeout server” for&lt;br&gt;  tunnels.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it. an unspecified timeout results in an infinite timeout, which&lt;br&gt;  is not recommended. such a usage is accepted and works but reports a warning&lt;br&gt;  during startup because it may results in accumulation of expired sessions in&lt;br&gt;  the system if the system’s timeouts are not configured either.&lt;/p&gt;
&lt;p&gt;  this parameter replaces the old, deprecated “srvtimeout”. it is recommended&lt;br&gt;  to use it to write new configurations. the form “timeout srvtimeout” is&lt;br&gt;  provided only by backwards compatibility but its use is strongly discouraged.&lt;/p&gt;
&lt;p&gt;  see also : “srvtimeout”, “timeout client” and “timeout tunnel”.&lt;/p&gt;
&lt;p&gt;timeout server-fin &lt;timeout&gt;&lt;br&gt;  set the inactivity timeout on the server side for half-closed connections.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the inactivity timeout applies when the server is expected to acknowledge or&lt;br&gt;  send data while one direction is already shut down. this timeout is different&lt;br&gt;  from “timeout server” in that it only applies to connections which are closed&lt;br&gt;  in one direction. this is particularly useful to avoid keeping connections in&lt;br&gt;  fin_wait state for too long when a remote server does not disconnect cleanly.&lt;br&gt;  this problem is particularly common long connections such as rdp or websocket.&lt;br&gt;  note that this timeout can override “timeout tunnel” when a connection shuts&lt;br&gt;  down in one direction. this setting was provided for completeness, but in most&lt;br&gt;  situations, it should not be needed.&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. by default it is not set, so half-closed connections&lt;br&gt;  will use the other timeouts (timeout.server or timeout.tunnel).&lt;/p&gt;
&lt;p&gt;  see also : “timeout client-fin”, “timeout server”, and “timeout tunnel”.&lt;/p&gt;
&lt;p&gt;timeout tarpit &lt;timeout&gt;&lt;br&gt;  set the duration for which tarpitted connections will be maintained&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    yes   |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the tarpit duration specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  when a connection is tarpitted using “reqtarpit”, it is maintained open with&lt;br&gt;  no activity for a certain amount of time, then closed. “timeout tarpit”&lt;br&gt;  defines how long it will be maintained open.&lt;/p&gt;
&lt;p&gt;  the value is specified in milliseconds by default, but can be in any other&lt;br&gt;  unit if the number is suffixed by the unit, as specified at the top of this&lt;br&gt;  document. if unspecified, the same value as the backend’s connection timeout&lt;br&gt;  (“timeout connect”) is used, for backwards compatibility with older versions&lt;br&gt;  with no “timeout tarpit” parameter.&lt;/p&gt;
&lt;p&gt;  see also : “timeout connect”, “contimeout”.&lt;/p&gt;
&lt;p&gt;timeout tunnel &lt;timeout&gt;&lt;br&gt;  set the maximum inactivity time on the client and server side for tunnels.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;timeout&gt; is the timeout value specified in milliseconds by default, but&lt;br&gt;              can be in any other unit if the number is suffixed by the unit,&lt;br&gt;              as explained at the top of this document.&lt;/timeout&gt;&lt;/timeout&gt;&lt;/p&gt;
&lt;p&gt;  the tunnel timeout applies when a bidirectional connection is established&lt;br&gt;  between a client and a server, and the connection remains inactive in both&lt;br&gt;  directions. this timeout supersedes both the client and server timeouts once&lt;br&gt;  the connection becomes a tunnel. in tcp, this timeout is used as soon as no&lt;br&gt;  analyser remains attached to either connection (eg: tcp content rules are&lt;br&gt;  accepted). in http, this timeout is used when a connection is upgraded (eg:&lt;br&gt;  when switching to the websocket protocol, or forwarding a connect request&lt;br&gt;  to a proxy), or after the first response when no keepalive/close option is&lt;br&gt;  specified.&lt;/p&gt;
&lt;p&gt;  since this timeout is usually used in conjunction with long-lived connections,&lt;br&gt;  it usually is a good idea to also set “timeout client-fin” to handle the&lt;br&gt;  situation where a client suddenly disappears from the net and does not&lt;br&gt;  acknowledge a close, or sends a shutdown and does not acknowledge pending&lt;br&gt;  data anymore. this can happen in lossy networks where firewalls are present,&lt;br&gt;  and is detected by the presence of large amounts of sessions in a fin_wait&lt;br&gt;  state.&lt;/p&gt;
&lt;p&gt;  the value is specified in milliseconds by default, but can be in any other&lt;br&gt;  unit if the number is suffixed by the unit, as specified at the top of this&lt;br&gt;  document. whatever the expected normal idle time, it is a good practice to&lt;br&gt;  cover at least one or several tcp packet losses by specifying timeouts that&lt;br&gt;  are slightly above multiples of 3 seconds (eg: 4 or 5 seconds minimum).&lt;/p&gt;
&lt;p&gt;  this parameter is specific to backends, but can be specified once for all in&lt;br&gt;  “defaults” sections. this is in fact one of the easiest solutions not to&lt;br&gt;  forget about it.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        defaults http&lt;br&gt;            option http-server-close&lt;br&gt;            timeout connect 5s&lt;br&gt;            timeout client 30s&lt;br&gt;            timeout client-fin 30s&lt;br&gt;            timeout server 30s&lt;br&gt;            timeout tunnel  1h    # timeout to use with websocket and connect&lt;/p&gt;
&lt;p&gt;  see also : “timeout client”, “timeout client-fin”, “timeout server”.&lt;/p&gt;
&lt;p&gt;transparent (deprecated)&lt;br&gt;  enable client-side transparent proxying&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                 yes   |    no    |   yes  |   yes&lt;br&gt;  arguments : none&lt;/p&gt;
&lt;p&gt;  this keyword was introduced in order to provide layer 7 persistence to layer&lt;br&gt;  3 load balancers. the idea is to use the os’s ability to redirect an incoming&lt;br&gt;  connection for a remote address to a local process (here haproxy), and let&lt;br&gt;  this process know what address was initially requested. when this option is&lt;br&gt;  used, sessions without cookies will be forwarded to the original destination&lt;br&gt;  ip address of the incoming request (which should match that of another&lt;br&gt;  equipment), while requests with cookies will still be forwarded to the&lt;br&gt;  appropriate server.&lt;/p&gt;
&lt;p&gt;  the “transparent” keyword is deprecated, use “option transparent” instead.&lt;/p&gt;
&lt;p&gt;  note that contrary to a common belief, this option does not make haproxy&lt;br&gt;  present the client’s ip to the server when establishing the connection.&lt;/p&gt;
&lt;p&gt;  see also: “option transparent”&lt;/p&gt;
&lt;p&gt;unique-id-format &lt;string&gt;&lt;br&gt;  generate a unique id for each request.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  yes  |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;string&gt;   is a log-format string.&lt;/string&gt;&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;  this keyword creates a id for each request using the custom log format. a&lt;br&gt;  unique id is useful to trace a request passing through many components of&lt;br&gt;  a complex infrastructure. the newly created id may also be logged using the&lt;br&gt;  %id tag the log-format string.&lt;/p&gt;
&lt;p&gt;  the format should be composed from elements that are guaranteed to be&lt;br&gt;  unique when combined together. for instance, if multiple haproxy instances&lt;br&gt;  are involved, it might be important to include the node name. it is often&lt;br&gt;  needed to log the incoming connection’s source and destination addresses&lt;br&gt;  and ports. note that since multiple requests may be performed over the same&lt;br&gt;  connection, including a request counter may help differentiate them.&lt;br&gt;  similarly, a timestamp may protect against a rollover of the counter.&lt;br&gt;  logging the process id will avoid collisions after a service restart.&lt;/p&gt;
&lt;p&gt;  it is recommended to use hexadecimal notation for many fields since it&lt;br&gt;  makes them more compact and saves space in logs.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;unique-id-format %{+x}o\ %ci:%cp_%fi:%fp_%ts_%rt:%pid

will generate:

       7f000001:8296_7f00001e:1f90_4f7b0a69_0003:790a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “unique-id-header”&lt;/p&gt;
&lt;p&gt;unique-id-header &lt;name&gt;&lt;br&gt;  add a unique id header in the http request.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  yes  |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;name&gt;   is the name of the header.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  add a unique-id header in the http request sent to the server, using the&lt;br&gt;  unique-id-format. it can’t work if the unique-id-format doesn’t exist.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    unique-id-format %{+x}o\ %ci:%cp_%fi:%fp_%ts_%rt:%pid
    unique-id-header x-unique-id

    will generate:

       x-unique-id: 7f000001:8296_7f00001e:1f90_4f7b0a69_0003:790a

see also: &amp;quot;unique-id-format&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;use_backend &lt;backend&gt; [{if | unless} &lt;condition&gt;]&lt;br&gt;  switch to a specific backend if/unless an acl-based condition is matched.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    yes   |   yes  |   no&lt;br&gt;  arguments :&lt;br&gt;    &lt;backend&gt;   is the name of a valid backend or “listen” section, or a&lt;br&gt;                “log-format” string resolving to a backend name.&lt;/backend&gt;&lt;/condition&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;condition&amp;gt; is a condition composed of acls, as described in section 7\. if
            it is omitted, the rule is unconditionally applied.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when doing content-switching, connections arrive on a frontend and are then&lt;br&gt;  dispatched to various backends depending on a number of conditions. the&lt;br&gt;  relation between the conditions and the backends is described with the&lt;br&gt;  “use_backend” keyword. while it is normally used with http processing, it can&lt;br&gt;  also be used in pure tcp, either without content using stateless acls (eg:&lt;br&gt;  source address validation) or combined with a “tcp-request” rule to wait for&lt;br&gt;  some payload.&lt;/p&gt;
&lt;p&gt;  there may be as many “use_backend” rules as desired. all of these rules are&lt;br&gt;  evaluated in their declaration order, and the first one which matches will&lt;br&gt;  assign the backend.&lt;/p&gt;
&lt;p&gt;  in the first form, the backend will be used if the condition is met. in the&lt;br&gt;  second form, the backend will be used if the condition is not met. if no&lt;br&gt;  condition is valid, the backend defined with “default_backend” will be used.&lt;br&gt;  if no default backend is defined, either the servers in the same section are&lt;br&gt;  used (in case of a “listen” section) or, in case of a frontend, no server is&lt;br&gt;  used and a 503 service unavailable response is returned.&lt;/p&gt;
&lt;p&gt;  note that it is possible to switch from a tcp frontend to an http backend. in&lt;br&gt;  this case, either the frontend has already checked that the protocol is http,&lt;br&gt;  and backend processing will immediately follow, or the backend will wait for&lt;br&gt;  a complete http request to get in. this feature is useful when a frontend&lt;br&gt;  must decode several protocols on a unique port, one of them being http.&lt;/p&gt;
&lt;p&gt;  when &lt;backend&gt; is a simple name, it is resolved at configuration time, and an&lt;br&gt;  error is reported if the specified backend does not exist. if &lt;backend&gt; is&lt;br&gt;  a log-format string instead, no check may be done at configuration time, so&lt;br&gt;  the backend name is resolved dynamically at run time. if the resulting&lt;br&gt;  backend name does not correspond to any valid backend, no other rule is&lt;br&gt;  evaluated, and the default_backend directive is applied instead. note that&lt;br&gt;  when using dynamic backend names, it is highly recommended to use a prefix&lt;br&gt;  that no other backend uses in order to ensure that an unauthorized backend&lt;br&gt;  cannot be forced from the request.&lt;/backend&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  it is worth mentioning that “use_backend” rules with an explicit name are&lt;br&gt;  used to detect the association between frontends and backends to compute the&lt;br&gt;  backend’s “fullconn” setting. this cannot be done for dynamic names.&lt;/p&gt;
&lt;p&gt;  see also: “default_backend”, “tcp-request”, “fullconn”, “log-format”, and&lt;br&gt;            section 7 about acls.&lt;/p&gt;
&lt;p&gt;use-server &lt;server&gt; if &lt;condition&gt;&lt;br&gt;use-server &lt;server&gt; unless &lt;condition&gt;&lt;br&gt;  only use a specific server if/unless an acl-based condition is matched.&lt;br&gt;  may be used in sections :   defaults | frontend | listen | backend&lt;br&gt;                                  no   |    no    |   yes  |   yes&lt;br&gt;  arguments :&lt;br&gt;    &lt;server&gt;    is the name of a valid server in the same backend section.&lt;/server&gt;&lt;/condition&gt;&lt;/server&gt;&lt;/condition&gt;&lt;/server&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;condition&amp;gt; is a condition composed of acls, as described in section 7.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  by default, connections which arrive to a backend are load-balanced across&lt;br&gt;  the available servers according to the configured algorithm, unless a&lt;br&gt;  persistence mechanism such as a cookie is used and found in the request.&lt;/p&gt;
&lt;p&gt;  sometimes it is desirable to forward a particular request to a specific&lt;br&gt;  server without having to declare a dedicated backend for this server. this&lt;br&gt;  can be achieved using the “use-server” rules. these rules are evaluated after&lt;br&gt;  the “redirect” rules and before evaluating cookies, and they have precedence&lt;br&gt;  on them. there may be as many “use-server” rules as desired. all of these&lt;br&gt;  rules are evaluated in their declaration order, and the first one which&lt;br&gt;  matches will assign the server.&lt;/p&gt;
&lt;p&gt;  if a rule designates a server which is down, and “option persist” is not used&lt;br&gt;  and no force-persist rule was validated, it is ignored and evaluation goes on&lt;br&gt;  with the next rules until one matches.&lt;/p&gt;
&lt;p&gt;  in the first form, the server will be used if the condition is met. in the&lt;br&gt;  second form, the server will be used if the condition is not met. if no&lt;br&gt;  condition is valid, the processing continues and the server will be assigned&lt;br&gt;  according to other persistence mechanisms.&lt;/p&gt;
&lt;p&gt;  note that even if a rule is matched, cookie processing is still performed but&lt;br&gt;  does not assign the server. this allows prefixed cookies to have their prefix&lt;br&gt;  stripped.&lt;/p&gt;
&lt;p&gt;  the “use-server” statement works both in http and tcp mode. this makes it&lt;br&gt;  suitable for use with content-based inspection. for instance, a server could&lt;br&gt;  be selected in a farm according to the tls sni field. and if these servers&lt;br&gt;  have their weight set to zero, they will not be used for other traffic.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# intercept incoming tls requests based on the sni field
use-server www if { req_ssl_sni -i www.example.com }
server     www 192.168.0.1:443 weight 0
use-server mail if { req_ssl_sni -i mail.example.com }
server     mail 192.168.0.1:587 weight 0
use-server imap if { req_ssl_sni -i imap.example.com }
server     mail 192.168.0.1:993 weight 0
# all the rest is forwarded to this server
server  default 192.168.0.2:443 check
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also: “use_backend”, section 5 about server and section 7 about acls.&lt;/p&gt;
&lt;h2 id=&quot;5-bind-and-server-options&quot;&gt;&lt;a href=&quot;#5-bind-and-server-options&quot; class=&quot;headerlink&quot; title=&quot;5. bind and server options&quot;&gt;&lt;/a&gt;5. bind and server options&lt;/h2&gt;&lt;p&gt;the “bind”, “server” and “default-server” keywords support a number of settings&lt;br&gt;depending on some build options and on the system haproxy was built on. these&lt;br&gt;settings generally each consist in one word sometimes followed by a value,&lt;br&gt;written on the same line as the “bind” or “server” line. all these options are&lt;br&gt;described in this section.&lt;/p&gt;
&lt;h2 id=&quot;5-1-bind-options&quot;&gt;&lt;a href=&quot;#5-1-bind-options&quot; class=&quot;headerlink&quot; title=&quot;5.1. bind options&quot;&gt;&lt;/a&gt;5.1. bind options&lt;/h2&gt;&lt;p&gt;the “bind” keyword supports a certain number of settings which are all passed&lt;br&gt;as arguments on the same line. the order in which those arguments appear makes&lt;br&gt;no importance, provided that they appear after the bind address. all of these&lt;br&gt;parameters are optional. some of them consist in a single words (booleans),&lt;br&gt;while other ones expect a value after them. in this case, the value must be&lt;br&gt;provided immediately after the setting name.&lt;/p&gt;
&lt;p&gt;the currently supported settings are the following ones.&lt;/p&gt;
&lt;p&gt;accept-proxy&lt;br&gt;  enforces the use of the proxy protocol over any connection accepted by any of&lt;br&gt;  the sockets declared on the same line. versions 1 and 2 of the proxy protocol&lt;br&gt;  are supported and correctly detected. the proxy protocol dictates the layer&lt;br&gt;  3/4 addresses of the incoming connection to be used everywhere an address is&lt;br&gt;  used, with the only exception of “tcp-request connection” rules which will&lt;br&gt;  only see the real connection address. logs will reflect the addresses&lt;br&gt;  indicated in the protocol, unless it is violated, in which case the real&lt;br&gt;  address will still be used.  this keyword combined with support from external&lt;br&gt;  components can be used as an efficient and reliable alternative to the&lt;br&gt;  x-forwarded-for mechanism which is not always reliable and not even always&lt;br&gt;  usable. see also “tcp-request connection expect-proxy” for a finer-grained&lt;br&gt;  setting of which client is allowed to use the protocol.&lt;/p&gt;
&lt;p&gt;alpn &lt;protocols&gt;&lt;br&gt;  this enables the tls alpn extension and advertises the specified protocol&lt;br&gt;  list as supported on top of alpn. the protocol list consists in a comma-&lt;br&gt;  delimited list of protocol names, for instance: “http/1.1,http/1.0” (without&lt;br&gt;  quotes). this requires that the ssl library is build with support for tls&lt;br&gt;  extensions enabled (check with haproxy -vv). the alpn extension replaces the&lt;br&gt;  initial npn extension.&lt;/protocols&gt;&lt;/p&gt;
&lt;p&gt;backlog &lt;backlog&gt;&lt;br&gt;  sets the socket’s backlog to this value. if unspecified, the frontend’s&lt;br&gt;  backlog is used instead, which generally defaults to the maxconn value.&lt;/backlog&gt;&lt;/p&gt;
&lt;p&gt;ecdhe &lt;named curve=&quot;&quot;&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  the named curve (rfc 4492) used to generate ecdh ephemeral keys. by default,&lt;br&gt;  used named curve is prime256v1.&lt;/named&gt;&lt;/p&gt;
&lt;p&gt;ca-file &lt;cafile&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file from which to load ca certificates used to verify&lt;br&gt;  client’s certificate.&lt;/cafile&gt;&lt;/p&gt;
&lt;p&gt;ca-ignore-err [all|&lt;errorid&gt;,…]&lt;br&gt;  this setting is only available when support for openssl was built in.&lt;br&gt;  sets a comma separated list of errorids to ignore during verify at depth &amp;gt; 0.&lt;br&gt;  if set to ‘all’, all errors are ignored. ssl handshake is not aborted if an&lt;br&gt;  error is ignored.&lt;/errorid&gt;&lt;/p&gt;
&lt;p&gt;ca-sign-file &lt;cafile&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file containing both the ca certificate and the ca private&lt;br&gt;  key used to create and sign server’s certificates. this is a mandatory&lt;br&gt;  setting when the dynamic generation of certificates is enabled. see&lt;br&gt;  ‘generate-certificates’ for details.&lt;/cafile&gt;&lt;/p&gt;
&lt;p&gt;ca-sign-passphrase &lt;passphrase&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it is&lt;br&gt;  the ca private key passphrase. this setting is optional and used only when&lt;br&gt;  the dynamic generation of certificates is enabled. see&lt;br&gt;  ‘generate-certificates’ for details.&lt;/passphrase&gt;&lt;/p&gt;
&lt;p&gt;ciphers &lt;ciphers&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it sets&lt;br&gt;  the string describing the list of cipher algorithms (“cipher suite”) that are&lt;br&gt;  negotiated during the ssl/tls handshake. the format of the string is defined&lt;br&gt;  in “man 1 ciphers” from openssl man pages, and can be for instance a string&lt;br&gt;  such as “aes:all:!anull:!enull:+rc4:@strength” (without quotes).&lt;/ciphers&gt;&lt;/p&gt;
&lt;p&gt;crl-file &lt;crlfile&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file from which to load certificate revocation list used&lt;br&gt;  to verify client’s certificate.&lt;/crlfile&gt;&lt;/p&gt;
&lt;p&gt;crt &lt;cert&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file containing both the required certificates and any&lt;br&gt;  associated private keys. this file can be built by concatenating multiple&lt;br&gt;  pem files into one (e.g. cat cert.pem key.pem &amp;gt; combined.pem). if your ca&lt;br&gt;  requires an intermediate certificate, this can also be concatenated into this&lt;br&gt;  file.&lt;/cert&gt;&lt;/p&gt;
&lt;p&gt;  if the openssl used supports diffie-hellman, parameters present in this file&lt;br&gt;  are loaded.&lt;/p&gt;
&lt;p&gt;  if a directory name is used instead of a pem file, then all files found in&lt;br&gt;  that directory will be loaded in alphabetic order unless their name ends with&lt;br&gt;  ‘.issuer’, ‘.ocsp’ or ‘.sctl’ (reserved extensions). this directive may be&lt;br&gt;  specified multiple times in order to load certificates from multiple files or&lt;br&gt;  directories. the certificates will be presented to clients who provide a&lt;br&gt;  valid tls server name indication field matching one of their cn or alt&lt;br&gt;  subjects.  wildcards are supported, where a wildcard character ‘&lt;em&gt;‘ is used&lt;br&gt;  instead of the first hostname component (eg: &lt;/em&gt;.example.org matches&lt;br&gt;  www.example.org but not www.sub.example.org).&lt;/p&gt;
&lt;p&gt;  if no sni is provided by the client or if the ssl library does not support&lt;br&gt;  tls extensions, or if the client provides an sni hostname which does not&lt;br&gt;  match any certificate, then the first loaded certificate will be presented.&lt;br&gt;  this means that when loading certificates from a directory, it is highly&lt;br&gt;  recommended to load the default one first as a file or to ensure that it will&lt;br&gt;  always be the first one in the directory.&lt;/p&gt;
&lt;p&gt;  note that the same cert may be loaded multiple times without side effects.&lt;/p&gt;
&lt;p&gt;  some cas (such as godaddy) offer a drop down list of server types that do not&lt;br&gt;  include haproxy when obtaining a certificate. if this happens be sure to&lt;br&gt;  choose a webserver that the ca believes requires an intermediate ca (for&lt;br&gt;  godaddy, selection apache tomcat will get the correct bundle, but many&lt;br&gt;  others, e.g. nginx, result in a wrong bundle that will not work for some&lt;br&gt;  clients).&lt;/p&gt;
&lt;p&gt;  for each pem file, haproxy checks for the presence of file at the same path&lt;br&gt;  suffixed by “.ocsp”. if such file is found, support for the tls certificate&lt;br&gt;  status request extension (also known as “ocsp stapling”) is automatically&lt;br&gt;  enabled. the content of this file is optional. if not empty, it must contain&lt;br&gt;  a valid ocsp response in der format. in order to be valid an ocsp response&lt;br&gt;  must comply with the following rules: it has to indicate a good status,&lt;br&gt;  it has to be a single response for the certificate of the pem file, and it&lt;br&gt;  has to be valid at the moment of addition. if these rules are not respected&lt;br&gt;  the ocsp response is ignored and a warning is emitted. in order to  identify&lt;br&gt;  which certificate an ocsp response applies to, the issuer’s certificate is&lt;br&gt;  necessary. if the issuer’s certificate is not found in the pem file, it will&lt;br&gt;  be loaded from a file at the same path as the pem file suffixed by “.issuer”&lt;br&gt;  if it exists otherwise it will fail with an error.&lt;/p&gt;
&lt;p&gt;  for each pem file, haproxy also checks for the presence of file at the same&lt;br&gt;  path suffixed by “.sctl”. if such file is found, support for certificate&lt;br&gt;  transparency (rfc6962) tls extension is enabled. the file must contain a&lt;br&gt;  valid signed certificate timestamp list, as described in rfc. file is parsed&lt;br&gt;  to check basic syntax, but no signatures are verified.&lt;/p&gt;
&lt;p&gt;crt-ignore-err &lt;errors&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. sets a&lt;br&gt;  comma separated list of errorids to ignore during verify at depth == 0.  if&lt;br&gt;  set to ‘all’, all errors are ignored. ssl handshake is not aborted if an error&lt;br&gt;  is ignored.&lt;/errors&gt;&lt;/p&gt;
&lt;p&gt;crt-list &lt;file&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a list of pem file with an optional list of sni filter per&lt;br&gt;  certificate, with the following format for each line :&lt;/file&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;crtfile&amp;gt; [[!]&amp;lt;snifilter&amp;gt; ...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  wildcards are supported in the sni filter. negative filter are also supported,&lt;br&gt;  only useful in combination with a wildcard filter to exclude a particular sni.&lt;br&gt;  the certificates will be presented to clients who provide a valid tls server&lt;br&gt;  name indication field matching one of the sni filters. if no sni filter is&lt;br&gt;  specified, the cn and alt subjects are used. this directive may be specified&lt;br&gt;  multiple times. see the “crt” option for more information. the default&lt;br&gt;  certificate is still needed to meet openssl expectations. if it is not used,&lt;br&gt;  the ‘strict-sni’ option may be used.&lt;/p&gt;
&lt;p&gt;defer-accept&lt;br&gt;  is an optional keyword which is supported only on certain linux kernels. it&lt;br&gt;  states that a connection will only be accepted once some data arrive on it,&lt;br&gt;  or at worst after the first retransmit. this should be used only on protocols&lt;br&gt;  for which the client talks first (eg: http). it can slightly improve&lt;br&gt;  performance by ensuring that most of the request is already available when&lt;br&gt;  the connection is accepted. on the other hand, it will not be able to detect&lt;br&gt;  connections which don’t talk. it is important to note that this option is&lt;br&gt;  broken in all kernels up to 2.6.31, as the connection is never accepted until&lt;br&gt;  the client talks. this can cause issues with front firewalls which would see&lt;br&gt;  an established connection while the proxy will only see it in syn_recv. this&lt;br&gt;  option is only supported on tcpv4/tcpv6 sockets and ignored by other ones.&lt;/p&gt;
&lt;p&gt;force-sslv3&lt;br&gt;  this option enforces use of sslv3 only on ssl connections instantiated from&lt;br&gt;  this listener. sslv3 is generally less expensive than the tls counterparts&lt;br&gt;  for high connection rates. this option is also available on global statement&lt;br&gt;  “ssl-default-bind-options”. see also “no-tlsv*” and “no-sslv3”.&lt;/p&gt;
&lt;p&gt;force-tlsv10&lt;br&gt;  this option enforces use of tlsv1.0 only on ssl connections instantiated from&lt;br&gt;  this listener. this option is also available on global statement&lt;br&gt;  “ssl-default-bind-options”. see also “no-tlsv*” and “no-sslv3”.&lt;/p&gt;
&lt;p&gt;force-tlsv11&lt;br&gt;  this option enforces use of tlsv1.1 only on ssl connections instantiated from&lt;br&gt;  this listener. this option is also available on global statement&lt;br&gt;  “ssl-default-bind-options”. see also “no-tlsv*”, and “no-sslv3”.&lt;/p&gt;
&lt;p&gt;force-tlsv12&lt;br&gt;  this option enforces use of tlsv1.2 only on ssl connections instantiated from&lt;br&gt;  this listener. this option is also available on global statement&lt;br&gt;  “ssl-default-bind-options”. see also “no-tlsv*”, and “no-sslv3”.&lt;/p&gt;
&lt;p&gt;generate-certificates&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  enables the dynamic ssl certificates generation. a ca certificate and its&lt;br&gt;  private key are necessary (see ‘ca-sign-file’). when haproxy is configured as&lt;br&gt;  a transparent forward proxy, ssl requests generate errors because of a common&lt;br&gt;  name mismatch on the certificate presented to the client. with this option&lt;br&gt;  enabled, haproxy will try to forge a certificate using the sni hostname&lt;br&gt;  indicated by the client. this is done only if no certificate matches the sni&lt;br&gt;  hostname (see ‘crt-list’). if an error occurs, the default certificate is&lt;br&gt;  used, else the ‘strict-sni’ option is set.&lt;br&gt;  it can also be used when haproxy is configured as a reverse proxy to ease the&lt;br&gt;  deployment of an architecture with many backends.&lt;/p&gt;
&lt;p&gt;  creating a ssl certificate is an expensive operation, so a lru cache is used&lt;br&gt;  to store forged certificates (see ‘tune.ssl.ssl-ctx-cache-size’). it&lt;br&gt;  increases the haproxy’s memroy footprint to reduce latency when the same&lt;br&gt;  certificate is used many times.&lt;/p&gt;
&lt;p&gt;gid &lt;gid&gt;&lt;br&gt;  sets the group of the unix sockets to the designated system gid. it can also&lt;br&gt;  be set by default in the global section’s “unix-bind” statement. note that&lt;br&gt;  some platforms simply ignore this. this setting is equivalent to the “group”&lt;br&gt;  setting except that the group id is used instead of its name. this setting is&lt;br&gt;  ignored by non unix sockets.&lt;/gid&gt;&lt;/p&gt;
&lt;p&gt;group &lt;group&gt;&lt;br&gt;  sets the group of the unix sockets to the designated system group. it can&lt;br&gt;  also be set by default in the global section’s “unix-bind” statement. note&lt;br&gt;  that some platforms simply ignore this. this setting is equivalent to the&lt;br&gt;  “gid” setting except that the group name is used instead of its gid. this&lt;br&gt;  setting is ignored by non unix sockets.&lt;/group&gt;&lt;/p&gt;
&lt;p&gt;id &lt;id&gt;&lt;br&gt;  fixes the socket id. by default, socket ids are automatically assigned, but&lt;br&gt;  sometimes it is more convenient to fix them to ease monitoring. this value&lt;br&gt;  must be strictly positive and unique within the listener/frontend. this&lt;br&gt;  option can only be used when defining only a single socket.&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;interface &lt;interface&gt;&lt;br&gt;  restricts the socket to a specific interface. when specified, only packets&lt;br&gt;  received from that particular interface are processed by the socket. this is&lt;br&gt;  currently only supported on linux. the interface must be a primary system&lt;br&gt;  interface, not an aliased interface. it is also possible to bind multiple&lt;br&gt;  frontends to the same address if they are bound to different interfaces. note&lt;br&gt;  that binding to a network interface requires root privileges. this parameter&lt;br&gt;  is only compatible with tcpv4/tcpv6 sockets.&lt;/interface&gt;&lt;/p&gt;
&lt;p&gt;level &lt;level&gt;&lt;br&gt;  this setting is used with the stats sockets only to restrict the nature of&lt;br&gt;  the commands that can be issued on the socket. it is ignored by other&lt;br&gt;  sockets. &lt;level&gt; can be one of :&lt;/level&gt;&lt;/level&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“user” is the least privileged level ; only non-sensitive stats can be&lt;br&gt;read, and no change is allowed. it would make sense on systems where it&lt;br&gt;is not easy to restrict access to the socket.&lt;/li&gt;
&lt;li&gt;“operator” is the default level and fits most common uses. all data can&lt;br&gt;be read, and only non-sensitive changes are permitted (eg: clear max&lt;br&gt;counters).&lt;/li&gt;
&lt;li&gt;“admin” should be used with care, as everything is permitted (eg: clear&lt;br&gt;all counters).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;maxconn &lt;maxconn&gt;&lt;br&gt;  limits the sockets to this number of concurrent connections. extraneous&lt;br&gt;  connections will remain in the system’s backlog until a connection is&lt;br&gt;  released. if unspecified, the limit will be the same as the frontend’s&lt;br&gt;  maxconn. note that in case of port ranges or multiple addresses, the same&lt;br&gt;  value will be applied to each socket. this setting enables different&lt;br&gt;  limitations on expensive sockets, for instance ssl entries which may easily&lt;br&gt;  eat all memory.&lt;/maxconn&gt;&lt;/p&gt;
&lt;p&gt;mode &lt;mode&gt;&lt;br&gt;  sets the octal mode used to define access permissions on the unix socket. it&lt;br&gt;  can also be set by default in the global section’s “unix-bind” statement.&lt;br&gt;  note that some platforms simply ignore this. this setting is ignored by non&lt;br&gt;  unix sockets.&lt;/mode&gt;&lt;/p&gt;
&lt;p&gt;mss &lt;maxseg&gt;&lt;br&gt;  sets the tcp maximum segment size (mss) value to be advertised on incoming&lt;br&gt;  connections. this can be used to force a lower mss for certain specific&lt;br&gt;  ports, for instance for connections passing through a vpn. note that this&lt;br&gt;  relies on a kernel feature which is theoretically supported under linux but&lt;br&gt;  was buggy in all versions prior to 2.6.28. it may or may not work on other&lt;br&gt;  operating systems. it may also not change the advertised value but change the&lt;br&gt;  effective size of outgoing segments. the commonly advertised value for tcpv4&lt;br&gt;  over ethernet networks is 1460 = 1500(mtu) - 40(ip+tcp). if this value is&lt;br&gt;  positive, it will be used as the advertised mss. if it is negative, it will&lt;br&gt;  indicate by how much to reduce the incoming connection’s advertised mss for&lt;br&gt;  outgoing segments. this parameter is only compatible with tcp v4/v6 sockets.&lt;/maxseg&gt;&lt;/p&gt;
&lt;p&gt;name &lt;name&gt;&lt;br&gt;  sets an optional name for these sockets, which will be reported on the stats&lt;br&gt;  page.&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;nice &lt;nice&gt;&lt;br&gt;  sets the ‘niceness’ of connections initiated from the socket. value must be&lt;br&gt;  in the range -1024..1024 inclusive, and defaults to zero. positive values&lt;br&gt;  means that such connections are more friendly to others and easily offer&lt;br&gt;  their place in the scheduler. on the opposite, negative values mean that&lt;br&gt;  connections want to run with a higher priority than others. the difference&lt;br&gt;  only happens under high loads when the system is close to saturation.&lt;br&gt;  negative values are appropriate for low-latency or administration services,&lt;br&gt;  and high values are generally recommended for cpu intensive tasks such as ssl&lt;br&gt;  processing or bulk transfers which are less sensible to latency. for example,&lt;br&gt;  it may make sense to use a positive value for an smtp socket and a negative&lt;br&gt;  one for an rdp socket.&lt;/nice&gt;&lt;/p&gt;
&lt;p&gt;no-sslv3&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables support for sslv3 on any sockets instantiated from the listener when&lt;br&gt;  ssl is supported. note that sslv2 is forced disabled in the code and cannot&lt;br&gt;  be enabled using any configuration option. this option is also available on&lt;br&gt;  global statement “ssl-default-bind-options”. see also “force-tls*”,&lt;br&gt;  and “force-sslv3”.&lt;/p&gt;
&lt;p&gt;no-tls-tickets&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables the stateless session resumption (rfc 5077 tls ticket&lt;br&gt;  extension) and force to use stateful session resumption. stateless&lt;br&gt;  session resumption is more expensive in cpu usage. this option is also&lt;br&gt;  available on global statement “ssl-default-bind-options”.&lt;/p&gt;
&lt;p&gt;no-tlsv10&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables support for tlsv1.0 on any sockets instantiated from the listener&lt;br&gt;  when ssl is supported. note that sslv2 is forced disabled in the code and&lt;br&gt;  cannot be enabled using any configuration option. this option is also&lt;br&gt;  available on global statement “ssl-default-bind-options”. see also&lt;br&gt;  “force-tlsv*”, and “force-sslv3”.&lt;/p&gt;
&lt;p&gt;no-tlsv11&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables support for tlsv1.1 on any sockets instantiated from the listener&lt;br&gt;  when ssl is supported. note that sslv2 is forced disabled in the code and&lt;br&gt;  cannot be enabled using any configuration option. this option is also&lt;br&gt;  available on global statement “ssl-default-bind-options”. see also&lt;br&gt;  “force-tlsv*”, and “force-sslv3”.&lt;/p&gt;
&lt;p&gt;no-tlsv12&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables support for tlsv1.2 on any sockets instantiated from the listener&lt;br&gt;  when ssl is supported. note that sslv2 is forced disabled in the code and&lt;br&gt;  cannot be enabled using any configuration option. this option is also&lt;br&gt;  available on global statement “ssl-default-bind-options”. see also&lt;br&gt;  “force-tlsv*”, and “force-sslv3”.&lt;/p&gt;
&lt;p&gt;npn &lt;protocols&gt;&lt;br&gt;  this enables the npn tls extension and advertises the specified protocol list&lt;br&gt;  as supported on top of npn. the protocol list consists in a comma-delimited&lt;br&gt;  list of protocol names, for instance: “http/1.1,http/1.0” (without quotes).&lt;br&gt;  this requires that the ssl library is build with support for tls extensions&lt;br&gt;  enabled (check with haproxy -vv). note that the npn extension has been&lt;br&gt;  replaced with the alpn extension (see the “alpn” keyword).&lt;/protocols&gt;&lt;/p&gt;
&lt;p&gt;process [ all | odd | even | &lt;number 1-64=&quot;&quot;&gt;[-&lt;number 1-64=&quot;&quot;&gt;] ]&lt;br&gt;  this restricts the list of processes on which this listener is allowed to&lt;br&gt;  run. it does not enforce any process but eliminates those which do not match.&lt;br&gt;  if the frontend uses a “bind-process” setting, the intersection between the&lt;br&gt;  two is applied. if in the end the listener is not allowed to run on any&lt;br&gt;  remaining process, a warning is emitted, and the listener will either run on&lt;br&gt;  the first process of the listener if a single process was specified, or on&lt;br&gt;  all of its processes if multiple processes were specified. for the unlikely&lt;br&gt;  case where several ranges are needed, this directive may be repeated. the&lt;br&gt;  main purpose of this directive is to be used with the stats sockets and have&lt;br&gt;  one different socket per process. the second purpose is to have multiple bind&lt;br&gt;  lines sharing the same ip:port but not the same process in a listener, so&lt;br&gt;  that the system can distribute the incoming connections into multiple queues&lt;br&gt;  and allow a smoother inter-process load balancing. currently linux 3.9 and&lt;br&gt;  above is known for supporting this. see also “bind-process” and “nbproc”.&lt;/number&gt;&lt;/number&gt;&lt;/p&gt;
&lt;p&gt;ssl&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  enables ssl deciphering on connections instantiated from this listener. a&lt;br&gt;  certificate is necessary (see “crt” above). all contents in the buffers will&lt;br&gt;  appear in clear text, so that acls and http processing will only have access&lt;br&gt;  to deciphered contents.&lt;/p&gt;
&lt;p&gt;strict-sni&lt;br&gt;  this setting is only available when support for openssl was built in. the&lt;br&gt;  ssl/tls negotiation is allow only if the client provided an sni which match&lt;br&gt;  a certificate. the default certificate is not used.&lt;br&gt;  see the “crt” option for more information.&lt;/p&gt;
&lt;p&gt;tcp-ut &lt;delay&gt;&lt;br&gt;  sets the tcp user timeout for all incoming connections instanciated from this&lt;br&gt;  listening socket. this option is available on linux since version 2.6.37. it&lt;br&gt;  allows haproxy to configure a timeout for sockets which contain data not&lt;br&gt;  receiving an acknoledgement for the configured delay. this is especially&lt;br&gt;  useful on long-lived connections experiencing long idle periods such as&lt;br&gt;  remote terminals or database connection pools, where the client and server&lt;br&gt;  timeouts must remain high to allow a long period of idle, but where it is&lt;br&gt;  important to detect that the client has disappeared in order to release all&lt;br&gt;  resources associated with its connection (and the server’s session). the&lt;br&gt;  argument is a delay expressed in milliseconds by default. this only works&lt;br&gt;  for regular tcp connections, and is ignored for other protocols.&lt;/delay&gt;&lt;/p&gt;
&lt;p&gt;tfo&lt;br&gt;  is an optional keyword which is supported only on linux kernels &amp;gt;= 3.7. it&lt;br&gt;  enables tcp fast open on the listening socket, which means that clients which&lt;br&gt;  support this feature will be able to send a request and receive a response&lt;br&gt;  during the 3-way handshake starting from second connection, thus saving one&lt;br&gt;  round-trip after the first connection. this only makes sense with protocols&lt;br&gt;  that use high connection rates and where each round trip matters. this can&lt;br&gt;  possibly cause issues with many firewalls which do not accept data on syn&lt;br&gt;  packets, so this option should only be enabled once well tested. this option&lt;br&gt;  is only supported on tcpv4/tcpv6 sockets and ignored by other ones. you may&lt;br&gt;  need to build haproxy with use_tfo=1 if your libc doesn’t define&lt;br&gt;  tcp_fastopen.&lt;/p&gt;
&lt;p&gt;tls-ticket-keys &lt;keyfile&gt;&lt;br&gt;  sets the tls ticket keys file to load the keys from. the keys need to be 48&lt;br&gt;  bytes long, encoded with base64 (ex. openssl rand -base64 48). number of keys&lt;br&gt;  is specified by the tls_tickets_no build option (default 3) and at least as&lt;br&gt;  many keys need to be present in the file. last tls_tickets_no keys will be&lt;br&gt;  used for decryption and the penultimate one for encryption. this enables easy&lt;br&gt;  key rotation by just appending new key to the file and reloading the process.&lt;br&gt;  keys must be periodically rotated (ex. every 12h) or perfect forward secrecy&lt;br&gt;  is compromised. it is also a good idea to keep the keys off any permanent&lt;br&gt;  storage such as hard drives (hint: use tmpfs and don’t swap those files).&lt;br&gt;  lifetime hint can be changed using tune.ssl.timeout.&lt;/keyfile&gt;&lt;/p&gt;
&lt;p&gt;transparent&lt;br&gt;  is an optional keyword which is supported only on certain linux kernels. it&lt;br&gt;  indicates that the addresses will be bound even if they do not belong to the&lt;br&gt;  local machine, and that packets targeting any of these addresses will be&lt;br&gt;  intercepted just as if the addresses were locally configured. this normally&lt;br&gt;  requires that ip forwarding is enabled. caution! do not use this with the&lt;br&gt;  default address ‘*’, as it would redirect any traffic for the specified port.&lt;br&gt;  this keyword is available only when haproxy is built with use_linux_tproxy=1.&lt;br&gt;  this parameter is only compatible with tcpv4 and tcpv6 sockets, depending on&lt;br&gt;  kernel version. some distribution kernels include backports of the feature,&lt;br&gt;  so check for support with your vendor.&lt;/p&gt;
&lt;p&gt;v4v6&lt;br&gt;  is an optional keyword which is supported only on most recent systems&lt;br&gt;  including linux kernels &amp;gt;= 2.4.21. it is used to bind a socket to both ipv4&lt;br&gt;  and ipv6 when it uses the default address. doing so is sometimes necessary&lt;br&gt;  on systems which bind to ipv6 only by default. it has no effect on non-ipv6&lt;br&gt;  sockets, and is overridden by the “v6only” option.&lt;/p&gt;
&lt;p&gt;v6only&lt;br&gt;  is an optional keyword which is supported only on most recent systems&lt;br&gt;  including linux kernels &amp;gt;= 2.4.21. it is used to bind a socket to ipv6 only&lt;br&gt;  when it uses the default address. doing so is sometimes preferred to doing it&lt;br&gt;  system-wide as it is per-listener. it has no effect on non-ipv6 sockets and&lt;br&gt;  has precedence over the “v4v6” option.&lt;/p&gt;
&lt;p&gt;uid &lt;uid&gt;&lt;br&gt;  sets the owner of the unix sockets to the designated system uid. it can also&lt;br&gt;  be set by default in the global section’s “unix-bind” statement. note that&lt;br&gt;  some platforms simply ignore this. this setting is equivalent to the “user”&lt;br&gt;  setting except that the user numeric id is used instead of its name. this&lt;br&gt;  setting is ignored by non unix sockets.&lt;/uid&gt;&lt;/p&gt;
&lt;p&gt;user &lt;user&gt;&lt;br&gt;  sets the owner of the unix sockets to the designated system user. it can also&lt;br&gt;  be set by default in the global section’s “unix-bind” statement. note that&lt;br&gt;  some platforms simply ignore this. this setting is equivalent to the “uid”&lt;br&gt;  setting except that the user name is used instead of its uid. this setting is&lt;br&gt;  ignored by non unix sockets.&lt;/user&gt;&lt;/p&gt;
&lt;p&gt;verify [none|optional|required]&lt;br&gt;  this setting is only available when support for openssl was built in. if set&lt;br&gt;  to ‘none’, client certificate is not requested. this is the default. in other&lt;br&gt;  cases, a client certificate is requested. if the client does not provide a&lt;br&gt;  certificate after the request and if ‘verify’ is set to ‘required’, then the&lt;br&gt;  handshake is aborted, while it would have succeeded if set to ‘optional’. the&lt;br&gt;  certificate provided by the client is always verified using cas from&lt;br&gt;  ‘ca-file’ and optional crls from ‘crl-file’. on verify failure the handshake&lt;br&gt;  is aborted, regardless of the ‘verify’ option, unless the error code exactly&lt;br&gt;  matches one of those listed with ‘ca-ignore-err’ or ‘crt-ignore-err’.&lt;/p&gt;
&lt;h2 id=&quot;5-2-server-and-default-server-options&quot;&gt;&lt;a href=&quot;#5-2-server-and-default-server-options&quot; class=&quot;headerlink&quot; title=&quot;5.2. server and default-server options&quot;&gt;&lt;/a&gt;5.2. server and default-server options&lt;/h2&gt;&lt;p&gt;the “server” and “default-server” keywords support a certain number of settings&lt;br&gt;which are all passed as arguments on the server line. the order in which those&lt;br&gt;arguments appear does not count, and they are all optional. some of those&lt;br&gt;settings are single words (booleans) while others expect one or several values&lt;br&gt;after them. in this case, the values must immediately follow the setting name.&lt;br&gt;except default-server, all those settings must be specified after the server’s&lt;br&gt;address if they are used:&lt;/p&gt;
&lt;p&gt;  server &lt;name&gt; &lt;address&gt;[:port] [settings …]&lt;br&gt;  default-server [settings …]&lt;/address&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;the currently supported settings are the following ones.&lt;/p&gt;
&lt;p&gt;addr &lt;ipv4|ipv6&gt;&lt;br&gt;  using the “addr” parameter, it becomes possible to use a different ip address&lt;br&gt;  to send health-checks. on some servers, it may be desirable to dedicate an ip&lt;br&gt;  address to specific component able to perform complex tests which are more&lt;br&gt;  suitable to health-checks than the application. this parameter is ignored if&lt;br&gt;  the “check” parameter is not set. see also the “port” parameter.&lt;/ipv4|ipv6&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;agent-check&lt;br&gt;  enable an auxiliary agent check which is run independently of a regular&lt;br&gt;  health check. an agent health check is performed by making a tcp connection&lt;br&gt;  to the port set by the “agent-port” parameter and reading an ascii string.&lt;br&gt;  the string is made of a series of words delimited by spaces, tabs or commas&lt;br&gt;  in any order, optionally terminated by ‘\r’ and/or ‘\n’, each consisting of :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;an ascii representation of a positive integer percentage, e.g. “75%”.&lt;br&gt;values in this format will set the weight proportional to the initial&lt;br&gt;weight of a server as configured when haproxy starts. note that a zero&lt;br&gt;weight is reported on the stats page as “drain” since it has the same&lt;br&gt;effect on the server (it’s removed from the lb farm).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the word “ready”. this will turn the server’s administrative state to the&lt;br&gt;ready mode, thus cancelling any drain or maint state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the word “drain”. this will turn the server’s administrative state to the&lt;br&gt;drain mode, thus it will not accept any new connections other than those&lt;br&gt;that are accepted via persistence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the word “maint”. this will turn the server’s administrative state to the&lt;br&gt;maint mode, thus it will not accept any new connections at all, and health&lt;br&gt;checks will be stopped.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the words “down”, “failed”, or “stopped”, optionally followed by a&lt;br&gt;description string after a sharp (‘#’). all of these mark the server’s&lt;br&gt;operating state as down, but since the word itself is reported on the stats&lt;br&gt;page, the difference allows an administrator to know if the situation was&lt;br&gt;expected or not : the service may intentionally be stopped, may appear up&lt;br&gt;but fail some validity tests, or may be seen as down (eg: missing process,&lt;br&gt;or port not responding).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the word “up” sets back the server’s operating state as up if health checks&lt;br&gt;also report that the service is accessible.&lt;/p&gt;
&lt;p&gt;parameters which are not advertised by the agent are not changed. for&lt;br&gt;example, an agent might be designed to monitor cpu usage and only report a&lt;br&gt;relative weight and never interact with the operating status. similarly, an&lt;br&gt;agent could be designed as an end-user interface with 3 radio buttons&lt;br&gt;allowing an administrator to change only the administrative state. however,&lt;br&gt;it is important to consider that only the agent may revert its own actions,&lt;br&gt;so if a server is set to drain mode or to down state using the agent, the&lt;br&gt;agent must implement the other equivalent actions to bring the service into&lt;br&gt;operations again.&lt;/p&gt;
&lt;p&gt;failure to connect to the agent is not considered an error as connectivity&lt;br&gt;is tested by the regular health check which is enabled by the “check”&lt;br&gt;parameter. warning though, it is not a good idea to stop an agent after it&lt;br&gt;reports “down”, since only an agent reporting “up” will be able to turn the&lt;br&gt;server up again. note that the cli on the unix stats socket is also able to&lt;br&gt;force an agent’s result in order to workaround a bogus agent if needed.&lt;/p&gt;
&lt;p&gt;requires the “agent-port” parameter to be set. see also the “agent-inter”&lt;br&gt;parameter.&lt;/p&gt;
&lt;p&gt;supported in default-server: no&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;agent-inter &lt;delay&gt;&lt;br&gt;  the “agent-inter” parameter sets the interval between two agent checks&lt;br&gt;  to &lt;delay&gt; milliseconds. if left unspecified, the delay defaults to 2000 ms.&lt;/delay&gt;&lt;/delay&gt;&lt;/p&gt;
&lt;p&gt;  just as with every other time-based parameter, it may be entered in any&lt;br&gt;  other explicit unit among { us, ms, s, m, h, d }. the “agent-inter”&lt;br&gt;  parameter also serves as a timeout for agent checks “timeout check” is&lt;br&gt;  not set. in order to reduce “resonance” effects when multiple servers are&lt;br&gt;  hosted on the same hardware, the agent and health checks of all servers&lt;br&gt;  are started with a small time offset between them. it is also possible to&lt;br&gt;  add some random noise in the agent and health checks interval using the&lt;br&gt;  global “spread-checks” keyword. this makes sense for instance when a lot&lt;br&gt;  of backends use the same servers.&lt;/p&gt;
&lt;p&gt;  see also the “agent-check” and “agent-port” parameters.&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;agent-port &lt;port&gt;&lt;br&gt;  the “agent-port” parameter sets the tcp port used for agent checks.&lt;/port&gt;&lt;/p&gt;
&lt;p&gt;  see also the “agent-check” and “agent-inter” parameters.&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;backup&lt;br&gt;  when “backup” is present on a server line, the server is only used in load&lt;br&gt;  balancing when all other non-backup servers are unavailable. requests coming&lt;br&gt;  with a persistence cookie referencing the server will always be served&lt;br&gt;  though. by default, only the first operational backup server is used, unless&lt;br&gt;  the “allbackups” option is set in the backend. see also the “allbackups”&lt;br&gt;  option.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;ca-file &lt;cafile&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file from which to load ca certificates used to verify&lt;br&gt;  server’s certificate.&lt;/cafile&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;check&lt;br&gt;  this option enables health checks on the server. by default, a server is&lt;br&gt;  always considered available. if “check” is set, the server is available when&lt;br&gt;  accepting periodic tcp connections, to ensure that it is really able to serve&lt;br&gt;  requests. the default address and port to send the tests to are those of the&lt;br&gt;  server, and the default source is the same as the one defined in the&lt;br&gt;  backend. it is possible to change the address using the “addr” parameter, the&lt;br&gt;  port using the “port” parameter, the source address using the “source”&lt;br&gt;  address, and the interval and timers using the “inter”, “rise” and “fall”&lt;br&gt;  parameters. the request method is define in the backend using the “httpchk”,&lt;br&gt;  “smtpchk”, “mysql-check”, “pgsql-check” and “ssl-hello-chk” options. please&lt;br&gt;  refer to those options and parameters for more information.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;check-send-proxy&lt;br&gt;  this option forces emission of a proxy protocol line with outgoing health&lt;br&gt;  checks, regardless of whether the server uses send-proxy or not for the&lt;br&gt;  normal traffic. by default, the proxy protocol is enabled for health checks&lt;br&gt;  if it is already enabled for normal traffic and if no “port” nor “addr”&lt;br&gt;  directive is present. however, if such a directive is present, the&lt;br&gt;  “check-send-proxy” option needs to be used to force the use of the&lt;br&gt;  protocol. see also the “send-proxy” option for more information.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;check-ssl&lt;br&gt;  this option forces encryption of all health checks over ssl, regardless of&lt;br&gt;  whether the server uses ssl or not for the normal traffic. this is generally&lt;br&gt;  used when an explicit “port” or “addr” directive is specified and ssl health&lt;br&gt;  checks are not inherited. it is important to understand that this option&lt;br&gt;  inserts an ssl transport layer below the checks, so that a simple tcp connect&lt;br&gt;  check becomes an ssl connect, which replaces the old ssl-hello-chk. the most&lt;br&gt;  common use is to send https checks by combining “httpchk” with ssl checks.&lt;br&gt;  all ssl settings are common to health checks and traffic (eg: ciphers).&lt;br&gt;  see the “ssl” option for more information.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;ciphers &lt;ciphers&gt;&lt;br&gt;  this option sets the string describing the list of cipher algorithms that is&lt;br&gt;  is negotiated during the ssl/tls handshake with the server. the format of the&lt;br&gt;  string is defined in “man 1 ciphers”. when ssl is used to communicate with&lt;br&gt;  servers on the local network, it is common to see a weaker set of algorithms&lt;br&gt;  than what is used over the internet. doing so reduces cpu usage on both the&lt;br&gt;  server and haproxy while still keeping it compatible with deployed software.&lt;br&gt;  some algorithms such as rc4-sha1 are reasonably cheap. if no security at all&lt;br&gt;  is needed and just connectivity, using des can be appropriate.&lt;/ciphers&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;cookie &lt;value&gt;&lt;br&gt;  the “cookie” parameter sets the cookie value assigned to the server to&lt;br&gt;  &lt;value&gt;. this value will be checked in incoming requests, and the first&lt;br&gt;  operational server possessing the same value will be selected. in return, in&lt;br&gt;  cookie insertion or rewrite modes, this value will be assigned to the cookie&lt;br&gt;  sent to the client. there is nothing wrong in having several servers sharing&lt;br&gt;  the same cookie value, and it is in fact somewhat common between normal and&lt;br&gt;  backup servers. see also the “cookie” keyword in backend section.&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;crl-file &lt;crlfile&gt;&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  designates a pem file from which to load certificate revocation list used&lt;br&gt;  to verify server’s certificate.&lt;/crlfile&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;crt &lt;cert&gt;&lt;br&gt;  this setting is only available when support for openssl was built in.&lt;br&gt;  it designates a pem file from which to load both a certificate and the&lt;br&gt;  associated private key. this file can be built by concatenating both pem&lt;br&gt;  files into one. this certificate will be sent if the server send a client&lt;br&gt;  certificate request.&lt;/cert&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;disabled&lt;br&gt;  the “disabled” keyword starts the server in the “disabled” state. that means&lt;br&gt;  that it is marked down in maintenance mode, and no connection other than the&lt;br&gt;  ones allowed by persist mode will reach it. it is very well suited to setup&lt;br&gt;  new servers, because normal traffic will never reach them, while it is still&lt;br&gt;  possible to test the service by making use of the force-persist mechanism.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;error-limit &lt;count&gt;&lt;br&gt;  if health observing is enabled, the “error-limit” parameter specifies the&lt;br&gt;  number of consecutive errors that triggers event selected by the “on-error”&lt;br&gt;  option. by default it is set to 10 consecutive errors.&lt;/count&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;  see also the “check”, “error-limit” and “on-error”.&lt;/p&gt;
&lt;p&gt;fall &lt;count&gt;&lt;br&gt;  the “fall” parameter states that a server will be considered as dead after&lt;br&gt;  &lt;count&gt; consecutive unsuccessful health checks. this value defaults to 3 if&lt;br&gt;  unspecified. see also the “check”, “inter” and “rise” parameters.&lt;/count&gt;&lt;/count&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;force-sslv3&lt;br&gt;  this option enforces use of sslv3 only when ssl is used to communicate with&lt;br&gt;  the server. sslv3 is generally less expensive than the tls counterparts for&lt;br&gt;  high connection rates. this option is also available on global statement&lt;br&gt;  “ssl-default-server-options”. see also “no-tlsv*”, “no-sslv3”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;force-tlsv10&lt;br&gt;  this option enforces use of tlsv1.0 only when ssl is used to communicate with&lt;br&gt;  the server. this option is also available on global statement&lt;br&gt;  “ssl-default-server-options”. see also “no-tlsv*”, “no-sslv3”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;force-tlsv11&lt;br&gt;  this option enforces use of tlsv1.1 only when ssl is used to communicate with&lt;br&gt;  the server. this option is also available on global statement&lt;br&gt;  “ssl-default-server-options”. see also “no-tlsv*”, “no-sslv3”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;force-tlsv12&lt;br&gt;  this option enforces use of tlsv1.2 only when ssl is used to communicate with&lt;br&gt;  the server. this option is also available on global statement&lt;br&gt;  “ssl-default-server-options”. see also “no-tlsv*”, “no-sslv3”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;id &lt;value&gt;&lt;br&gt;  set a persistent id for the server. this id must be positive and unique for&lt;br&gt;  the proxy. an unused id will automatically be assigned if unset. the first&lt;br&gt;  assigned value will be 1. this id is currently only returned in statistics.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;inter &lt;delay&gt;&lt;br&gt;fastinter &lt;delay&gt;&lt;br&gt;downinter &lt;delay&gt;&lt;br&gt;  the “inter” parameter sets the interval between two consecutive health checks&lt;br&gt;  to &lt;delay&gt; milliseconds. if left unspecified, the delay defaults to 2000 ms.&lt;br&gt;  it is also possible to use “fastinter” and “downinter” to optimize delays&lt;br&gt;  between checks depending on the server state :&lt;/delay&gt;&lt;/delay&gt;&lt;/delay&gt;&lt;/delay&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         server state            |             interval used
---------------------------------+-----------------------------------------
 up 100% (non-transitional)      | &amp;quot;inter&amp;quot;
---------------------------------+-----------------------------------------
 transitionally up (going down), |
 transitionally down (going up), | &amp;quot;fastinter&amp;quot; if set, &amp;quot;inter&amp;quot; otherwise.
 or yet unchecked.               |
---------------------------------+-----------------------------------------
 down 100% (non-transitional)    | &amp;quot;downinter&amp;quot; if set, &amp;quot;inter&amp;quot; otherwise.
---------------------------------+-----------------------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  just as with every other time-based parameter, they can be entered in any&lt;br&gt;  other explicit unit among { us, ms, s, m, h, d }. the “inter” parameter also&lt;br&gt;  serves as a timeout for health checks sent to servers if “timeout check” is&lt;br&gt;  not set. in order to reduce “resonance” effects when multiple servers are&lt;br&gt;  hosted on the same hardware, the agent and health checks of all servers&lt;br&gt;  are started with a small time offset between them. it is also possible to&lt;br&gt;  add some random noise in the agent and health checks interval using the&lt;br&gt;  global “spread-checks” keyword. this makes sense for instance when a lot&lt;br&gt;  of backends use the same servers.&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;maxconn &lt;maxconn&gt;&lt;br&gt;  the “maxconn” parameter specifies the maximal number of concurrent&lt;br&gt;  connections that will be sent to this server. if the number of incoming&lt;br&gt;  concurrent requests goes higher than this value, they will be queued, waiting&lt;br&gt;  for a connection to be released. this parameter is very important as it can&lt;br&gt;  save fragile servers from going down under extreme loads. if a “minconn”&lt;br&gt;  parameter is specified, the limit becomes dynamic. the default value is “0”&lt;br&gt;  which means unlimited. see also the “minconn” and “maxqueue” parameters, and&lt;br&gt;  the backend’s “fullconn” keyword.&lt;/maxconn&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;maxqueue &lt;maxqueue&gt;&lt;br&gt;  the “maxqueue” parameter specifies the maximal number of connections which&lt;br&gt;  will wait in the queue for this server. if this limit is reached, next&lt;br&gt;  requests will be redispatched to other servers instead of indefinitely&lt;br&gt;  waiting to be served. this will break persistence but may allow people to&lt;br&gt;  quickly re-log in when the server they try to connect to is dying. the&lt;br&gt;  default value is “0” which means the queue is unlimited. see also the&lt;br&gt;  “maxconn” and “minconn” parameters.&lt;/maxqueue&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;minconn &lt;minconn&gt;&lt;br&gt;  when the “minconn” parameter is set, the maxconn limit becomes a dynamic&lt;br&gt;  limit following the backend’s load. the server will always accept at least&lt;br&gt;  &lt;minconn&gt; connections, never more than &lt;maxconn&gt;, and the limit will be on&lt;br&gt;  the ramp between both values when the backend has less than &lt;fullconn&gt;&lt;br&gt;  concurrent connections. this makes it possible to limit the load on the&lt;br&gt;  server during normal loads, but push it further for important loads without&lt;br&gt;  overloading the server during exceptional loads. see also the “maxconn”&lt;br&gt;  and “maxqueue” parameters, as well as the “fullconn” backend keyword.&lt;/fullconn&gt;&lt;/maxconn&gt;&lt;/minconn&gt;&lt;/minconn&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;no-ssl-reuse&lt;br&gt;  this option disables ssl session reuse when ssl is used to communicate with&lt;br&gt;  the server. it will force the server to perform a full handshake for every&lt;br&gt;  new connection. it’s probably only useful for benchmarking, troubleshooting,&lt;br&gt;  and for paranoid users.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;no-sslv3&lt;br&gt;  this option disables support for sslv3 when ssl is used to communicate with&lt;br&gt;  the server. note that sslv2 is disabled in the code and cannot be enabled&lt;br&gt;  using any configuration option. see also “force-sslv3”, “force-tlsv*”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;no-tls-tickets&lt;br&gt;  this setting is only available when support for openssl was built in. it&lt;br&gt;  disables the stateless session resumption (rfc 5077 tls ticket&lt;br&gt;  extension) and force to use stateful session resumption. stateless&lt;br&gt;  session resumption is more expensive in cpu usage for servers. this option&lt;br&gt;  is also available on global statement “ssl-default-server-options”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;no-tlsv10&lt;br&gt;  this option disables support for tlsv1.0 when ssl is used to communicate with&lt;br&gt;  the server. note that sslv2 is disabled in the code and cannot be enabled&lt;br&gt;  using any configuration option. tlsv1 is more expensive than sslv3 so it&lt;br&gt;  often makes sense to disable it when communicating with local servers. this&lt;br&gt;  option is also available on global statement “ssl-default-server-options”.&lt;br&gt;  see also “force-sslv3”, “force-tlsv*”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;no-tlsv11&lt;br&gt;  this option disables support for tlsv1.1 when ssl is used to communicate with&lt;br&gt;  the server. note that sslv2 is disabled in the code and cannot be enabled&lt;br&gt;  using any configuration option. tlsv1 is more expensive than sslv3 so it&lt;br&gt;  often makes sense to disable it when communicating with local servers. this&lt;br&gt;  option is also available on global statement “ssl-default-server-options”.&lt;br&gt;  see also “force-sslv3”, “force-tlsv*”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;no-tlsv12&lt;br&gt;  this option disables support for tlsv1.2 when ssl is used to communicate with&lt;br&gt;  the server. note that sslv2 is disabled in the code and cannot be enabled&lt;br&gt;  using any configuration option. tlsv1 is more expensive than sslv3 so it&lt;br&gt;  often makes sense to disable it when communicating with local servers. this&lt;br&gt;  option is also available on global statement “ssl-default-server-options”.&lt;br&gt;  see also “force-sslv3”, “force-tlsv*”.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;non-stick&lt;br&gt;  never add connections allocated to this sever to a stick-table.&lt;br&gt;  this may be used in conjunction with backup to ensure that&lt;br&gt;  stick-table persistence is disabled for backup servers.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;observe &lt;mode&gt;&lt;br&gt;  this option enables health adjusting based on observing communication with&lt;br&gt;  the server. by default this functionality is disabled and enabling it also&lt;br&gt;  requires to enable health checks. there are two supported modes: “layer4” and&lt;br&gt;  “layer7”. in layer4 mode, only successful/unsuccessful tcp connections are&lt;br&gt;  significant. in layer7, which is only allowed for http proxies, responses&lt;br&gt;  received from server are verified, like valid/wrong http code, unparsable&lt;br&gt;  headers, a timeout, etc. valid status codes include 100 to 499, 501 and 505.&lt;/mode&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;  see also the “check”, “on-error” and “error-limit”.&lt;/p&gt;
&lt;p&gt;on-error &lt;mode&gt;&lt;br&gt;  select what should happen when enough consecutive errors are detected.&lt;br&gt;  currently, four modes are available:&lt;/mode&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fastinter: force fastinter&lt;/li&gt;
&lt;li&gt;fail-check: simulate a failed check, also forces fastinter (default)&lt;/li&gt;
&lt;li&gt;sudden-death: simulate a pre-fatal failed health check, one more failed&lt;br&gt;check will mark a server down, forces fastinter&lt;/li&gt;
&lt;li&gt;&lt;p&gt;mark-down: mark the server immediately down and force fastinter&lt;/p&gt;
&lt;p&gt;supported in default-server: yes&lt;/p&gt;
&lt;p&gt;see also the “check”, “observe” and “error-limit”.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on-marked-down &lt;action&gt;&lt;br&gt;  modify what occurs when a server is marked down.&lt;br&gt;  currently one action is available:&lt;/action&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;shutdown-sessions: shutdown peer sessions. when this setting is enabled,&lt;br&gt;all connections to the server are immediately terminated when the server&lt;br&gt;goes down. it might be used if the health check detects more complex cases&lt;br&gt;than a simple connection status, and long timeouts would cause the service&lt;br&gt;to remain unresponsive for too long a time. for instance, a health check&lt;br&gt;might detect that a database is stuck and that there’s no chance to reuse&lt;br&gt;existing connections anymore. connections killed this way are logged with&lt;br&gt;a ‘d’ termination code (for “down”).&lt;/p&gt;
&lt;p&gt;actions are disabled by default&lt;/p&gt;
&lt;p&gt;supported in default-server: yes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;on-marked-up &lt;action&gt;&lt;br&gt;  modify what occurs when a server is marked up.&lt;br&gt;  currently one action is available:&lt;/action&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;shutdown-backup-sessions: shutdown sessions on all backup servers. this is&lt;br&gt;done only if the server is not in backup state and if it is not disabled&lt;br&gt;(it must have an effective weight &amp;gt; 0). this can be used sometimes to force&lt;br&gt;an active server to take all the traffic back after recovery when dealing&lt;br&gt;with long sessions (eg: ldap, sql, …). doing this can cause more trouble&lt;br&gt;than it tries to solve (eg: incomplete transactions), so use this feature&lt;br&gt;with extreme care. sessions killed because a server comes up are logged&lt;br&gt;with an ‘u’ termination code (for “up”).&lt;/p&gt;
&lt;p&gt;actions are disabled by default&lt;/p&gt;
&lt;p&gt;supported in default-server: yes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;port &lt;port&gt;&lt;br&gt;  using the “port” parameter, it becomes possible to use a different port to&lt;br&gt;  send health-checks. on some servers, it may be desirable to dedicate a port&lt;br&gt;  to a specific component able to perform complex tests which are more suitable&lt;br&gt;  to health-checks than the application. it is common to run a simple script in&lt;br&gt;  inetd for instance. this parameter is ignored if the “check” parameter is not&lt;br&gt;  set. see also the “addr” parameter.&lt;/port&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;redir &lt;prefix&gt;&lt;br&gt;  the “redir” parameter enables the redirection mode for all get and head&lt;br&gt;  requests addressing this server. this means that instead of having haproxy&lt;br&gt;  forward the request to the server, it will send an “http 302” response with&lt;br&gt;  the “location” header composed of this prefix immediately followed by the&lt;br&gt;  requested uri beginning at the leading ‘/‘ of the path component. that means&lt;br&gt;  that no trailing slash should be used after &lt;prefix&gt;. all invalid requests&lt;br&gt;  will be rejected, and all non-get or head requests will be normally served by&lt;br&gt;  the server. note that since the response is completely forged, no header&lt;br&gt;  mangling nor cookie insertion is possible in the response. however, cookies in&lt;br&gt;  requests are still analysed, making this solution completely usable to direct&lt;br&gt;  users to a remote location in case of local disaster. main use consists in&lt;br&gt;  increasing bandwidth for static servers by having the clients directly&lt;br&gt;  connect to them. note: never use a relative location here, it would cause a&lt;br&gt;  loop between the client and haproxy!&lt;/prefix&gt;&lt;/prefix&gt;&lt;/p&gt;
&lt;p&gt;  example :  server srv1 192.168.1.1:80 redir &lt;a href=&quot;http://image1.mydomain.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://image1.mydomain.com&lt;/a&gt; check&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;rise &lt;count&gt;&lt;br&gt;  the “rise” parameter states that a server will be considered as operational&lt;br&gt;  after &lt;count&gt; consecutive successful health checks. this value defaults to 2&lt;br&gt;  if unspecified. see also the “check”, “inter” and “fall” parameters.&lt;/count&gt;&lt;/count&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;p&gt;resolve-prefer &lt;family&gt;&lt;br&gt;  when dns resolution is enabled for a server and multiple ip addresses from&lt;br&gt;  different families are returned, haproxy will prefer using an ip address&lt;br&gt;  from the family mentioned in the “resolve-prefer” parameter.&lt;br&gt;  available families: “ipv4” and “ipv6”&lt;/family&gt;&lt;/p&gt;
&lt;p&gt;  default value: ipv4&lt;/p&gt;
&lt;p&gt;  example: server s1 app1.domain.com:80 resolvers mydns resolve-prefer ipv6&lt;/p&gt;
&lt;p&gt;resolvers &lt;id&gt;&lt;br&gt;  points to an existing “resolvers” section to resolve current server’s&lt;br&gt;  hostname.&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;  example: server s1 app1.domain.com:80 resolvers mydns&lt;/p&gt;
&lt;p&gt;  see also chapter 5.3&lt;/p&gt;
&lt;p&gt;send-proxy&lt;br&gt;  the “send-proxy” parameter enforces use of the proxy protocol over any&lt;br&gt;  connection established to this server. the proxy protocol informs the other&lt;br&gt;  end about the layer 3/4 addresses of the incoming connection, so that it can&lt;br&gt;  know the client’s address or the public address it accessed to, whatever the&lt;br&gt;  upper layer protocol. for connections accepted by an “accept-proxy” listener,&lt;br&gt;  the advertised address will be used. only tcpv4 and tcpv6 address families&lt;br&gt;  are supported. other families such as unix sockets, will report an unknown&lt;br&gt;  family. servers using this option can fully be chained to another instance of&lt;br&gt;  haproxy listening with an “accept-proxy” setting. this setting must not be&lt;br&gt;  used if the server isn’t aware of the protocol. when health checks are sent&lt;br&gt;  to the server, the proxy protocol is automatically used when this option is&lt;br&gt;  set, unless there is an explicit “port” or “addr” directive, in which case an&lt;br&gt;  explicit “check-send-proxy” directive would also be needed to use the proxy&lt;br&gt;  protocol. see also the “accept-proxy” option of the “bind” keyword.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;send-proxy-v2&lt;br&gt;  the “send-proxy-v2” parameter enforces use of the proxy protocol version 2&lt;br&gt;  over any connection established to this server. the proxy protocol informs&lt;br&gt;  the other end about the layer 3/4 addresses of the incoming connection, so&lt;br&gt;  that it can know the client’s address or the public address it accessed to,&lt;br&gt;  whatever the upper layer protocol. this setting must not be used if the&lt;br&gt;  server isn’t aware of this version of the protocol. see also the “send-proxy”&lt;br&gt;  option of the “bind” keyword.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;send-proxy-v2-ssl&lt;br&gt;  the “send-proxy-v2-ssl” parameter enforces use of the proxy protocol version&lt;br&gt;  2 over any connection established to this server. the proxy protocol informs&lt;br&gt;  the other end about the layer 3/4 addresses of the incoming connection, so&lt;br&gt;  that it can know the client’s address or the public address it accessed to,&lt;br&gt;  whatever the upper layer protocol. in addition, the ssl information extension&lt;br&gt;  of the proxy protocol is added to the proxy protocol header. this setting&lt;br&gt;  must not be used if the server isn’t aware of this version of the protocol.&lt;br&gt;  see also the “send-proxy-v2” option of the “bind” keyword.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;send-proxy-v2-ssl-cn&lt;br&gt;  the “send-proxy-v2-ssl” parameter enforces use of the proxy protocol version&lt;br&gt;  2 over any connection established to this server. the proxy protocol informs&lt;br&gt;  the other end about the layer 3/4 addresses of the incoming connection, so&lt;br&gt;  that it can know the client’s address or the public address it accessed to,&lt;br&gt;  whatever the upper layer protocol. in addition, the ssl information extension&lt;br&gt;  of the proxy protocol, along along with the common name from the subject of&lt;br&gt;  the client certificate (if any), is added to the proxy protocol header. this&lt;br&gt;  setting must not be used if the server isn’t aware of this version of the&lt;br&gt;  protocol. see also the “send-proxy-v2” option of the “bind” keyword.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;slowstart &lt;start_time_in_ms&gt;&lt;br&gt;  the “slowstart” parameter for a server accepts a value in milliseconds which&lt;br&gt;  indicates after how long a server which has just come back up will run at&lt;br&gt;  full speed. just as with every other time-based parameter, it can be entered&lt;br&gt;  in any other explicit unit among { us, ms, s, m, h, d }. the speed grows&lt;br&gt;  linearly from 0 to 100% during this time. the limitation applies to two&lt;br&gt;  parameters :&lt;/start_time_in_ms&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;maxconn: the number of connections accepted by the server will grow from 1&lt;br&gt;to 100% of the usual dynamic limit defined by (minconn,maxconn,fullconn).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;weight: when the backend uses a dynamic weighted algorithm, the weight&lt;br&gt;grows linearly from 1 to 100%. in this case, the weight is updated at every&lt;br&gt;health-check. for this reason, it is important that the “inter” parameter&lt;br&gt;is smaller than the “slowstart”, in order to maximize the number of steps.&lt;/p&gt;
&lt;p&gt;the slowstart never applies when haproxy starts, otherwise it would cause&lt;br&gt;trouble to running servers. it only applies when a server has been previously&lt;br&gt;seen as failed.&lt;/p&gt;
&lt;p&gt;supported in default-server: yes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;sni &lt;expression&gt;&lt;br&gt;  the “sni” parameter evaluates the sample fetch expression, converts it to a&lt;br&gt;  string and uses the result as the host name sent in the sni tls extension to&lt;br&gt;  the server. a typical use case is to send the sni received from the client in&lt;br&gt;  a bridged https scenario, using the “ssl_fc_sni” sample fetch for the&lt;br&gt;  expression, though alternatives such as req.hdr(host) can also make sense.&lt;/expression&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;source &lt;addr&gt;[:&lt;pl&gt;[-&lt;ph&gt;]] [usesrc { &lt;addr2&gt;[:&lt;port2&gt;] | client | clientip } ]&lt;br&gt;source &lt;addr&gt;[:&lt;port&gt;] [usesrc { &lt;addr2&gt;[:&lt;port2&gt;] | hdr_ip(&lt;hdr&gt;[,&lt;occ&gt;]) } ]&lt;br&gt;source &lt;addr&gt;[:&lt;pl&gt;[-&lt;ph&gt;]] [interface &lt;name&gt;] …&lt;br&gt;  the “source” parameter sets the source address which will be used when&lt;br&gt;  connecting to the server. it follows the exact same parameters and principle&lt;br&gt;  as the backend “source” keyword, except that it only applies to the server&lt;br&gt;  referencing it. please consult the “source” keyword for details.&lt;/name&gt;&lt;/ph&gt;&lt;/pl&gt;&lt;/addr&gt;&lt;/occ&gt;&lt;/hdr&gt;&lt;/port2&gt;&lt;/addr2&gt;&lt;/port&gt;&lt;/addr&gt;&lt;/port2&gt;&lt;/addr2&gt;&lt;/ph&gt;&lt;/pl&gt;&lt;/addr&gt;&lt;/p&gt;
&lt;p&gt;  additionally, the “source” statement on a server line allows one to specify a&lt;br&gt;  source port range by indicating the lower and higher bounds delimited by a&lt;br&gt;  dash (‘-‘). some operating systems might require a valid ip address when a&lt;br&gt;  source port range is specified. it is permitted to have the same ip/range for&lt;br&gt;  several servers. doing so makes it possible to bypass the maximum of 64k&lt;br&gt;  total concurrent connections. the limit will then reach 64k connections per&lt;br&gt;  server.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;ssl&lt;br&gt;  this option enables ssl ciphering on outgoing connections to the server. it&lt;br&gt;  is critical to verify server certificates using “verify” when using ssl to&lt;br&gt;  connect to servers, otherwise the communication is prone to trivial man in&lt;br&gt;  the-middle attacks rendering ssl useless. when this option is used, health&lt;br&gt;  checks are automatically sent in ssl too unless there is a “port” or an&lt;br&gt;  “addr” directive indicating the check should be sent to a different location.&lt;br&gt;  see the “check-ssl” option to force ssl health checks.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;track [&lt;proxy&gt;/]&lt;server&gt;&lt;br&gt;  this option enables ability to set the current state of the server by tracking&lt;br&gt;  another one. it is possible to track a server which itself tracks another&lt;br&gt;  server, provided that at the end of the chain, a server has health checks&lt;br&gt;  enabled. if &lt;proxy&gt; is omitted the current one is used. if disable-on-404 is&lt;br&gt;  used, it has to be enabled on both proxies.&lt;/proxy&gt;&lt;/server&gt;&lt;/proxy&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;verify [none|required]&lt;br&gt;  this setting is only available when support for openssl was built in. if set&lt;br&gt;  to ‘none’, server certificate is not verified. in the other case, the&lt;br&gt;  certificate provided by the server is verified using cas from ‘ca-file’&lt;br&gt;  and optional crls from ‘crl-file’. if ‘ssl_server_verify’ is not specified&lt;br&gt;  in global  section, this is the default. on verify failure the handshake&lt;br&gt;  is aborted. it is critically important to verify server certificates when&lt;br&gt;  using ssl to connect to servers, otherwise the communication is prone to&lt;br&gt;  trivial man-in-the-middle attacks rendering ssl totally useless.&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;verifyhost &lt;hostname&gt;&lt;br&gt;  this setting is only available when support for openssl was built in, and&lt;br&gt;  only takes effect if ‘verify required’ is also specified. when set, the&lt;br&gt;  hostnames in the subject and subjectalternatenames of the certificate&lt;br&gt;  provided by the server are checked. if none of the hostnames in the&lt;br&gt;  certificate match the specified hostname, the handshake is aborted. the&lt;br&gt;  hostnames in the server-provided certificate may include wildcards.&lt;/hostname&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: no&lt;/p&gt;
&lt;p&gt;weight &lt;weight&gt;&lt;br&gt;  the “weight” parameter is used to adjust the server’s weight relative to&lt;br&gt;  other servers. all servers will receive a load proportional to their weight&lt;br&gt;  relative to the sum of all weights, so the higher the weight, the higher the&lt;br&gt;  load. the default weight is 1, and the maximal value is 256. a value of 0&lt;br&gt;  means the server will not participate in load-balancing but will still accept&lt;br&gt;  persistent connections. if this parameter is used to distribute the load&lt;br&gt;  according to server’s capacity, it is recommended to start with values which&lt;br&gt;  can both grow and shrink, for instance between 10 and 100 to leave enough&lt;br&gt;  room above and below for later adjustments.&lt;/weight&gt;&lt;/p&gt;
&lt;p&gt;  supported in default-server: yes&lt;/p&gt;
&lt;h2 id=&quot;5-3-server-ip-address-resolution-using-dns&quot;&gt;&lt;a href=&quot;#5-3-server-ip-address-resolution-using-dns&quot; class=&quot;headerlink&quot; title=&quot;5.3. server ip address resolution using dns&quot;&gt;&lt;/a&gt;5.3. server ip address resolution using dns&lt;/h2&gt;&lt;p&gt;haproxy allows using a host name to be resolved to find out what is the server&lt;br&gt;ip address. by default, haproxy resolves the name when parsing the&lt;br&gt;configuration, at startup.&lt;br&gt;this is not sufficient in some cases, such as in amazon where a server’s ip&lt;br&gt;can change after a reboot or an elb virtual ip can change based on current&lt;br&gt;workload.&lt;br&gt;this chapter describes how haproxy can be configured to process server’s name&lt;br&gt;resolution at run time.&lt;br&gt;whether run time server name resolution has been enable or not, haproxy will&lt;br&gt;carry on doing the first resolution when parsing the configuration.&lt;/p&gt;
&lt;h2 id=&quot;5-3-1-global-overview&quot;&gt;&lt;a href=&quot;#5-3-1-global-overview&quot; class=&quot;headerlink&quot; title=&quot;5.3.1. global overview&quot;&gt;&lt;/a&gt;5.3.1. global overview&lt;/h2&gt;&lt;p&gt;as we’ve seen in introduction, name resolution in haproxy occurs at two&lt;br&gt;different steps of the process life:&lt;/p&gt;
&lt;p&gt;  1. when starting up, haproxy parses the server line definition and matches a&lt;br&gt;     host name. it uses libc functions to get the host name resolved. this&lt;br&gt;     resolution relies on /etc/resolv.conf file.&lt;/p&gt;
&lt;p&gt;  2. at run time, when haproxy gets prepared to run a health check on a server,&lt;br&gt;     it verifies if the current name resolution is still considered as valid.&lt;br&gt;     if not, it processes a new resolution, in parallel of the health check.&lt;/p&gt;
&lt;p&gt;a few other events can trigger a name resolution at run time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;when a server’s health check ends up in a connection timeout: this may be&lt;br&gt;because the server has a new ip address. so we need to trigger a name&lt;br&gt;resolution to know this new ip.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a few things important to notice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;all the name servers are queried in the mean time. haproxy will process the&lt;br&gt;first valid response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a resolution is considered as invalid (nx, timeout, refused), when all the&lt;br&gt;servers return an error.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-3-2-the-resolvers-section&quot;&gt;&lt;a href=&quot;#5-3-2-the-resolvers-section&quot; class=&quot;headerlink&quot; title=&quot;5.3.2. the resolvers section&quot;&gt;&lt;/a&gt;5.3.2. the resolvers section&lt;/h2&gt;&lt;p&gt;this section is dedicated to host information related to name resolution in&lt;br&gt;haproxy.&lt;br&gt;there can be as many as resolvers section as needed. each section can contain&lt;br&gt;many name servers.&lt;/p&gt;
&lt;p&gt;resolvers &lt;resolvers id=&quot;&quot;&gt;&lt;br&gt;  creates a new name server list labelled &lt;resolvers id=&quot;&quot;&gt;&lt;/resolvers&gt;&lt;/resolvers&gt;&lt;/p&gt;
&lt;p&gt;a resolvers section accept the following parameters:&lt;/p&gt;
&lt;p&gt;nameserver &lt;id&gt; &lt;ip&gt;:&lt;port&gt;&lt;br&gt;  dns server description:&lt;br&gt;    &lt;id&gt;   : label of the server, should be unique&lt;br&gt;    &lt;ip&gt;   : ip address of the server&lt;br&gt;    &lt;port&gt; : port where the dns service actually runs&lt;/port&gt;&lt;/ip&gt;&lt;/id&gt;&lt;/port&gt;&lt;/ip&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;hold &lt;status&gt; &lt;period&gt;&lt;br&gt;  defines &lt;period&gt; during which the last name resolution should be kept based&lt;br&gt;  on last resolution &lt;status&gt;&lt;br&gt;    &lt;status&gt; : last name resolution status. only “valid” is accepted for now.&lt;br&gt;    &lt;period&gt; : interval between two successive name resolution when the last&lt;br&gt;               answer was in &lt;status&gt;. it follows the haproxy time format.&lt;br&gt;               &lt;period&gt; is in milliseconds by default.&lt;/period&gt;&lt;/status&gt;&lt;/period&gt;&lt;/status&gt;&lt;/status&gt;&lt;/period&gt;&lt;/period&gt;&lt;/status&gt;&lt;/p&gt;
&lt;p&gt;  default value is 10s for “valid”.&lt;/p&gt;
&lt;p&gt;  note: since the name resolution is triggered by the health checks, a new&lt;br&gt;        resolution is triggered after &lt;period&gt; modulo the &lt;inter&gt; parameter of&lt;br&gt;        the healch check.&lt;/inter&gt;&lt;/period&gt;&lt;/p&gt;
&lt;p&gt;resolve_retries &lt;nb&gt;&lt;br&gt;  defines the number &lt;nb&gt; of queries to send to resolve a server name before&lt;br&gt;  giving up.&lt;br&gt;  default value: 3&lt;/nb&gt;&lt;/nb&gt;&lt;/p&gt;
&lt;p&gt;timeout &lt;event&gt; &lt;time&gt;&lt;br&gt;  defines timeouts related to name resolution&lt;br&gt;     &lt;event&gt; : the event on which the &lt;time&gt; timeout period applies to.&lt;br&gt;               events available are:&lt;/time&gt;&lt;/event&gt;&lt;/time&gt;&lt;/event&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          - retry: time between two dns queries, when no response have
                   been received.
                   default value: 1s
&amp;lt;time&amp;gt;  : time related to the event. it follows the haproxy time format.
          &amp;lt;time&amp;gt; is expressed in milliseconds.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;example of a resolvers section (with default values):&lt;/p&gt;
&lt;p&gt;   resolvers mydns&lt;br&gt;     nameserver dns1 10.0.0.1:53&lt;br&gt;     nameserver dns2 10.0.0.2:53&lt;br&gt;     resolve_retries       3&lt;br&gt;     timeout retry         1s&lt;br&gt;     hold valid           10s&lt;/p&gt;
&lt;h2 id=&quot;6-http-header-manipulation&quot;&gt;&lt;a href=&quot;#6-http-header-manipulation&quot; class=&quot;headerlink&quot; title=&quot;6. http header manipulation&quot;&gt;&lt;/a&gt;6. http header manipulation&lt;/h2&gt;&lt;p&gt;in http mode, it is possible to rewrite, add or delete some of the request and&lt;br&gt;response headers based on regular expressions. it is also possible to block a&lt;br&gt;request or a response if a particular header matches a regular expression,&lt;br&gt;which is enough to stop most elementary protocol attacks, and to protect&lt;br&gt;against information leak from the internal network.&lt;/p&gt;
&lt;p&gt;if haproxy encounters an “informational response” (status code 1xx), it is able&lt;br&gt;to process all rsp* rules which can allow, deny, rewrite or delete a header,&lt;br&gt;but it will refuse to add a header to any such messages as this is not&lt;br&gt;http-compliant. the reason for still processing headers in such responses is to&lt;br&gt;stop and/or fix any possible information leak which may happen, for instance&lt;br&gt;because another downstream equipment would unconditionally add a header, or if&lt;br&gt;a server name appears there. when such messages are seen, normal processing&lt;br&gt;still occurs on the next non-informational messages.&lt;/p&gt;
&lt;p&gt;this section covers common usage of the following keywords, described in detail&lt;br&gt;in section 4.2 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reqadd     &lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;li&gt;reqallow   &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqiallow  &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqdel     &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqidel    &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqdeny    &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqideny   &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqpass    &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqipass   &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqrep     &lt;search&gt; &lt;replace&gt;&lt;/replace&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqirep    &lt;search&gt; &lt;replace&gt;&lt;/replace&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqtarpit  &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;reqitarpit &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rspadd     &lt;string&gt;&lt;/string&gt;&lt;/li&gt;
&lt;li&gt;rspdel     &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rspidel    &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rspdeny    &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rspideny   &lt;search&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rsprep     &lt;search&gt; &lt;replace&gt;&lt;/replace&gt;&lt;/search&gt;&lt;/li&gt;
&lt;li&gt;rspirep    &lt;search&gt; &lt;replace&gt;&lt;/replace&gt;&lt;/search&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with all these keywords, the same conventions are used. the &lt;search&gt; parameter&lt;br&gt;is a posix extended regular expression (regex) which supports grouping through&lt;br&gt;parenthesis (without the backslash). spaces and other delimiters must be&lt;br&gt;prefixed with a backslash (‘\’) to avoid confusion with a field delimiter.&lt;br&gt;other characters may be prefixed with a backslash to change their meaning :&lt;/search&gt;&lt;/p&gt;
&lt;p&gt;  \t   for a tab&lt;br&gt;  \r   for a carriage return (cr)&lt;br&gt;  \n   for a new line (lf)&lt;br&gt;  \    to mark a space and differentiate it from a delimiter&lt;br&gt;  #   to mark a sharp and differentiate it from a comment&lt;br&gt;  \   to use a backslash in a regex&lt;br&gt;  \\ to use a backslash in the text (&lt;em&gt;2 for regex, &lt;/em&gt;2 for haproxy)&lt;br&gt;  \xxx to write the ascii hex code xx as in the c language&lt;/p&gt;
&lt;p&gt;the &lt;replace&gt; parameter contains the string to be used to replace the largest&lt;br&gt;portion of text matching the regex. it can make use of the special characters&lt;br&gt;above, and can reference a substring which is delimited by parenthesis in the&lt;br&gt;regex, by writing a backslash (‘\’) immediately followed by one digit from 0 to&lt;br&gt;9 indicating the group position (0 designating the entire line). this practice&lt;br&gt;is very common to users of the “sed” program.&lt;/replace&gt;&lt;/p&gt;
&lt;p&gt;the &lt;string&gt; parameter represents the string which will systematically be added&lt;br&gt;after the last header line. it can also use special character sequences above.&lt;/string&gt;&lt;/p&gt;
&lt;h2 id=&quot;notes-related-to-these-keywords&quot;&gt;&lt;a href=&quot;#notes-related-to-these-keywords&quot; class=&quot;headerlink&quot; title=&quot;notes related to these keywords :&quot;&gt;&lt;/a&gt;notes related to these keywords :&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;these keywords are not always convenient to allow/deny based on header&lt;br&gt;contents. it is strongly recommended to use acls with the “block” keyword&lt;br&gt;instead, resulting in far more flexible and manageable rules.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lines are always considered as a whole. it is not possible to reference&lt;br&gt;a header name only or a value only. this is important because of the way&lt;br&gt;headers are written (notably the number of spaces after the colon).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the first line is always considered as a header, which makes it possible to&lt;br&gt;rewrite or filter http requests uris or response codes, but in turn makes&lt;br&gt;it harder to distinguish between headers and request line. the regex prefix&lt;br&gt;^[^\ \t]&lt;em&gt;[\ \t] matches any http method followed by a space, and the prefix&lt;br&gt;^[^ \t:]&lt;/em&gt;: matches any header name followed by a colon.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for performances reasons, the number of characters added to a request or to&lt;br&gt;a response is limited at build time to values between 1 and 4 kb. this&lt;br&gt;should normally be far more than enough for most usages. if it is too short&lt;br&gt;on occasional usages, it is possible to gain some space by removing some&lt;br&gt;useless headers before adding new ones.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;keywords beginning with “reqi” and “rspi” are the same as their counterpart&lt;br&gt;without the ‘i’ letter except that they ignore case when matching patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;when a request passes through a frontend then a backend, all req&lt;em&gt; rules&lt;br&gt;from the frontend will be evaluated, then all req&lt;/em&gt; rules from the backend&lt;br&gt;will be evaluated. the reverse path is applied to responses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;req* statements are applied after “block” statements, so that “block” is&lt;br&gt;always the first one, but before “use_backend” in order to permit rewriting&lt;br&gt;before switching.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-using-acls-and-fetching-samples&quot;&gt;&lt;a href=&quot;#7-using-acls-and-fetching-samples&quot; class=&quot;headerlink&quot; title=&quot;7. using acls and fetching samples&quot;&gt;&lt;/a&gt;7. using acls and fetching samples&lt;/h2&gt;&lt;p&gt;haproxy is capable of extracting data from request or response streams, from&lt;br&gt;client or server information, from tables, environmental information etc…&lt;br&gt;the action of extracting such data is called fetching a sample. once retrieved,&lt;br&gt;these samples may be used for various purposes such as a key to a stick-table,&lt;br&gt;but most common usages consist in matching them against predefined constant&lt;br&gt;data called patterns.&lt;/p&gt;
&lt;h2 id=&quot;7-1-acl-basics&quot;&gt;&lt;a href=&quot;#7-1-acl-basics&quot; class=&quot;headerlink&quot; title=&quot;7.1. acl basics&quot;&gt;&lt;/a&gt;7.1. acl basics&lt;/h2&gt;&lt;p&gt;the use of access control lists (acl) provides a flexible solution to perform&lt;br&gt;content switching and generally to take decisions based on content extracted&lt;br&gt;from the request, the response or any environmental status. the principle is&lt;br&gt;simple :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extract a data sample from a stream, table or the environment&lt;/li&gt;
&lt;li&gt;optionally apply some format conversion to the extracted sample&lt;/li&gt;
&lt;li&gt;apply one or multiple pattern matching methods on this sample&lt;/li&gt;
&lt;li&gt;perform actions only when a pattern matches the sample&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the actions generally consist in blocking a request, selecting a backend, or&lt;br&gt;adding a header.&lt;/p&gt;
&lt;p&gt;in order to define a test, the “acl” keyword is used. the syntax is :&lt;/p&gt;
&lt;p&gt;   acl &lt;aclname&gt; &lt;criterion&gt; [flags] [operator] [&lt;value&gt;] …&lt;/value&gt;&lt;/criterion&gt;&lt;/aclname&gt;&lt;/p&gt;
&lt;p&gt;this creates a new acl &lt;aclname&gt; or completes an existing one with new tests.&lt;br&gt;those tests apply to the portion of request/response specified in &lt;criterion&gt;&lt;br&gt;and may be adjusted with optional flags [flags]. some criteria also support&lt;br&gt;an operator which may be specified before the set of values. optionally some&lt;br&gt;conversion operators may be applied to the sample, and they will be specified&lt;br&gt;as a comma-delimited list of keywords just after the first keyword. the values&lt;br&gt;are of the type supported by the criterion, and are separated by spaces.&lt;/criterion&gt;&lt;/aclname&gt;&lt;/p&gt;
&lt;p&gt;acl names must be formed from upper and lower case letters, digits, ‘-‘ (dash),&lt;br&gt;‘_’ (underscore) , ‘.’ (dot) and ‘:’ (colon). acl names are case-sensitive,&lt;br&gt;which means that “my_acl” and “my_acl” are two different acls.&lt;/p&gt;
&lt;p&gt;there is no enforced limit to the number of acls. the unused ones do not affect&lt;br&gt;performance, they just consume a small amount of memory.&lt;/p&gt;
&lt;p&gt;the criterion generally is the name of a sample fetch method, or one of its acl&lt;br&gt;specific declinations. the default test method is implied by the output type of&lt;br&gt;this sample fetch method. the acl declinations can describe alternate matching&lt;br&gt;methods of a same sample fetch method. the sample fetch methods are the only&lt;br&gt;ones supporting a conversion.&lt;/p&gt;
&lt;p&gt;sample fetch methods return data which can be of the following types :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;integer (signed or unsigned)&lt;/li&gt;
&lt;li&gt;ipv4 or ipv6 address&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;data block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;converters transform any of these data into any of these. for example, some&lt;br&gt;converters might convert a string to a lower-case string while other ones&lt;br&gt;would turn a string to an ipv4 address, or apply a netmask to an ip address.&lt;br&gt;the resulting sample is of the type of the last converter applied to the list,&lt;br&gt;which defaults to the type of the sample fetch method.&lt;/p&gt;
&lt;p&gt;each sample or converter returns data of a specific type, specified with its&lt;br&gt;keyword in this documentation. when an acl is declared using a standard sample&lt;br&gt;fetch method, certain types automatically involved a default matching method&lt;br&gt;which are summarized in the table below :&lt;/p&gt;
&lt;p&gt;   +———————+—————–+&lt;br&gt;   | sample or converter | default         |&lt;br&gt;   |    output type      | matching method |&lt;br&gt;   +———————+—————–+&lt;br&gt;   | boolean             | bool            |&lt;br&gt;   +———————+—————–+&lt;br&gt;   | integer             | int             |&lt;br&gt;   +———————+—————–+&lt;br&gt;   | ip                  | ip              |&lt;br&gt;   +———————+—————–+&lt;br&gt;   | string              | str             |&lt;br&gt;   +———————+—————–+&lt;br&gt;   | binary              | none, use “-m”  |&lt;br&gt;   +———————+—————–+&lt;/p&gt;
&lt;p&gt;note that in order to match a binary samples, it is mandatory to specify a&lt;br&gt;matching method, see below.&lt;/p&gt;
&lt;p&gt;the acl engine can match these types against patterns of the following types :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;integer or integer range&lt;/li&gt;
&lt;li&gt;ip address / network&lt;/li&gt;
&lt;li&gt;string (exact, substring, suffix, prefix, subdir, domain)&lt;/li&gt;
&lt;li&gt;regular expression&lt;/li&gt;
&lt;li&gt;hex block&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the following acl flags are currently supported :&lt;/p&gt;
&lt;p&gt;   -i : ignore case during matching of all subsequent patterns.&lt;br&gt;   -f : load patterns from a file.&lt;br&gt;   -m : use a specific pattern matching method&lt;br&gt;   -n : forbid the dns resolutions&lt;br&gt;   -m : load the file pointed by -f like a map file.&lt;br&gt;   -u : force the unique id of the acl&lt;br&gt;   – : force end of flags. useful when a string looks like one of the flags.&lt;/p&gt;
&lt;p&gt;the “-f” flag is followed by the name of a file from which all lines will be&lt;br&gt;read as individual values. it is even possible to pass multiple “-f” arguments&lt;br&gt;if the patterns are to be loaded from multiple files. empty lines as well as&lt;br&gt;lines beginning with a sharp (‘#’) will be ignored. all leading spaces and tabs&lt;br&gt;will be stripped. if it is absolutely necessary to insert a valid pattern&lt;br&gt;beginning with a sharp, just prefix it with a space so that it is not taken for&lt;br&gt;a comment. depending on the data type and match method, haproxy may load the&lt;br&gt;lines into a binary tree, allowing very fast lookups. this is true for ipv4 and&lt;br&gt;exact string matching. in this case, duplicates will automatically be removed.&lt;/p&gt;
&lt;p&gt;the “-m” flag allows an acl to use a map file. if this flag is set, the file is&lt;br&gt;parsed as two column file. the first column contains the patterns used by the&lt;br&gt;acl, and the second column contain the samples. the sample can be used later by&lt;br&gt;a map. this can be useful in some rare cases where an acl would just be used to&lt;br&gt;check for the existence of a pattern in a map before a mapping is applied.&lt;/p&gt;
&lt;p&gt;the “-u” flag forces the unique id of the acl. this unique id is used with the&lt;br&gt;socket interface to identify acl and dynamically change its values. note that a&lt;br&gt;file is always identified by its name even if an id is set.&lt;/p&gt;
&lt;p&gt;also, note that the “-i” flag applies to subsequent entries and not to entries&lt;br&gt;loaded from files preceding it. for instance :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl valid-ua hdr(user-agent) -f exact-ua.lst -i -f generic-ua.lst test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in this example, each line of “exact-ua.lst” will be exactly matched against&lt;br&gt;the “user-agent” header of the request. then each line of “generic-ua” will be&lt;br&gt;case-insensitively matched. then the word “test” will be insensitively matched&lt;br&gt;as well.&lt;/p&gt;
&lt;p&gt;the “-m” flag is used to select a specific pattern matching method on the input&lt;br&gt;sample. all acl-specific criteria imply a pattern matching method and generally&lt;br&gt;do not need this flag. however, this flag is useful with generic sample fetch&lt;br&gt;methods to describe how they’re going to be matched against the patterns. this&lt;br&gt;is required for sample fetches which return data type for which there is no&lt;br&gt;obvious matching method (eg: string or binary). when “-m” is specified and&lt;br&gt;followed by a pattern matching method name, this method is used instead of the&lt;br&gt;default one for the criterion. this makes it possible to match contents in ways&lt;br&gt;that were not initially planned, or with sample fetch methods which return a&lt;br&gt;string. the matching method also affects the way the patterns are parsed.&lt;/p&gt;
&lt;p&gt;the “-n” flag forbids the dns resolutions. it is used with the load of ip files.&lt;br&gt;by default, if the parser cannot parse ip address it considers that the parsed&lt;br&gt;string is maybe a domain name and try dns resolution. the flag “-n” disable this&lt;br&gt;resolution. it is useful for detecting malformed ip lists. note that if the dns&lt;br&gt;server is not reachable, the haproxy configuration parsing may last many minutes&lt;br&gt;waiting fir the timeout. during this time no error messages are displayed. the&lt;br&gt;flag “-n” disable this behavior. note also that during the runtime, this&lt;br&gt;function is disabled for the dynamic acl modifications.&lt;/p&gt;
&lt;p&gt;there are some restrictions however. not all methods can be used with all&lt;br&gt;sample fetch methods. also, if “-m” is used in conjunction with “-f”, it must&lt;br&gt;be placed first. the pattern matching method must be one of the following :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“found” : only check if the requested sample could be found in the stream,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;but do not compare it against any pattern. it is recommended not
to pass any pattern to avoid confusion. this matching method is
particularly useful to detect presence of certain contents such
as headers, cookies, etc... even if they are empty and without
comparing them to anything nor counting them.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“bool”  : check the value as a boolean. it can only be applied to fetches&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;which return a boolean or integer value, and takes no pattern.
value zero or false does not match, all other values do match.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“int”   : match the value as an integer. it can be used with integer and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;boolean samples. boolean false is integer 0, true is integer 1.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“ip”    : match the value as an ipv4 or ipv6 address. it is compatible&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with ip address samples only, so it is implied and never needed.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“bin”   : match the contents against an hexadecimal string representing a&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;binary sequence. this may be used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“len”   : match the sample’s length as an integer. this may be used with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“str”   : exact match : match the contents against a string. this may be&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“sub”   : substring match : check that the contents contain at least one of&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;the provided string patterns. this may be used with binary or
string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“reg”   : regex match : match the contents against a list of regular&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;expressions. this may be used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“beg”   : prefix match : check that the contents begin like the provided&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string patterns. this may be used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“end”   : suffix match : check that the contents end like the provided&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;string patterns. this may be used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“dir”   : subdir match : check that a slash-delimited portion of the&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;contents exactly matches one of the provided string patterns.
this may be used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“dom”   : domain match : check that a dot-delimited portion of the contents&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exactly match one of the provided string patterns. this may be
used with binary or string samples.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;for example, to quickly detect the presence of cookie “jsessionid” in an http&lt;br&gt;request, it is possible to do :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl jsess_present cook(jsessionid) -m found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;in order to apply a regular expression on the 500 first bytes of data in the&lt;br&gt;buffer, one would use the following acl :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl script_tag payload(0,500) -m reg -i &amp;lt;script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;on systems where the regex library is much slower when using “-i”, it is&lt;br&gt;possible to convert the sample to lowercase before matching, like this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl script_tag payload(0,500),lower -m reg &amp;lt;script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;all acl-specific criteria imply a default matching method. most often, these&lt;br&gt;criteria are composed by concatenating the name of the original sample fetch&lt;br&gt;method and the matching method. for example, “hdr_beg” applies the “beg” match&lt;br&gt;to samples retrieved using the “hdr” fetch method. since all acl-specific&lt;br&gt;criteria rely on a sample fetch method, it is always possible instead to use&lt;br&gt;the original sample fetch method and the explicit matching method using “-m”.&lt;/p&gt;
&lt;p&gt;if an alternate match is specified using “-m” on an acl-specific criterion,&lt;br&gt;the matching method is simply applied to the underlying sample fetch method.&lt;br&gt;for example, all acls below are exact equivalent :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl short_form  hdr_beg(host)        www.
acl alternate1  hdr_beg(host) -m beg www.
acl alternate2  hdr_dom(host) -m beg www.
acl alternate3  hdr(host)     -m beg www.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the table below summarizes the compatibility matrix between sample or converter&lt;br&gt;types and the pattern types to fetch against. it indicates for each compatible&lt;br&gt;combination the name of the matching method to be used, surrounded with angle&lt;br&gt;brackets “&amp;gt;” and “&amp;lt;” when the method is the default one and will work by&lt;br&gt;default without “-m”.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                       +-------------------------------------------------+
                       |                input sample type                |
+----------------------+---------+---------+---------+---------+---------+
|     pattern type     | boolean | integer |   ip    | string  | binary  |
+----------------------+---------+---------+---------+---------+---------+
| none (presence only) |  found  |  found  |  found  |  found  |  found  |
+----------------------+---------+---------+---------+---------+---------+
| none (boolean value) |&amp;gt;  bool &amp;lt;|   bool  |         |   bool  |         |
+----------------------+---------+---------+---------+---------+---------+
| integer (value)      |   int   |&amp;gt;  int  &amp;lt;|   int   |   int   |         |
+----------------------+---------+---------+---------+---------+---------+
| integer (length)     |   len   |   len   |   len   |   len   |   len   |
+----------------------+---------+---------+---------+---------+---------+
| ip address           |         |         |&amp;gt;   ip  &amp;lt;|    ip   |    ip   |
+----------------------+---------+---------+---------+---------+---------+
| exact string         |   str   |   str   |   str   |&amp;gt;  str  &amp;lt;|   str   |
+----------------------+---------+---------+---------+---------+---------+
| prefix               |   beg   |   beg   |   beg   |   beg   |   beg   |
+----------------------+---------+---------+---------+---------+---------+
| suffix               |   end   |   end   |   end   |   end   |   end   |
+----------------------+---------+---------+---------+---------+---------+
| substring            |   sub   |   sub   |   sub   |   sub   |   sub   |
+----------------------+---------+---------+---------+---------+---------+
| subdir               |   dir   |   dir   |   dir   |   dir   |   dir   |
+----------------------+---------+---------+---------+---------+---------+
| domain               |   dom   |   dom   |   dom   |   dom   |   dom   |
+----------------------+---------+---------+---------+---------+---------+
| regex                |   reg   |   reg   |   reg   |   reg   |   reg   |
+----------------------+---------+---------+---------+---------+---------+
| hex block            |         |         |         |   bin   |   bin   |
+----------------------+---------+---------+---------+---------+---------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-1-1-matching-booleans&quot;&gt;&lt;a href=&quot;#7-1-1-matching-booleans&quot; class=&quot;headerlink&quot; title=&quot;7.1.1. matching booleans&quot;&gt;&lt;/a&gt;7.1.1. matching booleans&lt;/h2&gt;&lt;p&gt;in order to match a boolean, no value is needed and all values are ignored.&lt;br&gt;boolean matching is used by default for all fetch methods of type “boolean”.&lt;br&gt;when boolean matching is used, the fetched value is returned as-is, which means&lt;br&gt;that a boolean “true” will always match and a boolean “false” will never match.&lt;/p&gt;
&lt;p&gt;boolean matching may also be enforced using “-m bool” on fetch methods which&lt;br&gt;return an integer value. then, integer value 0 is converted to the boolean&lt;br&gt;“false” and all other values are converted to “true”.&lt;/p&gt;
&lt;h2 id=&quot;7-1-2-matching-integers&quot;&gt;&lt;a href=&quot;#7-1-2-matching-integers&quot; class=&quot;headerlink&quot; title=&quot;7.1.2. matching integers&quot;&gt;&lt;/a&gt;7.1.2. matching integers&lt;/h2&gt;&lt;p&gt;integer matching applies by default to integer fetch methods. it can also be&lt;br&gt;enforced on boolean fetches using “-m int”. in this case, “false” is converted&lt;br&gt;to the integer 0, and “true” is converted to the integer 1.&lt;/p&gt;
&lt;p&gt;integer matching also supports integer ranges and operators. note that integer&lt;br&gt;matching only applies to positive values. a range is a value expressed with a&lt;br&gt;lower and an upper bound separated with a colon, both of which may be omitted.&lt;/p&gt;
&lt;p&gt;for instance, “1024:65535” is a valid range to represent a range of&lt;br&gt;unprivileged ports, and “1024:” would also work. “0:1023” is a valid&lt;br&gt;representation of privileged ports, and “:1023” would also work.&lt;/p&gt;
&lt;p&gt;as a special case, some acl functions support decimal numbers which are in fact&lt;br&gt;two integers separated by a dot. this is used with some version checks for&lt;br&gt;instance. all integer properties apply to those decimal numbers, including&lt;br&gt;ranges and operators.&lt;/p&gt;
&lt;p&gt;for an easier usage, comparison operators are also supported. note that using&lt;br&gt;operators with ranges does not make much sense and is strongly discouraged.&lt;br&gt;similarly, it does not make much sense to perform order comparisons with a set&lt;br&gt;of values.&lt;/p&gt;
&lt;p&gt;available operators for integer matching are :&lt;/p&gt;
&lt;p&gt;  eq : true if the tested value equals at least one value&lt;br&gt;  ge : true if the tested value is greater than or equal to at least one value&lt;br&gt;  gt : true if the tested value is greater than at least one value&lt;br&gt;  le : true if the tested value is less than or equal to at least one value&lt;br&gt;  lt : true if the tested value is less than at least one value&lt;/p&gt;
&lt;p&gt;for instance, the following acl matches any negative content-length header :&lt;/p&gt;
&lt;p&gt;  acl negative-length hdr_val(content-length) lt 0&lt;/p&gt;
&lt;p&gt;this one matches ssl versions between 3.0 and 3.1 (inclusive) :&lt;/p&gt;
&lt;p&gt;  acl sslv3 req_ssl_ver 3:3.1&lt;/p&gt;
&lt;h2 id=&quot;7-1-3-matching-strings&quot;&gt;&lt;a href=&quot;#7-1-3-matching-strings&quot; class=&quot;headerlink&quot; title=&quot;7.1.3. matching strings&quot;&gt;&lt;/a&gt;7.1.3. matching strings&lt;/h2&gt;&lt;p&gt;string matching applies to string or binary fetch methods, and exists in 6&lt;br&gt;different forms :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;exact match     (-m str) : the extracted string must exactly match the&lt;br&gt;patterns ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;substring match (-m sub) : the patterns are looked up inside the&lt;br&gt;extracted string, and the acl matches if any of them is found inside ;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;prefix match    (-m beg) : the patterns are compared with the beginning of&lt;br&gt;the extracted string, and the acl matches if any of them matches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;suffix match    (-m end) : the patterns are compared with the end of the&lt;br&gt;extracted string, and the acl matches if any of them matches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;subdir match    (-m sub) : the patterns are looked up inside the extracted&lt;br&gt;string, delimited with slashes (“/“), and the acl matches if any of them&lt;br&gt;matches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;domain match    (-m dom) : the patterns are looked up inside the extracted&lt;br&gt;string, delimited with dots (“.”), and the acl matches if any of them&lt;br&gt;matches.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;string matching applies to verbatim strings as they are passed, with the&lt;br&gt;exception of the backslash (“\”) which makes it possible to escape some&lt;br&gt;characters such as the space. if the “-i” flag is passed before the first&lt;br&gt;string, then the matching will be performed ignoring the case. in order&lt;br&gt;to match the string “-i”, either set it second, or pass the “–” flag&lt;br&gt;before the first string. same applies of course to match the string “–”.&lt;/p&gt;
&lt;h2 id=&quot;7-1-4-matching-regular-expressions-regexes&quot;&gt;&lt;a href=&quot;#7-1-4-matching-regular-expressions-regexes&quot; class=&quot;headerlink&quot; title=&quot;7.1.4. matching regular expressions (regexes)&quot;&gt;&lt;/a&gt;7.1.4. matching regular expressions (regexes)&lt;/h2&gt;&lt;p&gt;just like with string matching, regex matching applies to verbatim strings as&lt;br&gt;they are passed, with the exception of the backslash (“\”) which makes it&lt;br&gt;possible to escape some characters such as the space. if the “-i” flag is&lt;br&gt;passed before the first regex, then the matching will be performed ignoring&lt;br&gt;the case. in order to match the string “-i”, either set it second, or pass&lt;br&gt;the “–” flag before the first string. same principle applies of course to&lt;br&gt;match the string “–”.&lt;/p&gt;
&lt;h2 id=&quot;7-1-5-matching-arbitrary-data-blocks&quot;&gt;&lt;a href=&quot;#7-1-5-matching-arbitrary-data-blocks&quot; class=&quot;headerlink&quot; title=&quot;7.1.5. matching arbitrary data blocks&quot;&gt;&lt;/a&gt;7.1.5. matching arbitrary data blocks&lt;/h2&gt;&lt;p&gt;it is possible to match some extracted samples against a binary block which may&lt;br&gt;not safely be represented as a string. for this, the patterns must be passed as&lt;br&gt;a series of hexadecimal digits in an even number, when the match method is set&lt;br&gt;to binary. each sequence of two digits will represent a byte. the hexadecimal&lt;br&gt;digits may be used upper or lower case.&lt;/p&gt;
&lt;p&gt;example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# match &amp;quot;hello\n&amp;quot; in the input stream (\x48 \x65 \x6c \x6c \x6f \x0a)
acl hello payload(0,6) -m bin 48656c6c6f0a
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-1-6-matching-ipv4-and-ipv6-addresses&quot;&gt;&lt;a href=&quot;#7-1-6-matching-ipv4-and-ipv6-addresses&quot; class=&quot;headerlink&quot; title=&quot;7.1.6. matching ipv4 and ipv6 addresses&quot;&gt;&lt;/a&gt;7.1.6. matching ipv4 and ipv6 addresses&lt;/h2&gt;&lt;p&gt;ipv4 addresses values can be specified either as plain addresses or with a&lt;br&gt;netmask appended, in which case the ipv4 address matches whenever it is&lt;br&gt;within the network. plain addresses may also be replaced with a resolvable&lt;br&gt;host name, but this practice is generally discouraged as it makes it more&lt;br&gt;difficult to read and debug configurations. if hostnames are used, you should&lt;br&gt;at least ensure that they are present in /etc/hosts so that the configuration&lt;br&gt;does not depend on any random dns match at the moment the configuration is&lt;br&gt;parsed.&lt;/p&gt;
&lt;p&gt;ipv6 may be entered in their usual form, with or without a netmask appended.&lt;br&gt;only bit counts are accepted for ipv6 netmasks. in order to avoid any risk of&lt;br&gt;trouble with randomly resolved ip addresses, host names are never allowed in&lt;br&gt;ipv6 patterns.&lt;/p&gt;
&lt;p&gt;haproxy is also able to match ipv4 addresses with ipv6 addresses in the&lt;br&gt;following situations :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;tested address is ipv4, pattern address is ipv4, the match applies&lt;br&gt;in ipv4 using the supplied mask if any.&lt;/li&gt;
&lt;li&gt;tested address is ipv6, pattern address is ipv6, the match applies&lt;br&gt;in ipv6 using the supplied mask if any.&lt;/li&gt;
&lt;li&gt;tested address is ipv6, pattern address is ipv4, the match applies in ipv4&lt;br&gt;using the pattern’s mask if the ipv6 address matches with 2002:ipv4::,&lt;br&gt;::ipv4 or ::ffff:ipv4, otherwise it fails.&lt;/li&gt;
&lt;li&gt;tested address is ipv4, pattern address is ipv6, the ipv4 address is first&lt;br&gt;converted to ipv6 by prefixing ::ffff: in front of it, then the match is&lt;br&gt;applied in ipv6 using the supplied ipv6 mask.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-2-using-acls-to-form-conditions&quot;&gt;&lt;a href=&quot;#7-2-using-acls-to-form-conditions&quot; class=&quot;headerlink&quot; title=&quot;7.2. using acls to form conditions&quot;&gt;&lt;/a&gt;7.2. using acls to form conditions&lt;/h2&gt;&lt;p&gt;some actions are only performed upon a valid condition. a condition is a&lt;br&gt;combination of acls with operators. 3 operators are supported :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;and (implicit)&lt;/li&gt;
&lt;li&gt;or  (explicit with the “or” keyword or the “||” operator)&lt;/li&gt;
&lt;li&gt;negation with the exclamation mark (“!”)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;a condition is formed as a disjunctive form:&lt;/p&gt;
&lt;p&gt;   [!]acl1 [!]acl2 … [!]acln  { or [!]acl1 [!]acl2 … [!]acln } …&lt;/p&gt;
&lt;p&gt;such conditions are generally used after an “if” or “unless” statement,&lt;br&gt;indicating when the condition will trigger the action.&lt;/p&gt;
&lt;p&gt;for instance, to block http requests to the “*” url with methods other than&lt;br&gt;“options”, as well as post requests without content-length, and get or head&lt;br&gt;requests with a content-length greater than 0, and finally every request which&lt;br&gt;is not either get/head/post/options !&lt;/p&gt;
&lt;p&gt;   acl missing_cl hdr_cnt(content-length) eq 0&lt;br&gt;   block if http_url_star !meth_options || meth_post missing_cl&lt;br&gt;   block if meth_get http_content&lt;br&gt;   block unless meth_get or meth_post or meth_options&lt;/p&gt;
&lt;p&gt;to select a different backend for requests to static contents on the “www” site&lt;br&gt;and to every request on the “img”, “video”, “download” and “ftp” hosts :&lt;/p&gt;
&lt;p&gt;   acl url_static  path_beg         /static /images /img /css&lt;br&gt;   acl url_static  path_end         .gif .png .jpg .css .js&lt;br&gt;   acl host_www    hdr_beg(host) -i www&lt;br&gt;   acl host_static hdr_beg(host) -i img. video. download. ftp.&lt;/p&gt;
&lt;h1 id=&quot;now-use-backend-“static”-for-all-static-only-hosts-and-for-static-urls&quot;&gt;&lt;a href=&quot;#now-use-backend-“static”-for-all-static-only-hosts-and-for-static-urls&quot; class=&quot;headerlink&quot; title=&quot;now use backend “static” for all static-only hosts, and for static urls&quot;&gt;&lt;/a&gt;now use backend “static” for all static-only hosts, and for static urls&lt;/h1&gt;&lt;h1 id=&quot;of-host-“www”-use-backend-“www”-for-the-rest&quot;&gt;&lt;a href=&quot;#of-host-“www”-use-backend-“www”-for-the-rest&quot; class=&quot;headerlink&quot; title=&quot;of host “www”. use backend “www” for the rest.&quot;&gt;&lt;/a&gt;of host “www”. use backend “www” for the rest.&lt;/h1&gt;&lt;p&gt;   use_backend static if host_static or host_www url_static&lt;br&gt;   use_backend www    if host_www&lt;/p&gt;
&lt;p&gt;it is also possible to form rules using “anonymous acls”. those are unnamed acl&lt;br&gt;expressions that are built on the fly without needing to be declared. they must&lt;br&gt;be enclosed between braces, with a space before and after each brace (because&lt;br&gt;the braces must be seen as independent words). example :&lt;/p&gt;
&lt;p&gt;   the following rule :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl missing_cl hdr_cnt(content-length) eq 0
block if meth_post missing_cl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   can also be written that way :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;block if meth_post { hdr_cnt(content-length) eq 0 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it is generally not recommended to use this construct because it’s a lot easier&lt;br&gt;to leave errors in the configuration when written that way. however, for very&lt;br&gt;simple rules matching only one source ip address for instance, it can make more&lt;br&gt;sense to use them than to declare acls with random names. another example of&lt;br&gt;good use is the following :&lt;/p&gt;
&lt;p&gt;   with named acls :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl site_dead nbsrv(dynamic) lt 2
acl site_dead nbsrv(static)  lt 2
monitor fail  if site_dead
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   with anonymous acls :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;monitor fail if { nbsrv(dynamic) lt 2 } || { nbsrv(static) lt 2 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;see section 4.2 for detailed help on the “block” and “use_backend” keywords.&lt;/p&gt;
&lt;h2 id=&quot;7-3-fetching-samples&quot;&gt;&lt;a href=&quot;#7-3-fetching-samples&quot; class=&quot;headerlink&quot; title=&quot;7.3. fetching samples&quot;&gt;&lt;/a&gt;7.3. fetching samples&lt;/h2&gt;&lt;p&gt;historically, sample fetch methods were only used to retrieve data to match&lt;br&gt;against patterns using acls. with the arrival of stick-tables, a new class of&lt;br&gt;sample fetch methods was created, most often sharing the same syntax as their&lt;br&gt;acl counterpart. these sample fetch methods are also known as “fetches”. as&lt;br&gt;of now, acls and fetches have converged. all acl fetch methods have been made&lt;br&gt;available as fetch methods, and acls may use any sample fetch method as well.&lt;/p&gt;
&lt;p&gt;this section details all available sample fetch methods and their output type.&lt;br&gt;some sample fetch methods have deprecated aliases that are used to maintain&lt;br&gt;compatibility with existing configurations. they are then explicitly marked as&lt;br&gt;deprecated and should not be used in new setups.&lt;/p&gt;
&lt;p&gt;the acl derivatives are also indicated when available, with their respective&lt;br&gt;matching methods. these ones all have a well defined default pattern matching&lt;br&gt;method, so it is never necessary (though allowed) to pass the “-m” option to&lt;br&gt;indicate how the sample will be matched using acls.&lt;/p&gt;
&lt;p&gt;as indicated in the sample type versus matching compatibility matrix above,&lt;br&gt;when using a generic sample fetch method in an acl, the “-m” option is&lt;br&gt;mandatory unless the sample type is one of boolean, integer, ipv4 or ipv6. when&lt;br&gt;the same keyword exists as an acl keyword and as a standard fetch method, the&lt;br&gt;acl engine will automatically pick the acl-only one by default.&lt;/p&gt;
&lt;p&gt;some of these keywords support one or multiple mandatory arguments, and one or&lt;br&gt;multiple optional arguments. these arguments are strongly typed and are checked&lt;br&gt;when the configuration is parsed so that there is no risk of running with an&lt;br&gt;incorrect argument (eg: an unresolved backend name). fetch function arguments&lt;br&gt;are passed between parenthesis and are delimited by commas.  when an argument&lt;br&gt;is optional, it will be indicated below between square brackets (‘[ ]’). when&lt;br&gt;all arguments are optional, the parenthesis may be omitted.&lt;/p&gt;
&lt;p&gt;thus, the syntax of a standard sample fetch method is one of the following :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name&lt;/li&gt;
&lt;li&gt;name(arg1)&lt;/li&gt;
&lt;li&gt;name(arg1,arg2)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-3-1-converters&quot;&gt;&lt;a href=&quot;#7-3-1-converters&quot; class=&quot;headerlink&quot; title=&quot;7.3.1. converters&quot;&gt;&lt;/a&gt;7.3.1. converters&lt;/h2&gt;&lt;p&gt;sample fetch methods may be combined with transformations to be applied on top&lt;br&gt;of the fetched sample (also called “converters”). these combinations form what&lt;br&gt;is called “sample expressions” and the result is a “sample”. initially this&lt;br&gt;was only supported by “stick on” and “stick store-request” directives but this&lt;br&gt;has now be extended to all places where samples may be used (acls, log-format,&lt;br&gt;unique-id-format, add-header, …).&lt;/p&gt;
&lt;p&gt;these transformations are enumerated as a series of specific keywords after the&lt;br&gt;sample fetch method. these keywords may equally be appended immediately after&lt;br&gt;the fetch keyword’s argument, delimited by a comma. these keywords can also&lt;br&gt;support some arguments (eg: a netmask) which must be passed in parenthesis.&lt;/p&gt;
&lt;p&gt;a certain category of converters are bitwise and arithmetic operators which&lt;br&gt;support performing basic operations on integers. some bitwise operations are&lt;br&gt;supported (and, or, xor, cpl) and some arithmetic operations are supported&lt;br&gt;(add, sub, mul, div, mod, neg). some comparators are provided (odd, even, not,&lt;br&gt;bool) which make it possible to report a match without having to write an acl.&lt;/p&gt;
&lt;p&gt;the currently available list of transformation keywords include :&lt;/p&gt;
&lt;p&gt;add(&lt;value&gt;)&lt;br&gt;  adds &lt;value&gt; to the input value of type signed integer, and returns the&lt;br&gt;  result as a signed integer. &lt;value&gt; can be a numeric value or a variable&lt;br&gt;  name. the name of the variable starts by an indication about its scope. the&lt;br&gt;  allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;and(&lt;value&gt;)&lt;br&gt;  performs a bitwise “and” between &lt;value&gt; and the input value of type signed&lt;br&gt;  integer, and returns the result as an signed integer. &lt;value&gt; can be a&lt;br&gt;  numeric value or a variable name. the name of the variable starts by an&lt;br&gt;  indication about its scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;base64&lt;br&gt;  converts a binary input sample to a base64 string. it is used to log or&lt;br&gt;  transfer binary content in a way that can be reliably transferred (eg:&lt;br&gt;  an ssl id can be copied in a header).&lt;/p&gt;
&lt;p&gt;bool&lt;br&gt;  returns a boolean true if the input value of type signed integer is&lt;br&gt;  non-null, otherwise returns false. used in conjunction with and(), it can be&lt;br&gt;  used to report true/false for bit testing on input values (eg: verify the&lt;br&gt;  presence of a flag).&lt;/p&gt;
&lt;p&gt;bytes(&lt;offset&gt;[,&lt;length&gt;])&lt;br&gt;  extracts some bytes from an input binary sample. the result is a binary&lt;br&gt;  sample starting at an offset (in bytes) of the original sample and&lt;br&gt;  optionnaly truncated at the given length.&lt;/length&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;cpl&lt;br&gt;  takes the input value of type signed integer, applies a ones-complement&lt;br&gt;  (flips all bits) and returns the result as an signed integer.&lt;/p&gt;
&lt;p&gt;crc32([&lt;avalanche&gt;])&lt;br&gt;  hashes a binary input sample into an unsigned 32-bit quantity using the crc32&lt;br&gt;  hash function. optionally, it is possible to apply a full avalanche hash&lt;br&gt;  function to the output if the optional &lt;avalanche&gt; argument equals 1. this&lt;br&gt;  converter uses the same functions as used by the various hash-based load&lt;br&gt;  balancing algorithms, so it will provide exactly the same results. it is&lt;br&gt;  provided for compatibility with other software which want a crc32 to be&lt;br&gt;  computed on some input keys, so it follows the most common implementation as&lt;br&gt;  found in ethernet, gzip, png, etc… it is slower than the other algorithms&lt;br&gt;  but may provide a better or at least less predictable distribution. it must&lt;br&gt;  not be used for security purposes as a 32-bit hash is trivial to break. see&lt;br&gt;  also “djb2”, “sdbm”, “wt6” and the “hash-type” directive.&lt;/avalanche&gt;&lt;/avalanche&gt;&lt;/p&gt;
&lt;p&gt;da-csv(&lt;prop&gt;[,&lt;prop&gt;*])&lt;br&gt;  asks the deviceatlas converter to identify the user agent string passed on&lt;br&gt;  input, and to emit a string made of the concatenation of the properties&lt;br&gt;  enumerated in argument, delimited by the separator defined by the global&lt;br&gt;  keyword “deviceatlas-property-separator”, or by default the pipe character&lt;br&gt;  (‘|’). there’s a limit of 5 different properties imposed by the haproxy&lt;br&gt;  configuration language.&lt;/prop&gt;&lt;/prop&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;    frontend www&lt;br&gt;    bind *:8881&lt;br&gt;    default_backend servers&lt;br&gt;    http-request set-header x-deviceatlas-data %[req.fhdr(user-agent),da-csv(primaryhardwaretype,osname,osversion,browsername,browserversion)]&lt;/p&gt;
&lt;p&gt;debug&lt;br&gt;  this converter is used as debug tool. it dumps on screen the content and the&lt;br&gt;  type of the input sample. the sample is returned as is on its output. this&lt;br&gt;  converter only exists when haproxy was built with debugging enabled.&lt;/p&gt;
&lt;p&gt;div(&lt;value&gt;)&lt;br&gt;  divides the input value of type signed integer by &lt;value&gt;, and returns the&lt;br&gt;  result as an signed integer. if &lt;value&gt; is null, the largest unsigned&lt;br&gt;  integer is returned (typically 2^63-1). &lt;value&gt; can be a numeric value or a&lt;br&gt;  variable name. the name of the variable starts by an indication about it&lt;br&gt;  scope. the scope allowed are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;djb2([&lt;avalanche&gt;])&lt;br&gt;  hashes a binary input sample into an unsigned 32-bit quantity using the djb2&lt;br&gt;  hash function. optionally, it is possible to apply a full avalanche hash&lt;br&gt;  function to the output if the optional &lt;avalanche&gt; argument equals 1. this&lt;br&gt;  converter uses the same functions as used by the various hash-based load&lt;br&gt;  balancing algorithms, so it will provide exactly the same results. it is&lt;br&gt;  mostly intended for debugging, but can be used as a stick-table entry to&lt;br&gt;  collect rough statistics. it must not be used for security purposes as a&lt;br&gt;  32-bit hash is trivial to break. see also “crc32”, “sdbm”, “wt6” and the&lt;br&gt;  “hash-type” directive.&lt;/avalanche&gt;&lt;/avalanche&gt;&lt;/p&gt;
&lt;p&gt;even&lt;br&gt;  returns a boolean true if the input value of type signed integer is even&lt;br&gt;  otherwise returns false. it is functionally equivalent to “not,and(1),bool”.&lt;/p&gt;
&lt;p&gt;field(&lt;index&gt;,&lt;delimiters&gt;)&lt;br&gt;  extracts the substring at the given index considering given delimiters from&lt;br&gt;  an input string. indexes start at 1 and delimiters are a string formatted&lt;br&gt;  list of chars.&lt;/delimiters&gt;&lt;/index&gt;&lt;/p&gt;
&lt;p&gt;hex&lt;br&gt;  converts a binary input sample to an hex string containing two hex digits per&lt;br&gt;  input byte. it is used to log or transfer hex dumps of some binary input data&lt;br&gt;  in a way that can be reliably transferred (eg: an ssl id can be copied in a&lt;br&gt;  header).&lt;/p&gt;
&lt;p&gt;http_date([&lt;offset&gt;])&lt;br&gt;  converts an integer supposed to contain a date since epoch to a string&lt;br&gt;  representing this date in a format suitable for use in http header fields. if&lt;br&gt;  an offset value is specified, then it is a number of seconds that is added to&lt;br&gt;  the date before the conversion is operated. this is particularly useful to&lt;br&gt;  emit date header fields, expires values in responses when combined with a&lt;br&gt;  positive offset, or last-modified values when the offset is negative.&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;in_table(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, a boolean false&lt;br&gt;  is returned. otherwise a boolean true is returned. this can be used to verify&lt;br&gt;  the presence of a certain key in a table tracking some elements (eg: whether&lt;br&gt;  or not a source ip address or an authorization header was already seen).&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;ipmask(&lt;mask&gt;)&lt;br&gt;  apply a mask to an ipv4 address, and use the result for lookups and storage.&lt;br&gt;  this can be used to make all hosts within a certain mask to share the same&lt;br&gt;  table entries and as such use the same server. the mask can be passed in&lt;br&gt;  dotted form (eg: 255.255.255.0) or in cidr form (eg: 24).&lt;/mask&gt;&lt;/p&gt;
&lt;p&gt;json([&lt;input-code&gt;])&lt;br&gt;  escapes the input string and produces an ascii ouput string ready to use as a&lt;br&gt;  json string. the converter tries to decode the input string according to the&lt;br&gt;  &lt;input-code&gt; parameter. it can be “ascii”, “utf8”, “utf8s”, “utf8”” or&lt;br&gt;  “utf8ps”. the “ascii” decoder never fails. the “utf8” decoder detects 3 types&lt;br&gt;  of errors:&lt;/input-code&gt;&lt;/input-code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bad utf-8 sequence (lone continuation byte, bad number of continuation&lt;br&gt;bytes, …)&lt;/li&gt;
&lt;li&gt;invalid range (the decoded value is within a utf-8 prohibited range),&lt;/li&gt;
&lt;li&gt;&lt;p&gt;code overlong (the value is encoded with more bytes than necessary).&lt;/p&gt;
&lt;p&gt;the utf-8 json encoding can produce a “too long value” error when the utf-8&lt;br&gt;character is greater than 0xffff because the json string escape specification&lt;br&gt;only authorizes 4 hex digits for the value encoding. the utf-8 decoder exists&lt;br&gt;in 4 variants designated by a combination of two suffix letters : “p” for&lt;br&gt;“permissive” and “s” for “silently ignore”. the behaviors of the decoders&lt;br&gt;are :&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;“ascii”  : never fails ;&lt;/li&gt;
&lt;li&gt;“utf8”   : fails on any detected errors ;&lt;/li&gt;
&lt;li&gt;“utf8s”  : never fails, but removes characters corresponding to errors ;&lt;/li&gt;
&lt;li&gt;“utf8p”  : accepts and fixes the overlong errors, but fails on any other&lt;pre&gt;&lt;code&gt;error ;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“utf8ps” : never fails, accepts and fixes the overlong errors, but removes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;characters corresponding to the other errors.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;this converter is particularly useful for building properly escaped json for&lt;br&gt;logging to servers which consume json-formated traffic logs.&lt;/p&gt;
&lt;p&gt;example:&lt;br&gt;capture request header user-agent len 150&lt;br&gt;capture request header host len 15&lt;br&gt;log-format {“ip”:”%[src]”,”user-agent”:”%[capture.req.hdr(1),json]”}&lt;/p&gt;
&lt;p&gt;input request from client 127.0.0.1:&lt;br&gt;get / http/1.0&lt;br&gt;user-agent: very “ugly” ua 1/2&lt;/p&gt;
&lt;p&gt;output log:&lt;br&gt;{“ip”:”127.0.0.1”,”user-agent”:”very \”ugly\” ua 1\/2”}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;language(&lt;value&gt;[,&lt;default&gt;])&lt;br&gt;  returns the value with the highest q-factor from a list as extracted from the&lt;br&gt;  “accept-language” header using “req.fhdr”. values with no q-factor have a&lt;br&gt;  q-factor of 1. values with a q-factor of 0 are dropped. only values which&lt;br&gt;  belong to the list of semi-colon delimited &lt;values&gt; will be considered. the&lt;br&gt;  argument &lt;value&gt; syntax is “lang[;lang[;lang[;…]]]”. if no value matches the&lt;br&gt;  given list and a default value is provided, it is returned. note that language&lt;br&gt;  names may have a variant after a dash (‘-‘). if this variant is present in the&lt;br&gt;  list, it will be matched, but if it is not, only the base language is checked.&lt;br&gt;  the match is case-sensitive, and the output string is always one of those&lt;br&gt;  provided in arguments.  the ordering of arguments is meaningless, only the&lt;br&gt;  ordering of the values in the request counts, as the first value among&lt;br&gt;  multiple sharing the same q-factor is used.&lt;/value&gt;&lt;/values&gt;&lt;/default&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this configuration switches to the backend matching a
# given language based on the request :

acl es req.fhdr(accept-language),language(es;fr;en) -m str es
acl fr req.fhdr(accept-language),language(es;fr;en) -m str fr
acl en req.fhdr(accept-language),language(es;fr;en) -m str en
use_backend spanish if es
use_backend french  if fr
use_backend english if en
default_backend choose_your_language
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;lower&lt;br&gt;  convert a string sample to lower case. this can only be placed after a string&lt;br&gt;  sample fetch function or after a transformation keyword returning a string&lt;br&gt;  type. the result is of type string.&lt;/p&gt;
&lt;p&gt;ltime(&lt;format&gt;[,&lt;offset&gt;])&lt;br&gt;  converts an integer supposed to contain a date since epoch to a string&lt;br&gt;  representing this date in local time using a format defined by the &lt;format&gt;&lt;br&gt;  string using strftime(3). the purpose is to allow any date format to be used&lt;br&gt;  in logs. an optional &lt;offset&gt; in seconds may be applied to the input date&lt;br&gt;  (positive or negative). see the strftime() man page for the format supported&lt;br&gt;  by your operating system. see also the utime converter.&lt;/offset&gt;&lt;/format&gt;&lt;/offset&gt;&lt;/format&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# emit two colons, one with the local time and another with ip:port
# eg:  20140710162350 127.0.0.1:57325
log-format %[date,ltime(%y%m%d%h%m%s)]\ %ci:%cp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;map(&lt;map_file&gt;[,&lt;default_value&gt;])&lt;br&gt;map_&lt;match_type&gt;(&lt;map_file&gt;[,&lt;default_value&gt;])&lt;br&gt;map_&lt;match_type&gt;_&lt;output_type&gt;(&lt;map_file&gt;[,&lt;default_value&gt;])&lt;br&gt;  search the input value from &lt;map_file&gt; using the &lt;match_type&gt; matching method,&lt;br&gt;  and return the associated value converted to the type &lt;output_type&gt;. if the&lt;br&gt;  input value cannot be found in the &lt;map_file&gt;, the converter returns the&lt;br&gt;  &lt;default_value&gt;. if the &lt;default_value&gt; is not set, the converter fails and&lt;br&gt;  acts as if no input value could be fetched. if the &lt;match_type&gt; is not set, it&lt;br&gt;  defaults to “str”. likewise, if the &lt;output_type&gt; is not set, it defaults to&lt;br&gt;  “str”. for convenience, the “map” keyword is an alias for “map_str” and maps a&lt;br&gt;  string to another string.&lt;/output_type&gt;&lt;/match_type&gt;&lt;/default_value&gt;&lt;/default_value&gt;&lt;/map_file&gt;&lt;/output_type&gt;&lt;/match_type&gt;&lt;/map_file&gt;&lt;/default_value&gt;&lt;/map_file&gt;&lt;/output_type&gt;&lt;/match_type&gt;&lt;/default_value&gt;&lt;/map_file&gt;&lt;/match_type&gt;&lt;/default_value&gt;&lt;/map_file&gt;&lt;/p&gt;
&lt;p&gt;  it is important to avoid overlapping between the keys : ip addresses and&lt;br&gt;  strings are stored in trees, so the first of the finest match will be used.&lt;br&gt;  other keys are stored in lists, so the first matching occurrence will be used.&lt;/p&gt;
&lt;p&gt;  the following array contains the list of all map functions avalaible sorted by&lt;br&gt;  input type, match type and output type.&lt;/p&gt;
&lt;p&gt;  input type | match method | output type str | output type int | output type ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | str          | map_str         | map_str_int     | map_str_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | beg          | map_beg         | map_beg_int     | map_end_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | sub          | map_sub         | map_sub_int     | map_sub_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | dir          | map_dir         | map_dir_int     | map_dir_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | dom          | map_dom         | map_dom_int     | map_dom_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | end          | map_end         | map_end_int     | map_end_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    str      | reg          | map_reg         | map_reg_int     | map_reg_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    int      | int          | map_int         | map_int_int     | map_int_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;br&gt;    ip       | ip           | map_ip          | map_ip_int      | map_ip_ip&lt;br&gt;  ———–+————–+—————–+—————–+—————&lt;/p&gt;
&lt;p&gt;  the file contains one key + value per line. lines which start with ‘#’ are&lt;br&gt;  ignored, just like empty lines. leading tabs and spaces are stripped. the key&lt;br&gt;  is then the first “word” (series of non-space/tabs characters), and the value&lt;br&gt;  is what follows this series of space/tab till the end of the line excluding&lt;br&gt;  trailing spaces/tabs.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this is a comment and is ignored
   2.22.246.0/23    united kingdom      \n
&amp;lt;-&amp;gt;&amp;lt;-----------&amp;gt;&amp;lt;--&amp;gt;&amp;lt;------------&amp;gt;&amp;lt;----&amp;gt;
 |       |       |         |        `- trailing spaces ignored
 |       |       |         `---------- value
 |       |       `-------------------- middle spaces ignored
 |       `---------------------------- key
 `------------------------------------ leading spaces ignored
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;mod(&lt;value&gt;)&lt;br&gt;  divides the input value of type signed integer by &lt;value&gt;, and returns the&lt;br&gt;  remainder as an signed integer. if &lt;value&gt; is null, then zero is returned.&lt;br&gt;  &lt;value&gt; can be a numeric value or a variable name. the name of the variable&lt;br&gt;  starts by an indication about its scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;mul(&lt;value&gt;)&lt;br&gt;  multiplies the input value of type signed integer by &lt;value&gt;, and returns&lt;br&gt;  the product as an signed integer. in case of overflow, the largest possible&lt;br&gt;  value for the sign is returned so that the operation doesn’t wrap around.&lt;br&gt;  &lt;value&gt; can be a numeric value or a variable name. the name of the variable&lt;br&gt;  starts by an indication about its scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;neg&lt;br&gt;  takes the input value of type signed integer, computes the opposite value,&lt;br&gt;  and returns the remainder as an signed integer. 0 is identity. this operator&lt;br&gt;  is provided for reversed subtracts : in order to subtract the input from a&lt;br&gt;  constant, simply perform a “neg,add(value)”.&lt;/p&gt;
&lt;p&gt;not&lt;br&gt;  returns a boolean false if the input value of type signed integer is&lt;br&gt;  non-null, otherwise returns true. used in conjunction with and(), it can be&lt;br&gt;  used to report true/false for bit testing on input values (eg: verify the&lt;br&gt;  absence of a flag).&lt;/p&gt;
&lt;p&gt;odd&lt;br&gt;  returns a boolean true if the input value of type signed integer is odd&lt;br&gt;  otherwise returns false. it is functionally equivalent to “and(1),bool”.&lt;/p&gt;
&lt;p&gt;or(&lt;value&gt;)&lt;br&gt;  performs a bitwise “or” between &lt;value&gt; and the input value of type signed&lt;br&gt;  integer, and returns the result as an signed integer. &lt;value&gt; can be a&lt;br&gt;  numeric value or a variable name. the name of the variable starts by an&lt;br&gt;  indication about its scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;regsub(&lt;regex&gt;,&lt;subst&gt;[,&lt;flags&gt;])&lt;br&gt;  applies a regex-based substitution to the input string. it does the same&lt;br&gt;  operation as the well-known “sed” utility with “s/&lt;regex&gt;/&lt;subst&gt;/“. by&lt;br&gt;  default it will replace in the input string the first occurrence of the&lt;br&gt;  largest part matching the regular expression &lt;regex&gt; with the substitution&lt;br&gt;  string &lt;subst&gt;. it is possible to replace all occurrences instead by adding&lt;br&gt;  the flag “g” in the third argument &lt;flags&gt;. it is also possible to make the&lt;br&gt;  regex case insensitive by adding the flag “i” in &lt;flags&gt;. since &lt;flags&gt; is a&lt;br&gt;  string, it is made up from the concatenation of all desired flags. thus if&lt;br&gt;  both “i” and “g” are desired, using “gi” or “ig” will have the same effect.&lt;br&gt;  it is important to note that due to the current limitations of the&lt;br&gt;  configuration parser, some characters such as closing parenthesis or comma&lt;br&gt;  are not possible to use in the arguments. the first use of this converter is&lt;br&gt;  to replace certain characters or sequence of characters with other ones.&lt;/flags&gt;&lt;/flags&gt;&lt;/flags&gt;&lt;/subst&gt;&lt;/regex&gt;&lt;/subst&gt;&lt;/regex&gt;&lt;/flags&gt;&lt;/subst&gt;&lt;/regex&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# de-duplicate &amp;quot;/&amp;quot; in header &amp;quot;x-path&amp;quot;.
# input:  x-path: /////a///b/c/xzxyz/
# output: x-path: /a/b/c/xzxyz/
http-request set-header x-path %[hdr(x-path),regsub(/+,/,g)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;capture-req(&lt;id&gt;)&lt;br&gt;  capture the string entry in the request slot &lt;id&gt; and returns the entry as&lt;br&gt;  is. if the slot doesn’t exist, the capture fails silently.&lt;/id&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;  see also: “declare capture”, “http-request capture”,&lt;br&gt;            “http-response capture”, “req.hdr.capture” and&lt;br&gt;            “res.hdr.capture” (sample fetches).&lt;/p&gt;
&lt;p&gt;capture-res(&lt;id&gt;)&lt;br&gt;  capture the string entry in the response slot &lt;id&gt; and returns the entry as&lt;br&gt;  is. if the slot doesn’t exist, the capture fails silently.&lt;/id&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;  see also: “declare capture”, “http-request capture”,&lt;br&gt;            “http-response capture”, “req.hdr.capture” and&lt;br&gt;            “res.hdr.capture” (sample fetches).&lt;/p&gt;
&lt;p&gt;sdbm([&lt;avalanche&gt;])&lt;br&gt;  hashes a binary input sample into an unsigned 32-bit quantity using the sdbm&lt;br&gt;  hash function. optionally, it is possible to apply a full avalanche hash&lt;br&gt;  function to the output if the optional &lt;avalanche&gt; argument equals 1. this&lt;br&gt;  converter uses the same functions as used by the various hash-based load&lt;br&gt;  balancing algorithms, so it will provide exactly the same results. it is&lt;br&gt;  mostly intended for debugging, but can be used as a stick-table entry to&lt;br&gt;  collect rough statistics. it must not be used for security purposes as a&lt;br&gt;  32-bit hash is trivial to break. see also “crc32”, “djb2”, “wt6” and the&lt;br&gt;  “hash-type” directive.&lt;/avalanche&gt;&lt;/avalanche&gt;&lt;/p&gt;
&lt;p&gt;set-var(&lt;var name=&quot;&quot;&gt;)&lt;br&gt;  sets a variable with the input content and return the content on the output as&lt;br&gt;  is. the variable keep the value and the associated input type. the name of the&lt;br&gt;  variable starts by an indication about it scope. the scope allowed are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/var&gt;&lt;/p&gt;
&lt;p&gt;sub(&lt;value&gt;)&lt;br&gt;  subtracts &lt;value&gt; from the input value of type signed integer, and returns&lt;br&gt;  the result as an signed integer. note: in order to subtract the input from&lt;br&gt;  a constant, simply perform a “neg,add(value)”. &lt;value&gt; can be a numeric value&lt;br&gt;  or a variable name. the name of the variable starts by an indication about its&lt;br&gt;  scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;table_bytes_in_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the average client-to-server&lt;br&gt;  bytes rate associated with the input sample in the designated table, measured&lt;br&gt;  in amount of bytes over the period configured in the table. see also the&lt;br&gt;  sc_bytes_in_rate sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_bytes_out_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the average server-to-client&lt;br&gt;  bytes rate associated with the input sample in the designated table, measured&lt;br&gt;  in amount of bytes over the period configured in the table. see also the&lt;br&gt;  sc_bytes_out_rate sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_conn_cnt(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of incoming&lt;br&gt;  connections associated with the input sample in the designated table. see&lt;br&gt;  also the sc_conn_cnt sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_conn_cur(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the current amount of concurrent&lt;br&gt;  tracked connections associated with the input sample in the designated table.&lt;br&gt;  see also the sc_conn_cur sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_conn_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the average incoming connection&lt;br&gt;  rate associated with the input sample in the designated table. see also the&lt;br&gt;  sc_conn_rate sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_gpc0(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the current value of the first&lt;br&gt;  general purpose counter associated with the input sample in the designated&lt;br&gt;  table. see also the sc_get_gpc0 sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_gpc0_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the frequency which the gpc0&lt;br&gt;  counter was incremented over the configured period in the table, associated&lt;br&gt;  with the input sample in the designated table. see also the sc_get_gpc0_rate&lt;br&gt;  sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_http_err_cnt(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of http&lt;br&gt;  errors associated with the input sample in the designated table. see also the&lt;br&gt;  sc_http_err_cnt sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_http_err_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the average rate of http errors associated with the&lt;br&gt;  input sample in the designated table, measured in amount of errors over the&lt;br&gt;  period configured in the table. see also the sc_http_err_rate sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_http_req_cnt(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of http&lt;br&gt;  requests associated with the input sample in the designated table. see also&lt;br&gt;  the sc_http_req_cnt sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_http_req_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the average rate of http requests associated with the&lt;br&gt;  input sample in the designated table, measured in amount of requests over the&lt;br&gt;  period configured in the table. see also the sc_http_req_rate sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_kbytes_in(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of client-&lt;br&gt;  to-server data associated with the input sample in the designated table,&lt;br&gt;  measured in kilobytes. the test is currently performed on 32-bit integers,&lt;br&gt;  which limits values to 4 terabytes. see also the sc_kbytes_in sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_kbytes_out(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of server-&lt;br&gt;  to-client data associated with the input sample in the designated table,&lt;br&gt;  measured in kilobytes. the test is currently performed on 32-bit integers,&lt;br&gt;  which limits values to 4 terabytes. see also the sc_kbytes_out sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_server_id(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the server id associated with&lt;br&gt;  the input sample in the designated table. a server id is associated to a&lt;br&gt;  sample by a “stick” rule when a connection to a server succeeds. a server id&lt;br&gt;  zero means that no server is associated with this key.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_sess_cnt(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the cumulated amount of incoming&lt;br&gt;  sessions associated with the input sample in the designated table. note that&lt;br&gt;  a session here refers to an incoming connection being accepted by the&lt;br&gt;  “tcp-request connection” rulesets. see also the sc_sess_cnt sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_sess_rate(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the average incoming session&lt;br&gt;  rate associated with the input sample in the designated table. note that a&lt;br&gt;  session here refers to an incoming connection being accepted by the&lt;br&gt;  “tcp-request connection” rulesets. see also the sc_sess_rate sample fetch&lt;br&gt;  keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_trackers(&lt;table&gt;)&lt;br&gt;  uses the string representation of the input sample to perform a look up in&lt;br&gt;  the specified table. if the key is not found in the table, integer value zero&lt;br&gt;  is returned. otherwise the converter returns the current amount of concurrent&lt;br&gt;  connections tracking the same key as the input sample in the designated&lt;br&gt;  table. it differs from table_conn_cur in that it does not rely on any stored&lt;br&gt;  information but on the table’s reference count (the “use” value which is&lt;br&gt;  returned by “show table” on the cli). this may sometimes be more suited for&lt;br&gt;  layer7 tracking. it can be used to tell a server how many concurrent&lt;br&gt;  connections there are from a given address for example. see also the&lt;br&gt;  sc_trackers sample fetch keyword.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;upper&lt;br&gt;  convert a string sample to upper case. this can only be placed after a string&lt;br&gt;  sample fetch function or after a transformation keyword returning a string&lt;br&gt;  type. the result is of type string.&lt;/p&gt;
&lt;p&gt;url_dec&lt;br&gt;  takes an url-encoded string provided as input and returns the decoded&lt;br&gt;  version as output. the input and the output are of type string.&lt;/p&gt;
&lt;p&gt;utime(&lt;format&gt;[,&lt;offset&gt;])&lt;br&gt;  converts an integer supposed to contain a date since epoch to a string&lt;br&gt;  representing this date in utc time using a format defined by the &lt;format&gt;&lt;br&gt;  string using strftime(3). the purpose is to allow any date format to be used&lt;br&gt;  in logs. an optional &lt;offset&gt; in seconds may be applied to the input date&lt;br&gt;  (positive or negative). see the strftime() man page for the format supported&lt;br&gt;  by your operating system. see also the ltime converter.&lt;/offset&gt;&lt;/format&gt;&lt;/offset&gt;&lt;/format&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# emit two colons, one with the utc time and another with ip:port
# eg:  20140710162350 127.0.0.1:57325
log-format %[date,utime(%y%m%d%h%m%s)]\ %ci:%cp
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;word(&lt;index&gt;,&lt;delimiters&gt;)&lt;br&gt;  extracts the nth word considering given delimiters from an input string.&lt;br&gt;  indexes start at 1 and delimiters are a string formatted list of chars.&lt;/delimiters&gt;&lt;/index&gt;&lt;/p&gt;
&lt;p&gt;wt6([&lt;avalanche&gt;])&lt;br&gt;  hashes a binary input sample into an unsigned 32-bit quantity using the wt6&lt;br&gt;  hash function. optionally, it is possible to apply a full avalanche hash&lt;br&gt;  function to the output if the optional &lt;avalanche&gt; argument equals 1. this&lt;br&gt;  converter uses the same functions as used by the various hash-based load&lt;br&gt;  balancing algorithms, so it will provide exactly the same results. it is&lt;br&gt;  mostly intended for debugging, but can be used as a stick-table entry to&lt;br&gt;  collect rough statistics. it must not be used for security purposes as a&lt;br&gt;  32-bit hash is trivial to break. see also “crc32”, “djb2”, “sdbm”, and the&lt;br&gt;  “hash-type” directive.&lt;/avalanche&gt;&lt;/avalanche&gt;&lt;/p&gt;
&lt;p&gt;xor(&lt;value&gt;)&lt;br&gt;  performs a bitwise “xor” (exclusive or) between &lt;value&gt; and the input value&lt;br&gt;  of type signed integer, and returns the result as an signed integer.&lt;br&gt;  &lt;value&gt; can be a numeric value or a variable name. the name of the variable&lt;br&gt;  starts by an indication about its scope. the allowed scopes are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/value&gt;&lt;/value&gt;&lt;/value&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-3-2-fetching-samples-from-internal-states&quot;&gt;&lt;a href=&quot;#7-3-2-fetching-samples-from-internal-states&quot; class=&quot;headerlink&quot; title=&quot;7.3.2. fetching samples from internal states&quot;&gt;&lt;/a&gt;7.3.2. fetching samples from internal states&lt;/h2&gt;&lt;p&gt;a first set of sample fetch methods applies to internal information which does&lt;br&gt;not even relate to any client information. these ones are sometimes used with&lt;br&gt;“monitor-fail” directives to report an internal status to external watchers.&lt;br&gt;the sample fetch methods described in this section are usable anywhere.&lt;/p&gt;
&lt;p&gt;always_false : boolean&lt;br&gt;  always returns the boolean “false” value. it may be used with acls as a&lt;br&gt;  temporary replacement for another one when adjusting configurations.&lt;/p&gt;
&lt;p&gt;always_true : boolean&lt;br&gt;  always returns the boolean “true” value. it may be used with acls as a&lt;br&gt;  temporary replacement for another one when adjusting configurations.&lt;/p&gt;
&lt;p&gt;avg_queue([&lt;backend&gt;]) : integer&lt;br&gt;  returns the total number of queued connections of the designated backend&lt;br&gt;  divided by the number of active servers. the current backend is used if no&lt;br&gt;  backend is specified. this is very similar to “queue” except that the size of&lt;br&gt;  the farm is considered, in order to give a more accurate measurement of the&lt;br&gt;  time it may take for a new connection to be processed. the main usage is with&lt;br&gt;  acl to return a sorry page to new users when it becomes certain they will get&lt;br&gt;  a degraded service, or to pass to the backend servers in a header so that&lt;br&gt;  they decide to work in degraded mode or to disable some functions to speed up&lt;br&gt;  the processing a bit. note that in the event there would not be any active&lt;br&gt;  server anymore, twice the number of queued connections would be considered as&lt;br&gt;  the measured value. this is a fair estimate, as we expect one server to get&lt;br&gt;  back soon anyway, but we still prefer to send new traffic to another backend&lt;br&gt;  if in better shape. see also the “queue”, “be_conn”, and “be_sess_rate”&lt;br&gt;  sample fetches.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;be_conn([&lt;backend&gt;]) : integer&lt;br&gt;  applies to the number of currently established connections on the backend,&lt;br&gt;  possibly including the connection being evaluated. if no backend name is&lt;br&gt;  specified, the current one is used. but it is also possible to check another&lt;br&gt;  backend. it can be used to use a specific farm when the nominal one is full.&lt;br&gt;  see also the “fe_conn”, “queue” and “be_sess_rate” criteria.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;be_sess_rate([&lt;backend&gt;]) : integer&lt;br&gt;  returns an integer value corresponding to the sessions creation rate on the&lt;br&gt;  backend, in number of new sessions per second. this is used with acls to&lt;br&gt;  switch to an alternate backend when an expensive or fragile one reaches too&lt;br&gt;  high a session rate, or to limit abuse of service (eg. prevent sucking of an&lt;br&gt;  online dictionary). it can also be useful to add this element to logs using a&lt;br&gt;  log-format directive.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# redirect to an error page if the dictionary is requested too often
backend dynamic
    mode http
    acl being_scanned be_sess_rate gt 100
    redirect location /denied.html if being_scanned
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bin(&lt;hexa&gt;) : bin&lt;br&gt;  returns a binary chain. the input is the hexadecimal representation&lt;br&gt;  of the string.&lt;/hexa&gt;&lt;/p&gt;
&lt;p&gt;bool(&lt;bool&gt;) : bool&lt;br&gt;  returns a boolean value. &lt;bool&gt; can be ‘true’, ‘false’, ‘1’ or ‘0’.&lt;br&gt;  ‘false’ and ‘0’ are the same. ‘true’ and ‘1’ are the same.&lt;/bool&gt;&lt;/bool&gt;&lt;/p&gt;
&lt;p&gt;connslots([&lt;backend&gt;]) : integer&lt;br&gt;  returns an integer value corresponding to the number of connection slots&lt;br&gt;  still available in the backend, by totaling the maximum amount of&lt;br&gt;  connections on all servers and the maximum queue size. this is probably only&lt;br&gt;  used with acls.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  the basic idea here is to be able to measure the number of connection “slots”&lt;br&gt;  still available (connection + queue), so that anything beyond that (intended&lt;br&gt;  usage; see “use_backend” keyword) can be redirected to a different backend.&lt;/p&gt;
&lt;p&gt;  ‘connslots’ = number of available server connection slots, + number of&lt;br&gt;  available server queue slots.&lt;/p&gt;
&lt;p&gt;  note that while “fe_conn” may be used, “connslots” comes in especially&lt;br&gt;  useful when you have a case of traffic going to one single ip, splitting into&lt;br&gt;  multiple backends (perhaps using acls to do name-based load balancing) and&lt;br&gt;  you want to be able to differentiate between different backends, and their&lt;br&gt;  available “connslots”.  also, whereas “nbsrv” only measures servers that are&lt;br&gt;  actually &lt;em&gt;down&lt;/em&gt;, this fetch is more fine-grained and looks into the number of&lt;br&gt;  available connection slots as well. see also “queue” and “avg_queue”.&lt;/p&gt;
&lt;p&gt;  other caveats and notes: at this point in time, the code does not take care&lt;br&gt;  of dynamic connections. also, if any of the server maxconn, or maxqueue is 0,&lt;br&gt;  then this fetch clearly does not make sense, in which case the value returned&lt;br&gt;  will be -1.&lt;/p&gt;
&lt;p&gt;date([&lt;offset&gt;]) : integer&lt;br&gt;  returns the current date as the epoch (number of seconds since 01/01/1970).&lt;br&gt;  if an offset value is specified, then it is a number of seconds that is added&lt;br&gt;  to the current date before returning the value. this is particularly useful&lt;br&gt;  to compute relative dates, as both positive and negative offsets are allowed.&lt;br&gt;  it is useful combined with the http_date converter.&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# set an expires header to now+1 hour in every response
http-response set-header expires %[date(3600),http_date]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;env(&lt;name&gt;) : string&lt;br&gt;  returns a string containing the value of environment variable &lt;name&gt;. as a&lt;br&gt;  reminder, environment variables are per-process and are sampled when the&lt;br&gt;  process starts. this can be useful to pass some information to a next hop&lt;br&gt;  server, or with acls to take specific action when the process is started a&lt;br&gt;  certain way.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pass the via header to next hop with the local hostname in it
http-request add-header via 1.1\ %[env(hostname)]

# reject cookie-less requests when the stop environment variable is set
http-request deny if !{ cook(sessionid) -m found } { env(stop) -m found }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;fe_conn([&lt;frontend&gt;]) : integer&lt;br&gt;  returns the number of currently established connections on the frontend,&lt;br&gt;  possibly including the connection being evaluated. if no frontend name is&lt;br&gt;  specified, the current one is used. but it is also possible to check another&lt;br&gt;  frontend. it can be used to return a sorry page before hard-blocking, or to&lt;br&gt;  use a specific backend to drain new requests when the farm is considered&lt;br&gt;  full.  this is mostly used with acls but can also be used to pass some&lt;br&gt;  statistics to servers in http headers. see also the “dst_conn”, “be_conn”,&lt;br&gt;  “fe_sess_rate” fetches.&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;fe_sess_rate([&lt;frontend&gt;]) : integer&lt;br&gt;  returns an integer value corresponding to the sessions creation rate on the&lt;br&gt;  frontend, in number of new sessions per second. this is used with acls to&lt;br&gt;  limit the incoming session rate to an acceptable range in order to prevent&lt;br&gt;  abuse of service at the earliest moment, for example when combined with other&lt;br&gt;  layer 4 acls in order to force the clients to wait a bit for the rate to go&lt;br&gt;  down below the limit. it can also be useful to add this element to logs using&lt;br&gt;  a log-format directive. see also the “rate-limit sessions” directive for use&lt;br&gt;  in frontends.&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this frontend limits incoming mails to 10/s with a max of 100
# concurrent connections. we accept any connection below 10/s, and
# force excess clients to wait for 100 ms. since clients are limited to
# 100 max, there cannot be more than 10 incoming mails per second.
frontend mail
    bind :25
    mode tcp
    maxconn 100
    acl too_fast fe_sess_rate ge 10
    tcp-request inspect-delay 100ms
    tcp-request content accept if ! too_fast
    tcp-request content accept if wait_end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;int(&lt;integer&gt;) : signed integer&lt;br&gt;  returns a signed integer.&lt;/integer&gt;&lt;/p&gt;
&lt;p&gt;ipv4(&lt;ipv4&gt;) : ipv4&lt;br&gt;  returns an ipv4.&lt;/ipv4&gt;&lt;/p&gt;
&lt;p&gt;ipv6(&lt;ipv6&gt;) : ipv6&lt;br&gt;  returns an ipv6.&lt;/ipv6&gt;&lt;/p&gt;
&lt;p&gt;meth(&lt;method&gt;) : method&lt;br&gt;  returns a method.&lt;/method&gt;&lt;/p&gt;
&lt;p&gt;nbproc : integer&lt;br&gt;  returns an integer value corresponding to the number of processes that were&lt;br&gt;  started (it equals the global “nbproc” setting). this is useful for logging&lt;br&gt;  and debugging purposes.&lt;/p&gt;
&lt;p&gt;nbsrv([&lt;backend&gt;]) : integer&lt;br&gt;  returns an integer value corresponding to the number of usable servers of&lt;br&gt;  either the current backend or the named backend. this is mostly used with&lt;br&gt;  acls but can also be useful when added to logs. this is normally used to&lt;br&gt;  switch to an alternate backend when the number of servers is too low to&lt;br&gt;  to handle some load. it is useful to report a failure when combined with&lt;br&gt;  “monitor fail”.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;proc : integer&lt;br&gt;  returns an integer value corresponding to the position of the process calling&lt;br&gt;  the function, between 1 and global.nbproc. this is useful for logging and&lt;br&gt;  debugging purposes.&lt;/p&gt;
&lt;p&gt;queue([&lt;backend&gt;]) : integer&lt;br&gt;  returns the total number of queued connections of the designated backend,&lt;br&gt;  including all the connections in server queues. if no backend name is&lt;br&gt;  specified, the current one is used, but it is also possible to check another&lt;br&gt;  one. this is useful with acls or to pass statistics to backend servers. this&lt;br&gt;  can be used to take actions when queuing goes above a known level, generally&lt;br&gt;  indicating a surge of traffic or a massive slowdown on the servers. one&lt;br&gt;  possible action could be to reject new users but still accept old ones. see&lt;br&gt;  also the “avg_queue”, “be_conn”, and “be_sess_rate” fetches.&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;rand([&lt;range&gt;]) : integer&lt;br&gt;  returns a random integer value within a range of &lt;range&gt; possible values,&lt;br&gt;  starting at zero. if the range is not specified, it defaults to 2^32, which&lt;br&gt;  gives numbers between 0 and 4294967295. it can be useful to pass some values&lt;br&gt;  needed to take some routing decisions for example, or just for debugging&lt;br&gt;  purposes. this random must not be used for security purposes.&lt;/range&gt;&lt;/range&gt;&lt;/p&gt;
&lt;p&gt;srv_conn([&lt;backend&gt;/]&lt;server&gt;) : integer&lt;br&gt;  returns an integer value corresponding to the number of currently established&lt;br&gt;  connections on the designated server, possibly including the connection being&lt;br&gt;  evaluated. if &lt;backend&gt; is omitted, then the server is looked up in the&lt;br&gt;  current backend. it can be used to use a specific farm when one server is&lt;br&gt;  full, or to inform the server about our view of the number of active&lt;br&gt;  connections with it. see also the “fe_conn”, “be_conn” and “queue” fetch&lt;br&gt;  methods.&lt;/backend&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;srv_is_up([&lt;backend&gt;/]&lt;server&gt;) : boolean&lt;br&gt;  returns true when the designated server is up, and false when it is either&lt;br&gt;  down or in maintenance mode. if &lt;backend&gt; is omitted, then the server is&lt;br&gt;  looked up in the current backend. it is mainly used to take action based on&lt;br&gt;  an external status reported via a health check (eg: a geographical site’s&lt;br&gt;  availability). another possible use which is more of a hack consists in&lt;br&gt;  using dummy servers as boolean variables that can be enabled or disabled from&lt;br&gt;  the cli, so that rules depending on those acls can be tweaked in realtime.&lt;/backend&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;srv_sess_rate([&lt;backend&gt;/]&lt;server&gt;) : integer&lt;br&gt;  returns an integer corresponding to the sessions creation rate on the&lt;br&gt;  designated server, in number of new sessions per second. if &lt;backend&gt; is&lt;br&gt;  omitted, then the server is looked up in the current backend. this is mostly&lt;br&gt;  used with acls but can make sense with logs too. this is used to switch to an&lt;br&gt;  alternate backend when an expensive or fragile one reaches too high a session&lt;br&gt;  rate, or to limit abuse of service (eg. prevent latent requests from&lt;br&gt;  overloading servers).&lt;/backend&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# redirect to a separate back
acl srv1_full srv_sess_rate(be1/srv1) gt 50
acl srv2_full srv_sess_rate(be1/srv2) gt 50
use_backend be2 if srv1_full or srv2_full
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;stopping : boolean&lt;br&gt;  returns true if the process calling the function is currently stopping. this&lt;br&gt;  can be useful for logging, or for relaxing certain checks or helping close&lt;br&gt;  certain connections upon graceful shutdown.&lt;/p&gt;
&lt;p&gt;str(&lt;string&gt;) : string&lt;br&gt;  returns a string.&lt;/string&gt;&lt;/p&gt;
&lt;p&gt;table_avl([&lt;table&gt;]) : integer&lt;br&gt;  returns the total number of available entries in the current proxy’s&lt;br&gt;  stick-table or in the designated stick-table. see also table_cnt.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;table_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the total number of entries currently in use in the current proxy’s&lt;br&gt;  stick-table or in the designated stick-table. see also src_conn_cnt and&lt;br&gt;  table_avl for other entry counting methods.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;var(&lt;var-name&gt;) : undefined&lt;br&gt;  returns a variable with the stored type. if the variable is not set, the&lt;br&gt;  sample fetch fails. the name of the variable starts by an indication about its&lt;br&gt;  scope. the scope allowed are:&lt;br&gt;    “sess” : the variable is shared with all the session,&lt;br&gt;    “txn”  : the variable is shared with all the transaction (request and&lt;br&gt;             response),&lt;br&gt;    “req”  : the variable is shared only during the request processing,&lt;br&gt;    “res”  : the variable is shared only during the response processing.&lt;br&gt;  this prefix is followed by a name. the separator is a ‘.’. the name may only&lt;br&gt;  contain characters ‘a-z’, ‘a-z’, ‘0-9’ and ‘_’.&lt;/var-name&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-3-3-fetching-samples-at-layer-4&quot;&gt;&lt;a href=&quot;#7-3-3-fetching-samples-at-layer-4&quot; class=&quot;headerlink&quot; title=&quot;7.3.3. fetching samples at layer 4&quot;&gt;&lt;/a&gt;7.3.3. fetching samples at layer 4&lt;/h2&gt;&lt;p&gt;the layer 4 usually describes just the transport layer which in haproxy is&lt;br&gt;closest to the connection, where no content is yet made available. the fetch&lt;br&gt;methods described here are usable as low as the “tcp-request connection” rule&lt;br&gt;sets unless they require some future information. those generally include&lt;br&gt;tcp/ip addresses and ports, as well as elements from stick-tables related to&lt;br&gt;the incoming connection. for retrieving a value from a sticky counters, the&lt;br&gt;counter number can be explicitly set as 0, 1, or 2 using the pre-defined&lt;br&gt;“sc0&lt;em&gt;“, “sc1&lt;/em&gt;“, or “sc2&lt;em&gt;“ prefix, or it can be specified as the first integer&lt;br&gt;argument when using the “sc&lt;/em&gt;“ prefix. an optional table may be specified with&lt;br&gt;the “sc*” form, in which case the currently tracked key will be looked up into&lt;br&gt;this alternate table instead of the table currently being tracked.&lt;/p&gt;
&lt;p&gt;be_id : integer&lt;br&gt;  returns an integer containing the current backend’s id. it can be used in&lt;br&gt;  frontends with responses to check which backend processed the request.&lt;/p&gt;
&lt;p&gt;dst : ip&lt;br&gt;  this is the destination ipv4 address of the connection on the client side,&lt;br&gt;  which is the address the client connected to. it can be useful when running&lt;br&gt;  in transparent mode. it is of type ip and works on both ipv4 and ipv6 tables.&lt;br&gt;  on ipv6 tables, ipv4 address is mapped to its ipv6 equivalent, according to&lt;br&gt;  rfc 4291.&lt;/p&gt;
&lt;p&gt;dst_conn : integer&lt;br&gt;  returns an integer value corresponding to the number of currently established&lt;br&gt;  connections on the same socket including the one being evaluated. it is&lt;br&gt;  normally used with acls but can as well be used to pass the information to&lt;br&gt;  servers in an http header or in logs. it can be used to either return a sorry&lt;br&gt;  page before hard-blocking, or to use a specific backend to drain new requests&lt;br&gt;  when the socket is considered saturated. this offers the ability to assign&lt;br&gt;  different limits to different listening ports or addresses. see also the&lt;br&gt;  “fe_conn” and “be_conn” fetches.&lt;/p&gt;
&lt;p&gt;dst_port : integer&lt;br&gt;  returns an integer value corresponding to the destination tcp port of the&lt;br&gt;  connection on the client side, which is the port the client connected to.&lt;br&gt;  this might be used when running in transparent mode, when assigning dynamic&lt;br&gt;  ports to some clients for a whole application session, to stick all users to&lt;br&gt;  a same server, or to pass the destination port information to a server using&lt;br&gt;  an http header.&lt;/p&gt;
&lt;p&gt;fe_id : integer&lt;br&gt;  returns an integer containing the current frontend’s id. it can be used in&lt;br&gt;  backends to check from which backend it was called, or to stick all users&lt;br&gt;  coming via a same frontend to the same server.&lt;/p&gt;
&lt;p&gt;sc_bytes_in_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_bytes_in_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_bytes_in_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_bytes_in_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average client-to-server bytes rate from the currently tracked&lt;br&gt;  counters, measured in amount of bytes over the period configured in the&lt;br&gt;  table. see also src_bytes_in_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_bytes_out_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_bytes_out_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_bytes_out_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_bytes_out_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average server-to-client bytes rate from the currently tracked&lt;br&gt;  counters, measured in amount of bytes over the period configured in the&lt;br&gt;  table. see also src_bytes_out_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_clr_gpc0(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_clr_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc1_clr_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc2_clr_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  clears the first general purpose counter associated to the currently tracked&lt;br&gt;  counters, and returns its previous value. before the first invocation, the&lt;br&gt;  stored value is zero, so first invocation will always return zero. this is&lt;br&gt;  typically used as a second acl in an expression in order to mark a connection&lt;br&gt;  when a first acl was verified :&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# block if 5 consecutive requests continue to come faster than 10 sess
# per second, and reset the counter as soon as the traffic slows down.
acl abuse sc0_http_req_rate gt 10
acl kill  sc0_inc_gpc0 gt 5
acl save  sc0_clr_gpc0 ge 0
tcp-request connection accept if !abuse save
tcp-request connection reject if abuse kill
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sc_conn_cnt(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_conn_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc1_conn_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc2_conn_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of incoming connections from currently tracked&lt;br&gt;  counters. see also src_conn_cnt.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_conn_cur(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_conn_cur([&lt;table&gt;]) : integer&lt;br&gt;sc1_conn_cur([&lt;table&gt;]) : integer&lt;br&gt;sc2_conn_cur([&lt;table&gt;]) : integer&lt;br&gt;  returns the current amount of concurrent connections tracking the same&lt;br&gt;  tracked counters. this number is automatically incremented when tracking&lt;br&gt;  begins and decremented when tracking stops. see also src_conn_cur.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_conn_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_conn_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_conn_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_conn_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average connection rate from the currently tracked counters,&lt;br&gt;  measured in amount of connections over the period configured in the table.&lt;br&gt;  see also src_conn_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_get_gpc0(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_get_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc1_get_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc2_get_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  returns the value of the first general purpose counter associated to the&lt;br&gt;  currently tracked counters. see also src_get_gpc0 and sc/sc0/sc1/sc2_inc_gpc0.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_gpc0_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_gpc0_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_gpc0_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_gpc0_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average increment rate of the first general purpose counter&lt;br&gt;  associated to the currently tracked counters. it reports the frequency&lt;br&gt;  which the gpc0 counter was incremented over the configured period. see also&lt;br&gt;  src_gpc0_rate, sc/sc0/sc1/sc2_get_gpc0, and sc/sc0/sc1/sc2_inc_gpc0. note&lt;br&gt;  that the “gpc0_rate” counter must be stored in the stick-table for a value to&lt;br&gt;  be returned, as “gpc0” only holds the event count.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_http_err_cnt(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_http_err_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc1_http_err_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc2_http_err_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of http errors from the currently tracked&lt;br&gt;  counters. this includes the both request errors and 4xx error responses.&lt;br&gt;  see also src_http_err_cnt.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_http_err_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_http_err_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_http_err_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_http_err_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average rate of http errors from the currently tracked counters,&lt;br&gt;  measured in amount of errors over the period configured in the table. this&lt;br&gt;  includes the both request errors and 4xx error responses. see also&lt;br&gt;  src_http_err_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_http_req_cnt(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_http_req_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc1_http_req_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc2_http_req_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of http requests from the currently tracked&lt;br&gt;  counters. this includes every started request, valid or not. see also&lt;br&gt;  src_http_req_cnt.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_http_req_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_http_req_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_http_req_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_http_req_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average rate of http requests from the currently tracked&lt;br&gt;  counters, measured in amount of requests over the period configured in&lt;br&gt;  the table. this includes every started request, valid or not. see also&lt;br&gt;  src_http_req_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_inc_gpc0(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_inc_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc1_inc_gpc0([&lt;table&gt;]) : integer&lt;br&gt;sc2_inc_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  increments the first general purpose counter associated to the currently&lt;br&gt;  tracked counters, and returns its new value. before the first invocation,&lt;br&gt;  the stored value is zero, so first invocation will increase it to 1 and will&lt;br&gt;  return 1. this is typically used as a second acl in an expression in order&lt;br&gt;  to mark a connection when a first acl was verified :&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl abuse sc0_http_req_rate gt 10
acl kill  sc0_inc_gpc0 gt 0
tcp-request connection reject if abuse kill
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;sc_kbytes_in(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_kbytes_in([&lt;table&gt;]) : integer&lt;br&gt;sc1_kbytes_in([&lt;table&gt;]) : integer&lt;br&gt;sc2_kbytes_in([&lt;table&gt;]) : integer&lt;br&gt;  returns the total amount of client-to-server data from the currently tracked&lt;br&gt;  counters, measured in kilobytes. the test is currently performed on 32-bit&lt;br&gt;  integers, which limits values to 4 terabytes. see also src_kbytes_in.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_kbytes_out(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_kbytes_out([&lt;table&gt;]) : integer&lt;br&gt;sc1_kbytes_out([&lt;table&gt;]) : integer&lt;br&gt;sc2_kbytes_out([&lt;table&gt;]) : integer&lt;br&gt;  returns the total amount of server-to-client data from the currently tracked&lt;br&gt;  counters, measured in kilobytes. the test is currently performed on 32-bit&lt;br&gt;  integers, which limits values to 4 terabytes. see also src_kbytes_out.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_sess_cnt(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_sess_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc1_sess_cnt([&lt;table&gt;]) : integer&lt;br&gt;sc2_sess_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of incoming connections that were transformed&lt;br&gt;  into sessions, which means that they were accepted by a “tcp-request&lt;br&gt;  connection” rule, from the currently tracked counters. a backend may count&lt;br&gt;  more sessions than connections because each connection could result in many&lt;br&gt;  backend sessions if some http keep-alive is performed over the connection&lt;br&gt;  with the client. see also src_sess_cnt.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_sess_rate(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_sess_rate([&lt;table&gt;]) : integer&lt;br&gt;sc1_sess_rate([&lt;table&gt;]) : integer&lt;br&gt;sc2_sess_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average session rate from the currently tracked counters,&lt;br&gt;  measured in amount of sessions over the period configured in the table. a&lt;br&gt;  session is a connection that got past the early “tcp-request connection”&lt;br&gt;  rules. a backend may count more sessions than connections because each&lt;br&gt;  connection could result in many backend sessions if some http keep-alive is&lt;br&gt;  performed over the connection with the client. see also src_sess_rate.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_tracked(&lt;ctr&gt;[,&lt;table&gt;]) : boolean&lt;br&gt;sc0_tracked([&lt;table&gt;]) : boolean&lt;br&gt;sc1_tracked([&lt;table&gt;]) : boolean&lt;br&gt;sc2_tracked([&lt;table&gt;]) : boolean&lt;br&gt;  returns true if the designated session counter is currently being tracked by&lt;br&gt;  the current session. this can be useful when deciding whether or not we want&lt;br&gt;  to set some values in a header passed to the server.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;sc_trackers(&lt;ctr&gt;[,&lt;table&gt;]) : integer&lt;br&gt;sc0_trackers([&lt;table&gt;]) : integer&lt;br&gt;sc1_trackers([&lt;table&gt;]) : integer&lt;br&gt;sc2_trackers([&lt;table&gt;]) : integer&lt;br&gt;  returns the current amount of concurrent connections tracking the same&lt;br&gt;  tracked counters. this number is automatically incremented when tracking&lt;br&gt;  begins and decremented when tracking stops. it differs from sc0_conn_cur in&lt;br&gt;  that it does not rely on any stored information but on the table’s reference&lt;br&gt;  count (the “use” value which is returned by “show table” on the cli). this&lt;br&gt;  may sometimes be more suited for layer7 tracking. it can be used to tell a&lt;br&gt;  server how many concurrent connections there are from a given address for&lt;br&gt;  example.&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/table&gt;&lt;/ctr&gt;&lt;/p&gt;
&lt;p&gt;so_id : integer&lt;br&gt;  returns an integer containing the current listening socket’s id. it is useful&lt;br&gt;  in frontends involving many “bind” lines, or to stick all users coming via a&lt;br&gt;  same socket to the same server.&lt;/p&gt;
&lt;p&gt;src : ip&lt;br&gt;  this is the source ipv4 address of the client of the session.  it is of type&lt;br&gt;  ip and works on both ipv4 and ipv6 tables. on ipv6 tables, ipv4 addresses are&lt;br&gt;  mapped to their ipv6 equivalent, according to rfc 4291. note that it is the&lt;br&gt;  tcp-level source address which is used, and not the address of a client&lt;br&gt;  behind a proxy. however if the “accept-proxy” bind directive is used, it can&lt;br&gt;  be the address of a client behind another proxy-protocol compatible component&lt;br&gt;  for all rule sets except “tcp-request connection” which sees the real address.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# add an http header in requests with the originating address&amp;apos; country
http-request set-header x-country %[src,map_ip(geoip.lst)]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;src_bytes_in_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average bytes rate from the incoming connection’s source address&lt;br&gt;  in the current proxy’s stick-table or in the designated stick-table, measured&lt;br&gt;  in amount of bytes over the period configured in the table. if the address is&lt;br&gt;  not found, zero is returned. see also sc/sc0/sc1/sc2_bytes_in_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_bytes_out_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average bytes rate to the incoming connection’s source address in&lt;br&gt;  the current proxy’s stick-table or in the designated stick-table, measured in&lt;br&gt;  amount of bytes over the period configured in the table. if the address is&lt;br&gt;  not found, zero is returned. see also sc/sc0/sc1/sc2_bytes_out_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_clr_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  clears the first general purpose counter associated to the incoming&lt;br&gt;  connection’s source address in the current proxy’s stick-table or in the&lt;br&gt;  designated stick-table, and returns its previous value. if the address is not&lt;br&gt;  found, an entry is created and 0 is returned. this is typically used as a&lt;br&gt;  second acl in an expression in order to mark a connection when a first acl&lt;br&gt;  was verified :&lt;/table&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# block if 5 consecutive requests continue to come faster than 10 sess
# per second, and reset the counter as soon as the traffic slows down.
acl abuse src_http_req_rate gt 10
acl kill  src_inc_gpc0 gt 5
acl save  src_clr_gpc0 ge 0
tcp-request connection accept if !abuse save
tcp-request connection reject if abuse kill
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;src_conn_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of connections initiated from the current&lt;br&gt;  incoming connection’s source address in the current proxy’s stick-table or in&lt;br&gt;  the designated stick-table. if the address is not found, zero is returned.&lt;br&gt;  see also sc/sc0/sc1/sc2_conn_cnt.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_conn_cur([&lt;table&gt;]) : integer&lt;br&gt;  returns the current amount of concurrent connections initiated from the&lt;br&gt;  current incoming connection’s source address in the current proxy’s&lt;br&gt;  stick-table or in the designated stick-table. if the address is not found,&lt;br&gt;  zero is returned. see also sc/sc0/sc1/sc2_conn_cur.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_conn_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average connection rate from the incoming connection’s source&lt;br&gt;  address in the current proxy’s stick-table or in the designated stick-table,&lt;br&gt;  measured in amount of connections over the period configured in the table. if&lt;br&gt;  the address is not found, zero is returned. see also sc/sc0/sc1/sc2_conn_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_get_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  returns the value of the first general purpose counter associated to the&lt;br&gt;  incoming connection’s source address in the current proxy’s stick-table or in&lt;br&gt;  the designated stick-table. if the address is not found, zero is returned.&lt;br&gt;  see also sc/sc0/sc1/sc2_get_gpc0 and src_inc_gpc0.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_gpc0_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average increment rate of the first general purpose counter&lt;br&gt;  associated to the incoming connection’s source address in the current proxy’s&lt;br&gt;  stick-table or in the designated stick-table. it reports the frequency&lt;br&gt;  which the gpc0 counter was incremented over the configured period. see also&lt;br&gt;  sc/sc0/sc1/sc2_gpc0_rate, src_get_gpc0, and sc/sc0/sc1/sc2_inc_gpc0. note&lt;br&gt;  that the “gpc0_rate” counter must be stored in the stick-table for a value to&lt;br&gt;  be returned, as “gpc0” only holds the event count.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_http_err_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of http errors from the incoming connection’s&lt;br&gt;  source address in the current proxy’s stick-table or in the designated&lt;br&gt;  stick-table. this includes the both request errors and 4xx error responses.&lt;br&gt;  see also sc/sc0/sc1/sc2_http_err_cnt. if the address is not found, zero is&lt;br&gt;  returned.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_http_err_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average rate of http errors from the incoming connection’s source&lt;br&gt;  address in the current proxy’s stick-table or in the designated stick-table,&lt;br&gt;  measured in amount of errors over the period configured in the table. this&lt;br&gt;  includes the both request errors and 4xx error responses. if the address is&lt;br&gt;  not found, zero is returned. see also sc/sc0/sc1/sc2_http_err_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_http_req_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of http requests from the incoming connection’s&lt;br&gt;  source address in the current proxy’s stick-table or in the designated stick-&lt;br&gt;  table. this includes every started request, valid or not. if the address is&lt;br&gt;  not found, zero is returned. see also sc/sc0/sc1/sc2_http_req_cnt.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_http_req_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average rate of http requests from the incoming connection’s&lt;br&gt;  source address in the current proxy’s stick-table or in the designated stick-&lt;br&gt;  table, measured in amount of requests over the period configured in the&lt;br&gt;  table. this includes every started request, valid or not. if the address is&lt;br&gt;  not found, zero is returned. see also sc/sc0/sc1/sc2_http_req_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_inc_gpc0([&lt;table&gt;]) : integer&lt;br&gt;  increments the first general purpose counter associated to the incoming&lt;br&gt;  connection’s source address in the current proxy’s stick-table or in the&lt;br&gt;  designated stick-table, and returns its new value. if the address is not&lt;br&gt;  found, an entry is created and 1 is returned. see also sc0/sc2/sc2_inc_gpc0.&lt;br&gt;  this is typically used as a second acl in an expression in order to mark a&lt;br&gt;  connection when a first acl was verified :&lt;/table&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;acl abuse src_http_req_rate gt 10
acl kill  src_inc_gpc0 gt 0
tcp-request connection reject if abuse kill
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;src_kbytes_in([&lt;table&gt;]) : integer&lt;br&gt;  returns the total amount of data received from the incoming connection’s&lt;br&gt;  source address in the current proxy’s stick-table or in the designated&lt;br&gt;  stick-table, measured in kilobytes. if the address is not found, zero is&lt;br&gt;  returned. the test is currently performed on 32-bit integers, which limits&lt;br&gt;  values to 4 terabytes. see also sc/sc0/sc1/sc2_kbytes_in.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_kbytes_out([&lt;table&gt;]) : integer&lt;br&gt;  returns the total amount of data sent to the incoming connection’s source&lt;br&gt;  address in the current proxy’s stick-table or in the designated stick-table,&lt;br&gt;  measured in kilobytes. if the address is not found, zero is returned. the&lt;br&gt;  test is currently performed on 32-bit integers, which limits values to 4&lt;br&gt;  terabytes. see also sc/sc0/sc1/sc2_kbytes_out.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_port : integer&lt;br&gt;  returns an integer value corresponding to the tcp source port of the&lt;br&gt;  connection on the client side, which is the port the client connected from.&lt;br&gt;  usage of this function is very limited as modern protocols do not care much&lt;br&gt;  about source ports nowadays.&lt;/p&gt;
&lt;p&gt;src_sess_cnt([&lt;table&gt;]) : integer&lt;br&gt;  returns the cumulated number of connections initiated from the incoming&lt;br&gt;  connection’s source ipv4 address in the current proxy’s stick-table or in the&lt;br&gt;  designated stick-table, that were transformed into sessions, which means that&lt;br&gt;  they were accepted by “tcp-request” rules. if the address is not found, zero&lt;br&gt;  is returned. see also sc/sc0/sc1/sc2_sess_cnt.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_sess_rate([&lt;table&gt;]) : integer&lt;br&gt;  returns the average session rate from the incoming connection’s source&lt;br&gt;  address in the current proxy’s stick-table or in the designated stick-table,&lt;br&gt;  measured in amount of sessions over the period configured in the table. a&lt;br&gt;  session is a connection that went past the early “tcp-request” rules. if the&lt;br&gt;  address is not found, zero is returned. see also sc/sc0/sc1/sc2_sess_rate.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;src_updt_conn_cnt([&lt;table&gt;]) : integer&lt;br&gt;  creates or updates the entry associated to the incoming connection’s source&lt;br&gt;  address in the current proxy’s stick-table or in the designated stick-table.&lt;br&gt;  this table must be configured to store the “conn_cnt” data type, otherwise&lt;br&gt;  the match will be ignored. the current count is incremented by one, and the&lt;br&gt;  expiration timer refreshed. the updated count is returned, so this match&lt;br&gt;  can’t return zero. this was used to reject service abusers based on their&lt;br&gt;  source address. note: it is recommended to use the more complete “track-sc*”&lt;br&gt;  actions in “tcp-request” rules instead.&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this frontend limits incoming ssh connections to 3 per 10 second for
# each source address, and rejects excess connections until a 10 second
# silence is observed. at most 20 addresses are tracked.
listen ssh
    bind :22
    mode tcp
    maxconn 100
    stick-table type ip size 20 expire 10s store conn_cnt
    tcp-request content reject if { src_updt_conn_cnt gt 3 }
    server local 127.0.0.1:22
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;srv_id : integer&lt;br&gt;  returns an integer containing the server’s id when processing the response.&lt;br&gt;  while it’s almost only used with acls, it may be used for logging or&lt;br&gt;  debugging.&lt;/p&gt;
&lt;h2 id=&quot;7-3-4-fetching-samples-at-layer-5&quot;&gt;&lt;a href=&quot;#7-3-4-fetching-samples-at-layer-5&quot; class=&quot;headerlink&quot; title=&quot;7.3.4. fetching samples at layer 5&quot;&gt;&lt;/a&gt;7.3.4. fetching samples at layer 5&lt;/h2&gt;&lt;p&gt;the layer 5 usually describes just the session layer which in haproxy is&lt;br&gt;closest to the session once all the connection handshakes are finished, but&lt;br&gt;when no content is yet made available. the fetch methods described here are&lt;br&gt;usable as low as the “tcp-request content” rule sets unless they require some&lt;br&gt;future information. those generally include the results of ssl negotiations.&lt;/p&gt;
&lt;p&gt;ssl_bc : boolean&lt;br&gt;  returns true when the back connection was made via an ssl/tls transport&lt;br&gt;  layer and is locally deciphered. this means the outgoing connection was made&lt;br&gt;  other a server with the “ssl” option.&lt;/p&gt;
&lt;p&gt;ssl_bc_alg_keysize : integer&lt;br&gt;  returns the symmetric cipher key size supported in bits when the outgoing&lt;br&gt;  connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_bc_cipher : string&lt;br&gt;  returns the name of the used cipher when the outgoing connection was made&lt;br&gt;  over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_bc_protocol : string&lt;br&gt;  returns the name of the used protocol when the outgoing connection was made&lt;br&gt;  over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_bc_unique_id : binary&lt;br&gt;  when the outgoing connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the tls unique id as defined in rfc5929 section 3. the unique id&lt;br&gt;  can be encoded to base64 using the converter: “ssl_bc_unique_id,base64”.&lt;/p&gt;
&lt;p&gt;ssl_bc_session_id : binary&lt;br&gt;  returns the ssl id of the back connection when the outgoing connection was&lt;br&gt;  made over an ssl/tls transport layer. it is useful to log if we want to know&lt;br&gt;  if session was reused or not.&lt;/p&gt;
&lt;p&gt;ssl_bc_use_keysize : integer&lt;br&gt;  returns the symmetric cipher key size used in bits when the outgoing&lt;br&gt;  connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_c_ca_err : integer&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the id of the first error detected during verification of the client&lt;br&gt;  certificate at depth &amp;gt; 0, or 0 if no error was encountered during this&lt;br&gt;  verification process. please refer to your ssl library’s documentation to&lt;br&gt;  find the exhaustive list of error codes.&lt;/p&gt;
&lt;p&gt;ssl_c_ca_err_depth : integer&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the depth in the ca chain of the first error detected during the&lt;br&gt;  verification of the client certificate. if no error is encountered, 0 is&lt;br&gt;  returned.&lt;/p&gt;
&lt;p&gt;ssl_c_der : binary&lt;br&gt;  returns the der formatted certificate presented by the client when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer. when used for&lt;br&gt;  an acl, the value(s) to match against can be passed in hexadecimal form.&lt;/p&gt;
&lt;p&gt;ssl_c_err : integer&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the id of the first error detected during verification at depth 0, or&lt;br&gt;  0 if no error was encountered during this verification process. please refer&lt;br&gt;  to your ssl library’s documentation to find the exhaustive list of error&lt;br&gt;  codes.&lt;/p&gt;
&lt;p&gt;ssl_c_i_dn([&lt;entry&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the full distinguished name of the issuer of the certificate&lt;br&gt;  presented by the client when no &lt;entry&gt; is specified, or the value of the&lt;br&gt;  first given entry found from the beginning of the dn. if a positive/negative&lt;br&gt;  occurrence number is specified as the optional second argument, it returns&lt;br&gt;  the value of the nth given entry value from the beginning/end of the dn.&lt;br&gt;  for instance, “ssl_c_i_dn(ou,2)” the second organization unit, and&lt;br&gt;  “ssl_c_i_dn(cn)” retrieves the common name.&lt;/entry&gt;&lt;/occ&gt;&lt;/entry&gt;&lt;/p&gt;
&lt;p&gt;ssl_c_key_alg : string&lt;br&gt;  returns the name of the algorithm used to generate the key of the certificate&lt;br&gt;  presented by the client when the incoming connection was made over an ssl/tls&lt;br&gt;  transport layer.&lt;/p&gt;
&lt;p&gt;ssl_c_notafter : string&lt;br&gt;  returns the end date presented by the client as a formatted string&lt;br&gt;  yymmddhhmmss[z] when the incoming connection was made over an ssl/tls&lt;br&gt;  transport layer.&lt;/p&gt;
&lt;p&gt;ssl_c_notbefore : string&lt;br&gt;  returns the start date presented by the client as a formatted string&lt;br&gt;  yymmddhhmmss[z] when the incoming connection was made over an ssl/tls&lt;br&gt;  transport layer.&lt;/p&gt;
&lt;p&gt;ssl_c_s_dn([&lt;entry&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the full distinguished name of the subject of the certificate&lt;br&gt;  presented by the client when no &lt;entry&gt; is specified, or the value of the&lt;br&gt;  first given entry found from the beginning of the dn. if a positive/negative&lt;br&gt;  occurrence number is specified as the optional second argument, it returns&lt;br&gt;  the value of the nth given entry value from the beginning/end of the dn.&lt;br&gt;  for instance, “ssl_c_s_dn(ou,2)” the second organization unit, and&lt;br&gt;  “ssl_c_s_dn(cn)” retrieves the common name.&lt;/entry&gt;&lt;/occ&gt;&lt;/entry&gt;&lt;/p&gt;
&lt;p&gt;ssl_c_serial : binary&lt;br&gt;  returns the serial of the certificate presented by the client when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer. when used for&lt;br&gt;  an acl, the value(s) to match against can be passed in hexadecimal form.&lt;/p&gt;
&lt;p&gt;ssl_c_sha1 : binary&lt;br&gt;  returns the sha-1 fingerprint of the certificate presented by the client when&lt;br&gt;  the incoming connection was made over an ssl/tls transport layer. this can be&lt;br&gt;  used to stick a client to a server, or to pass this information to a server.&lt;br&gt;  note that the output is binary, so if you want to pass that signature to the&lt;br&gt;  server, you need to encode it in hex or base64, such as in the example below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http-request set-header x-ssl-client-sha1 %[ssl_c_sha1,hex]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ssl_c_sig_alg : string&lt;br&gt;  returns the name of the algorithm used to sign the certificate presented by&lt;br&gt;  the client when the incoming connection was made over an ssl/tls transport&lt;br&gt;  layer.&lt;/p&gt;
&lt;p&gt;ssl_c_used : boolean&lt;br&gt;  returns true if current ssl session uses a client certificate even if current&lt;br&gt;  connection uses ssl session resumption. see also “ssl_fc_has_crt”.&lt;/p&gt;
&lt;p&gt;ssl_c_verify : integer&lt;br&gt;  returns the verify result error id when the incoming connection was made over&lt;br&gt;  an ssl/tls transport layer, otherwise zero if no error is encountered. please&lt;br&gt;  refer to your ssl library’s documentation for an exhaustive list of error&lt;br&gt;  codes.&lt;/p&gt;
&lt;p&gt;ssl_c_version : integer&lt;br&gt;  returns the version of the certificate presented by the client when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_f_der : binary&lt;br&gt;  returns the der formatted certificate presented by the frontend when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer. when used for&lt;br&gt;  an acl, the value(s) to match against can be passed in hexadecimal form.&lt;/p&gt;
&lt;p&gt;ssl_f_i_dn([&lt;entry&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the full distinguished name of the issuer of the certificate&lt;br&gt;  presented by the frontend when no &lt;entry&gt; is specified, or the value of the&lt;br&gt;  first given entry found from the beginning of the dn. if a positive/negative&lt;br&gt;  occurrence number is specified as the optional second argument, it returns&lt;br&gt;  the value of the nth given entry value from the beginning/end of the dn.&lt;br&gt;  for instance, “ssl_f_i_dn(ou,2)” the second organization unit, and&lt;br&gt;  “ssl_f_i_dn(cn)” retrieves the common name.&lt;/entry&gt;&lt;/occ&gt;&lt;/entry&gt;&lt;/p&gt;
&lt;p&gt;ssl_f_key_alg : string&lt;br&gt;  returns the name of the algorithm used to generate the key of the certificate&lt;br&gt;  presented by the frontend when the incoming connection was made over an&lt;br&gt;  ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_f_notafter : string&lt;br&gt;  returns the end date presented by the frontend as a formatted string&lt;br&gt;  yymmddhhmmss[z] when the incoming connection was made over an ssl/tls&lt;br&gt;  transport layer.&lt;/p&gt;
&lt;p&gt;ssl_f_notbefore : string&lt;br&gt;  returns the start date presented by the frontend as a formatted string&lt;br&gt;  yymmddhhmmss[z] when the incoming connection was made over an ssl/tls&lt;br&gt;  transport layer.&lt;/p&gt;
&lt;p&gt;ssl_f_s_dn([&lt;entry&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the full distinguished name of the subject of the certificate&lt;br&gt;  presented by the frontend when no &lt;entry&gt; is specified, or the value of the&lt;br&gt;  first given entry found from the beginning of the dn. if a positive/negative&lt;br&gt;  occurrence number is specified as the optional second argument, it returns&lt;br&gt;  the value of the nth given entry value from the beginning/end of the dn.&lt;br&gt;  for instance, “ssl_f_s_dn(ou,2)” the second organization unit, and&lt;br&gt;  “ssl_f_s_dn(cn)” retrieves the common name.&lt;/entry&gt;&lt;/occ&gt;&lt;/entry&gt;&lt;/p&gt;
&lt;p&gt;ssl_f_serial : binary&lt;br&gt;  returns the serial of the certificate presented by the frontend when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer. when used for&lt;br&gt;  an acl, the value(s) to match against can be passed in hexadecimal form.&lt;/p&gt;
&lt;p&gt;ssl_f_sha1 : binary&lt;br&gt;  returns the sha-1 fingerprint of the certificate presented by the frontend&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer. this&lt;br&gt;  can be used to know which certificate was chosen using sni.&lt;/p&gt;
&lt;p&gt;ssl_f_sig_alg : string&lt;br&gt;  returns the name of the algorithm used to sign the certificate presented by&lt;br&gt;  the frontend when the incoming connection was made over an ssl/tls transport&lt;br&gt;  layer.&lt;/p&gt;
&lt;p&gt;ssl_f_version : integer&lt;br&gt;  returns the version of the certificate presented by the frontend when the&lt;br&gt;  incoming connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_fc : boolean&lt;br&gt;  returns true when the front connection was made via an ssl/tls transport&lt;br&gt;  layer and is locally deciphered. this means it has matched a socket declared&lt;br&gt;  with a “bind” line having the “ssl” option.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# this passes &amp;quot;x-proto: https&amp;quot; to servers when client connects over ssl
listen http-https
    bind :80
    bind :443 ssl crt /etc/haproxy.pem
    http-request add-header x-proto https if { ssl_fc }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ssl_fc_alg_keysize : integer&lt;br&gt;  returns the symmetric cipher key size supported in bits when the incoming&lt;br&gt;  connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_fc_alpn : string&lt;br&gt;  this extracts the application layer protocol negotiation field from an&lt;br&gt;  incoming connection made via a tls transport layer and locally deciphered by&lt;br&gt;  haproxy. the result is a string containing the protocol name advertised by&lt;br&gt;  the client. the ssl library must have been built with support for tls&lt;br&gt;  extensions enabled (check haproxy -vv). note that the tls alpn extension is&lt;br&gt;  not advertised unless the “alpn” keyword on the “bind” line specifies a&lt;br&gt;  protocol list. also, nothing forces the client to pick a protocol from this&lt;br&gt;  list, any other one may be requested. the tls alpn extension is meant to&lt;br&gt;  replace the tls npn extension. see also “ssl_fc_npn”.&lt;/p&gt;
&lt;p&gt;ssl_fc_cipher : string&lt;br&gt;  returns the name of the used cipher when the incoming connection was made&lt;br&gt;  over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_fc_has_crt : boolean&lt;br&gt;  returns true if a client certificate is present in an incoming connection over&lt;br&gt;  ssl/tls transport layer. useful if ‘verify’ statement is set to ‘optional’.&lt;br&gt;  note: on ssl session resumption with session id or tls ticket, client&lt;br&gt;  certificate is not present in the current connection but may be retrieved&lt;br&gt;  from the cache or the ticket. so prefer “ssl_c_used” if you want to check if&lt;br&gt;  current ssl session uses a client certificate.&lt;/p&gt;
&lt;p&gt;ssl_fc_has_sni : boolean&lt;br&gt;  this checks for the presence of a server name indication tls extension (sni)&lt;br&gt;  in an incoming connection was made over an ssl/tls transport layer. returns&lt;br&gt;  true when the incoming connection presents a tls sni field. this requires&lt;br&gt;  that the ssl library is build with support for tls extensions enabled (check&lt;br&gt;  haproxy -vv).&lt;/p&gt;
&lt;p&gt;ssl_fc_is_resumed: boolean&lt;br&gt;  returns true if the ssl/tls session has been resumed through the use of&lt;br&gt;  ssl session cache or tls tickets.&lt;/p&gt;
&lt;p&gt;ssl_fc_npn : string&lt;br&gt;  this extracts the next protocol negotiation field from an incoming connection&lt;br&gt;  made via a tls transport layer and locally deciphered by haproxy. the result&lt;br&gt;  is a string containing the protocol name advertised by the client. the ssl&lt;br&gt;  library must have been built with support for tls extensions enabled (check&lt;br&gt;  haproxy -vv). note that the tls npn extension is not advertised unless the&lt;br&gt;  “npn” keyword on the “bind” line specifies a protocol list. also, nothing&lt;br&gt;  forces the client to pick a protocol from this list, any other one may be&lt;br&gt;  requested. please note that the tls npn extension was replaced with alpn.&lt;/p&gt;
&lt;p&gt;ssl_fc_protocol : string&lt;br&gt;  returns the name of the used protocol when the incoming connection was made&lt;br&gt;  over an ssl/tls transport layer.&lt;/p&gt;
&lt;p&gt;ssl_fc_unique_id : binary&lt;br&gt;  when the incoming connection was made over an ssl/tls transport layer,&lt;br&gt;  returns the tls unique id as defined in rfc5929 section 3. the unique id&lt;br&gt;  can be encoded to base64 using the converter: “ssl_bc_unique_id,base64”.&lt;/p&gt;
&lt;p&gt;ssl_fc_session_id : binary&lt;br&gt;  returns the ssl id of the front connection when the incoming connection was&lt;br&gt;  made over an ssl/tls transport layer. it is useful to stick a given client to&lt;br&gt;  a server. it is important to note that some browsers refresh their session id&lt;br&gt;  every few minutes.&lt;/p&gt;
&lt;p&gt;ssl_fc_sni : string&lt;br&gt;  this extracts the server name indication tls extension (sni) field from an&lt;br&gt;  incoming connection made via an ssl/tls transport layer and locally&lt;br&gt;  deciphered by haproxy. the result (when present) typically is a string&lt;br&gt;  matching the https host name (253 chars or less). the ssl library must have&lt;br&gt;  been built with support for tls extensions enabled (check haproxy -vv).&lt;/p&gt;
&lt;p&gt;  this fetch is different from “req_ssl_sni” above in that it applies to the&lt;br&gt;  connection being deciphered by haproxy and not to ssl contents being blindly&lt;br&gt;  forwarded. see also “ssl_fc_sni_end” and “ssl_fc_sni_reg” below. this&lt;br&gt;  requires that the ssl library is build with support for tls extensions&lt;br&gt;  enabled (check haproxy -vv).&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    ssl_fc_sni_end : suffix match&lt;br&gt;    ssl_fc_sni_reg : regex match&lt;/p&gt;
&lt;p&gt;ssl_fc_use_keysize : integer&lt;br&gt;  returns the symmetric cipher key size used in bits when the incoming&lt;br&gt;  connection was made over an ssl/tls transport layer.&lt;/p&gt;
&lt;h2 id=&quot;7-3-5-fetching-samples-from-buffer-contents-layer-6&quot;&gt;&lt;a href=&quot;#7-3-5-fetching-samples-from-buffer-contents-layer-6&quot; class=&quot;headerlink&quot; title=&quot;7.3.5. fetching samples from buffer contents (layer 6)&quot;&gt;&lt;/a&gt;7.3.5. fetching samples from buffer contents (layer 6)&lt;/h2&gt;&lt;p&gt;fetching samples from buffer contents is a bit different from the previous&lt;br&gt;sample fetches above because the sampled data are ephemeral. these data can&lt;br&gt;only be used when they’re available and will be lost when they’re forwarded.&lt;br&gt;for this reason, samples fetched from buffer contents during a request cannot&lt;br&gt;be used in a response for example. even while the data are being fetched, they&lt;br&gt;can change. sometimes it is necessary to set some delays or combine multiple&lt;br&gt;sample fetch methods to ensure that the expected data are complete and usable,&lt;br&gt;for example through tcp request content inspection. please see the “tcp-request&lt;br&gt;content” keyword for more detailed information on the subject.&lt;/p&gt;
&lt;p&gt;payload(&lt;offset&gt;,&lt;length&gt;) : binary (deprecated)&lt;br&gt;  this is an alias for “req.payload” when used in the context of a request (eg:&lt;br&gt;  “stick on”, “stick match”), and for “res.payload” when used in the context of&lt;br&gt;  a response such as in “stick store response”.&lt;/length&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;payload_lv(&lt;offset1&gt;,&lt;length&gt;[,&lt;offset2&gt;]) : binary (deprecated)&lt;br&gt;  this is an alias for “req.payload_lv” when used in the context of a request&lt;br&gt;  (eg: “stick on”, “stick match”), and for “res.payload_lv” when used in the&lt;br&gt;  context of a response such as in “stick store response”.&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/p&gt;
&lt;p&gt;req.len : integer&lt;br&gt;req_len : integer (deprecated)&lt;br&gt;  returns an integer value corresponding to the number of bytes present in the&lt;br&gt;  request buffer. this is mostly used in acl. it is important to understand&lt;br&gt;  that this test does not return false as long as the buffer is changing. this&lt;br&gt;  means that a check with equality to zero will almost always immediately match&lt;br&gt;  at the beginning of the session, while a test for more data will wait for&lt;br&gt;  that data to come in and return false only when haproxy is certain that no&lt;br&gt;  more data will come in. this test was designed to be used with tcp request&lt;br&gt;  content inspection.&lt;/p&gt;
&lt;p&gt;req.payload(&lt;offset&gt;,&lt;length&gt;) : binary&lt;br&gt;  this extracts a binary block of &lt;length&gt; bytes and starting at byte &lt;offset&gt;&lt;br&gt;  in the request buffer. as a special case, if the &lt;length&gt; argument is zero,&lt;br&gt;  the the whole buffer from &lt;offset&gt; to the end is extracted. this can be used&lt;br&gt;  with acls in order to check for the presence of some content in a buffer at&lt;br&gt;  any location.&lt;/offset&gt;&lt;/length&gt;&lt;/offset&gt;&lt;/length&gt;&lt;/length&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;  acl alternatives :&lt;br&gt;    payload(&lt;offset&gt;,&lt;length&gt;) : hex binary match&lt;/length&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;req.payload_lv(&lt;offset1&gt;,&lt;length&gt;[,&lt;offset2&gt;]) : binary&lt;br&gt;  this extracts a binary block whose size is specified at &lt;offset1&gt; for &lt;length&gt;&lt;br&gt;  bytes, and which starts at &lt;offset2&gt; if specified or just after the length in&lt;br&gt;  the request buffer. the &lt;offset2&gt; parameter also supports relative offsets if&lt;br&gt;  prepended with a ‘+’ or ‘-‘ sign.&lt;/offset2&gt;&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/p&gt;
&lt;p&gt;  acl alternatives :&lt;br&gt;    payload_lv(&lt;offset1&gt;,&lt;length&gt;[,&lt;offset2&gt;]) : hex binary match&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/p&gt;
&lt;p&gt;  example : please consult the example from the “stick store-response” keyword.&lt;/p&gt;
&lt;p&gt;req.proto_http : boolean&lt;br&gt;req_proto_http : boolean (deprecated)&lt;br&gt;  returns true when data in the request buffer look like http and correctly&lt;br&gt;  parses as such. it is the same parser as the common http request parser which&lt;br&gt;  is used so there should be no surprises. the test does not match until the&lt;br&gt;  request is complete, failed or timed out. this test may be used to report the&lt;br&gt;  protocol in tcp logs, but the biggest use is to block tcp request analysis&lt;br&gt;  until a complete http request is present in the buffer, for example to track&lt;br&gt;  a header.&lt;/p&gt;
&lt;p&gt;  example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# track request counts per &amp;quot;base&amp;quot; (concatenation of host+url)
tcp-request inspect-delay 10s
tcp-request content reject if !http
tcp-request content track-sc0 base table req-rate
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;req.rdp_cookie([&lt;name&gt;]) : string&lt;br&gt;rdp_cookie([&lt;name&gt;]) : string (deprecated)&lt;br&gt;  when the request buffer looks like the rdp protocol, extracts the rdp cookie&lt;br&gt;  &lt;name&gt;, or any cookie if unspecified. the parser only checks for the first&lt;br&gt;  cookie, as illustrated in the rdp protocol specification. the cookie name is&lt;br&gt;  case insensitive. generally the “msts” cookie name will be used, as it can&lt;br&gt;  contain the user name of the client connecting to the server if properly&lt;br&gt;  configured on the client. the “mstshash” cookie is often used as well for&lt;br&gt;  session stickiness to servers.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  this differs from “balance rdp-cookie” in that any balancing algorithm may be&lt;br&gt;  used and thus the distribution of clients to backend servers is not linked to&lt;br&gt;  a hash of the rdp cookie. it is envisaged that using a balancing algorithm&lt;br&gt;  such as “balance roundrobin” or “balance leastconn” will lead to a more even&lt;br&gt;  distribution of clients to backend servers than the hash used by “balance&lt;br&gt;  rdp-cookie”.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    req_rdp_cookie([&lt;name&gt;]) : exact string match&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;   listen tse-farm&lt;br&gt;       bind 0.0.0.0:3389&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wait up to 5s for an rdp cookie in the request
tcp-request inspect-delay 5s
tcp-request content accept if rdp_cookie
# apply rdp cookie persistence
persist rdp-cookie
# persist based on the mstshash cookie
# this is only useful makes sense if
# balance rdp-cookie is not used
stick-table type string size 204800
stick on req.rdp_cookie(mstshash)
server srv1 1.1.1.1:3389
server srv1 1.1.1.2:3389
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  see also : “balance rdp-cookie”, “persist rdp-cookie”, “tcp-request” and the&lt;br&gt;  “req_rdp_cookie” acl.&lt;/p&gt;
&lt;p&gt;req.rdp_cookie_cnt([name]) : integer&lt;br&gt;rdp_cookie_cnt([name]) : integer (deprecated)&lt;br&gt;  tries to parse the request buffer as rdp protocol, then returns an integer&lt;br&gt;  corresponding to the number of rdp cookies found. if an optional cookie name&lt;br&gt;  is passed, only cookies matching this name are considered. this is mostly&lt;br&gt;  used in acl.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    req_rdp_cookie_cnt([&lt;name&gt;]) : integer match&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.ssl_ec_ext : boolean&lt;br&gt;  returns a boolean identifying if client sent the supported elliptic curves&lt;br&gt;  extension as defined in rfc4492, section 5.1. within the ssl clienthello&lt;br&gt;  message. this can be used to present ecc compatible clients with ec certificate&lt;br&gt;  and to use rsa for all others, on the same ip address. note that this only&lt;br&gt;  applies to raw contents found in the request buffer and not to contents&lt;br&gt;  deciphered via an ssl data layer, so this will not work with “bind” lines&lt;br&gt;  having the “ssl” option.&lt;/p&gt;
&lt;p&gt;req.ssl_hello_type : integer&lt;br&gt;req_ssl_hello_type : integer (deprecated)&lt;br&gt;  returns an integer value containing the type of the ssl hello message found&lt;br&gt;  in the request buffer if the buffer contains data that parse as a complete&lt;br&gt;  ssl (v3 or superior) client hello message. note that this only applies to raw&lt;br&gt;  contents found in the request buffer and not to contents deciphered via an&lt;br&gt;  ssl data layer, so this will not work with “bind” lines having the “ssl”&lt;br&gt;  option. this is mostly used in acl to detect presence of an ssl hello message&lt;br&gt;  that is supposed to contain an ssl session id usable for stickiness.&lt;/p&gt;
&lt;p&gt;req.ssl_sni : string&lt;br&gt;req_ssl_sni : string (deprecated)&lt;br&gt;  returns a string containing the value of the server name tls extension sent&lt;br&gt;  by a client in a tls stream passing through the request buffer if the buffer&lt;br&gt;  contains data that parse as a complete ssl (v3 or superior) client hello&lt;br&gt;  message. note that this only applies to raw contents found in the request&lt;br&gt;  buffer and not to contents deciphered via an ssl data layer, so this will not&lt;br&gt;  work with “bind” lines having the “ssl” option. sni normally contains the&lt;br&gt;  name of the host the client tries to connect to (for recent browsers). sni is&lt;br&gt;  useful for allowing or denying access to certain hosts when ssl/tls is used&lt;br&gt;  by the client. this test was designed to be used with tcp request content&lt;br&gt;  inspection. if content switching is needed, it is recommended to first wait&lt;br&gt;  for a complete client hello (type 1), like in the example below. see also&lt;br&gt;  “ssl_fc_sni”.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    req_ssl_sni : exact string match&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# wait for a client hello for at most 5 seconds
tcp-request inspect-delay 5s
tcp-request content accept if { req_ssl_hello_type 1 }
use_backend bk_allow if { req_ssl_sni -f allowed_sites }
default_backend bk_sorry_page
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;res.ssl_hello_type : integer&lt;br&gt;rep_ssl_hello_type : integer (deprecated)&lt;br&gt;  returns an integer value containing the type of the ssl hello message found&lt;br&gt;  in the response buffer if the buffer contains data that parses as a complete&lt;br&gt;  ssl (v3 or superior) hello message. note that this only applies to raw&lt;br&gt;  contents found in the response buffer and not to contents deciphered via an&lt;br&gt;  ssl data layer, so this will not work with “server” lines having the “ssl”&lt;br&gt;  option. this is mostly used in acl to detect presence of an ssl hello message&lt;br&gt;  that is supposed to contain an ssl session id usable for stickiness.&lt;/p&gt;
&lt;p&gt;req.ssl_ver : integer&lt;br&gt;req_ssl_ver : integer (deprecated)&lt;br&gt;  returns an integer value containing the version of the ssl/tls protocol of a&lt;br&gt;  stream present in the request buffer. both sslv2 hello messages and sslv3&lt;br&gt;  messages are supported. tlsv1 is announced as ssl version 3.1. the value is&lt;br&gt;  composed of the major version multiplied by 65536, added to the minor&lt;br&gt;  version. note that this only applies to raw contents found in the request&lt;br&gt;  buffer and not to contents deciphered via an ssl data layer, so this will not&lt;br&gt;  work with “bind” lines having the “ssl” option. the acl version of the test&lt;br&gt;  matches against a decimal notation in the form major.minor (eg: 3.1). this&lt;br&gt;  fetch is mostly used in acl.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    req_ssl_ver : decimal match&lt;/p&gt;
&lt;p&gt;res.len : integer&lt;br&gt;  returns an integer value corresponding to the number of bytes present in the&lt;br&gt;  response buffer. this is mostly used in acl. it is important to understand&lt;br&gt;  that this test does not return false as long as the buffer is changing. this&lt;br&gt;  means that a check with equality to zero will almost always immediately match&lt;br&gt;  at the beginning of the session, while a test for more data will wait for&lt;br&gt;  that data to come in and return false only when haproxy is certain that no&lt;br&gt;  more data will come in. this test was designed to be used with tcp response&lt;br&gt;  content inspection.&lt;/p&gt;
&lt;p&gt;res.payload(&lt;offset&gt;,&lt;length&gt;) : binary&lt;br&gt;  this extracts a binary block of &lt;length&gt; bytes and starting at byte &lt;offset&gt;&lt;br&gt;  in the response buffer. as a special case, if the &lt;length&gt; argument is zero,&lt;br&gt;  the the whole buffer from &lt;offset&gt; to the end is extracted. this can be used&lt;br&gt;  with acls in order to check for the presence of some content in a buffer at&lt;br&gt;  any location.&lt;/offset&gt;&lt;/length&gt;&lt;/offset&gt;&lt;/length&gt;&lt;/length&gt;&lt;/offset&gt;&lt;/p&gt;
&lt;p&gt;res.payload_lv(&lt;offset1&gt;,&lt;length&gt;[,&lt;offset2&gt;]) : binary&lt;br&gt;  this extracts a binary block whose size is specified at &lt;offset1&gt; for &lt;length&gt;&lt;br&gt;  bytes, and which starts at &lt;offset2&gt; if specified or just after the length in&lt;br&gt;  the response buffer. the &lt;offset2&gt; parameter also supports relative offsets&lt;br&gt;  if prepended with a ‘+’ or ‘-‘ sign.&lt;/offset2&gt;&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/offset2&gt;&lt;/length&gt;&lt;/offset1&gt;&lt;/p&gt;
&lt;p&gt;  example : please consult the example from the “stick store-response” keyword.&lt;/p&gt;
&lt;p&gt;wait_end : boolean&lt;br&gt;  this fetch either returns true when the inspection period is over, or does&lt;br&gt;  not fetch. it is only used in acls, in conjunction with content analysis to&lt;br&gt;  avoid returning a wrong verdict early.  it may also be used to delay some&lt;br&gt;  actions, such as a delayed reject for some special addresses. since it either&lt;br&gt;  stops the rules evaluation or immediately returns true, it is recommended to&lt;br&gt;  use this acl as the last one in a rule.  please note that the default acl&lt;br&gt;  “wait_end” is always usable without prior declaration. this test was designed&lt;br&gt;  to be used with tcp request content inspection.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# delay every incoming request by 2 seconds
tcp-request inspect-delay 2s
tcp-request content accept if wait_end

# don&amp;apos;t immediately tell bad guys they are rejected
tcp-request inspect-delay 10s
acl goodguys src 10.0.0.0/24
acl badguys  src 10.0.1.0/24
tcp-request content accept if goodguys
tcp-request content reject if badguys wait_end
tcp-request content reject
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-3-6-fetching-http-samples-layer-7&quot;&gt;&lt;a href=&quot;#7-3-6-fetching-http-samples-layer-7&quot; class=&quot;headerlink&quot; title=&quot;7.3.6. fetching http samples (layer 7)&quot;&gt;&lt;/a&gt;7.3.6. fetching http samples (layer 7)&lt;/h2&gt;&lt;p&gt;it is possible to fetch samples from http contents, requests and responses.&lt;br&gt;this application layer is also called layer 7. it is only possible to fetch the&lt;br&gt;data in this section when a full http request or response has been parsed from&lt;br&gt;its respective request or response buffer. this is always the case with all&lt;br&gt;http specific rules and for sections running with “mode http”. when using tcp&lt;br&gt;content inspection, it may be necessary to support an inspection delay in order&lt;br&gt;to let the request or response come in first. these fetches may require a bit&lt;br&gt;more cpu resources than the layer 4 ones, but not much since the request and&lt;br&gt;response are indexed.&lt;/p&gt;
&lt;p&gt;base : string&lt;br&gt;  this returns the concatenation of the first host header and the path part of&lt;br&gt;  the request, which starts at the first slash and ends before the question&lt;br&gt;  mark. it can be useful in virtual hosted environments to detect url abuses as&lt;br&gt;  well as to improve shared caches efficiency. using this with a limited size&lt;br&gt;  stick table also allows one to collect statistics about most commonly&lt;br&gt;  requested objects by host/path. with acls it can allow simple content&lt;br&gt;  switching rules involving the host and the path at the same time, such as&lt;br&gt;  “www.example.com/favicon.ico”. see also “path” and “uri”.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    base     : exact string match&lt;br&gt;    base_beg : prefix match&lt;br&gt;    base_dir : subdir match&lt;br&gt;    base_dom : domain match&lt;br&gt;    base_end : suffix match&lt;br&gt;    base_len : length match&lt;br&gt;    base_reg : regex match&lt;br&gt;    base_sub : substring match&lt;/p&gt;
&lt;p&gt;base32 : integer&lt;br&gt;  this returns a 32-bit hash of the value returned by the “base” fetch method&lt;br&gt;  above. this is useful to track per-url activity on high traffic sites without&lt;br&gt;  having to store all urls. instead a shorter hash is stored, saving a lot of&lt;br&gt;  memory. the output type is an unsigned integer. the hash function used is&lt;br&gt;  sdbm with full avalanche on the output. technically, base32 is exactly equal&lt;br&gt;  to “base,sdbm(1)”.&lt;/p&gt;
&lt;p&gt;base32+src : binary&lt;br&gt;  this returns the concatenation of the base32 fetch above and the src fetch&lt;br&gt;  below. the resulting type is of type binary, with a size of 8 or 20 bytes&lt;br&gt;  depending on the source address family. this can be used to track per-ip,&lt;br&gt;  per-url counters.&lt;/p&gt;
&lt;p&gt;capture.req.hdr(&lt;idx&gt;) : string&lt;br&gt;  this extracts the content of the header captured by the “capture request&lt;br&gt;  header”, idx is the position of the capture keyword in the configuration.&lt;br&gt;  the first entry is an index of 0. see also: “capture request header”.&lt;/idx&gt;&lt;/p&gt;
&lt;p&gt;capture.req.method : string&lt;br&gt;  this extracts the method of an http request. it can be used in both request&lt;br&gt;  and response. unlike “method”, it can be used in both request and response&lt;br&gt;  because it’s allocated.&lt;/p&gt;
&lt;p&gt;capture.req.uri : string&lt;br&gt;  this extracts the request’s uri, which starts at the first slash and ends&lt;br&gt;  before the first space in the request (without the host part). unlike “path”&lt;br&gt;  and “url”, it can be used in both request and response because it’s&lt;br&gt;  allocated.&lt;/p&gt;
&lt;p&gt;capture.req.ver : string&lt;br&gt;  this extracts the request’s http version and returns either “http/1.0” or&lt;br&gt;  “http/1.1”. unlike “req.ver”, it can be used in both request, response, and&lt;br&gt;  logs because it relies on a persistent flag.&lt;/p&gt;
&lt;p&gt;capture.res.hdr(&lt;idx&gt;) : string&lt;br&gt;  this extracts the content of the header captured by the “capture response&lt;br&gt;  header”, idx is the position of the capture keyword in the configuration.&lt;br&gt;  the first entry is an index of 0.&lt;br&gt;  see also: “capture response header”&lt;/idx&gt;&lt;/p&gt;
&lt;p&gt;capture.res.ver : string&lt;br&gt;  this extracts the response’s http version and returns either “http/1.0” or&lt;br&gt;  “http/1.1”. unlike “res.ver”, it can be used in logs because it relies on a&lt;br&gt;  persistent flag.&lt;/p&gt;
&lt;p&gt;req.body : binary&lt;br&gt;  this returns the http request’s available body as a block of data. it&lt;br&gt;  requires that the request body has been buffered made available using&lt;br&gt;  “option http-buffer-request”. in case of chunked-encoded body, currently only&lt;br&gt;  the first chunk is analyzed.&lt;/p&gt;
&lt;p&gt;req.body_param([&lt;name&gt;) : string&lt;br&gt;  this fetch assumes that the body of the post request is url-encoded. the user&lt;br&gt;  can check if the “content-type” contains the value&lt;br&gt;  “application/x-www-form-urlencoded”. this extracts the first occurrence of the&lt;br&gt;  parameter &lt;name&gt; in the body, which ends before ‘&amp;amp;’. the parameter name is&lt;br&gt;  case-sensitive. if no name is given, any parameter will match, and the first&lt;br&gt;  one will be returned. the result is a string corresponding to the value of the&lt;br&gt;  parameter &lt;name&gt; as presented in the request body (no url decoding is&lt;br&gt;  performed). note that the acl version of this fetch iterates over multiple&lt;br&gt;  parameters and will iteratively report all parameters values if no name is&lt;br&gt;  given.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.body_len : integer&lt;br&gt;  this returns the length of the http request’s available body in bytes. it may&lt;br&gt;  be lower than the advertised length if the body is larger than the buffer. it&lt;br&gt;  requires that the request body has been buffered made available using&lt;br&gt;  “option http-buffer-request”.&lt;/p&gt;
&lt;p&gt;req.body_size : integer&lt;br&gt;  this returns the advertised length of the http request’s body in bytes. it&lt;br&gt;  will represent the advertised content-length header, or the size of the first&lt;br&gt;  chunk in case of chunked encoding. in order to parse the chunks, it requires&lt;br&gt;  that the request body has been buffered made available using&lt;br&gt;  “option http-buffer-request”.&lt;/p&gt;
&lt;p&gt;req.cook([&lt;name&gt;]) : string&lt;br&gt;cook([&lt;name&gt;]) : string (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “cookie”&lt;br&gt;  header line from the request, and returns its value as string. if no name is&lt;br&gt;  specified, the first cookie value is returned. when used with acls, all&lt;br&gt;  matching cookies are evaluated. spaces around the name and the value are&lt;br&gt;  ignored as requested by the cookie header specification (rfc6265). the cookie&lt;br&gt;  name is case-sensitive. empty cookies are valid, so an empty cookie may very&lt;br&gt;  well return an empty value if it is present. use the “found” match to detect&lt;br&gt;  presence. use the res.cook() variant for response cookies sent by the server.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    cook([&lt;name&gt;])     : exact string match&lt;br&gt;    cook_beg([&lt;name&gt;]) : prefix match&lt;br&gt;    cook_dir([&lt;name&gt;]) : subdir match&lt;br&gt;    cook_dom([&lt;name&gt;]) : domain match&lt;br&gt;    cook_end([&lt;name&gt;]) : suffix match&lt;br&gt;    cook_len([&lt;name&gt;]) : length match&lt;br&gt;    cook_reg([&lt;name&gt;]) : regex match&lt;br&gt;    cook_sub([&lt;name&gt;]) : substring match&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.cook_cnt([&lt;name&gt;]) : integer&lt;br&gt;cook_cnt([&lt;name&gt;]) : integer (deprecated)&lt;br&gt;  returns an integer value representing the number of occurrences of the cookie&lt;br&gt;  &lt;name&gt; in the request, or all cookies if &lt;name&gt; is not specified.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.cook_val([&lt;name&gt;]) : integer&lt;br&gt;cook_val([&lt;name&gt;]) : integer (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “cookie”&lt;br&gt;  header line from the request, and converts its value to an integer which is&lt;br&gt;  returned. if no name is specified, the first cookie value is returned. when&lt;br&gt;  used in acls, all matching names are iterated over until a value matches.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;cookie([&lt;name&gt;]) : string (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “cookie”&lt;br&gt;  header line from the request, or a “set-cookie” header from the response, and&lt;br&gt;  returns its value as a string. a typical use is to get multiple clients&lt;br&gt;  sharing a same profile use the same server. this can be similar to what&lt;br&gt;  “appsession” does with the “request-learn” statement, but with support for&lt;br&gt;  multi-peer synchronization and state keeping across restarts. if no name is&lt;br&gt;  specified, the first cookie value is returned. this fetch should not be used&lt;br&gt;  anymore and should be replaced by req.cook() or res.cook() instead as it&lt;br&gt;  ambiguously uses the direction based on the context where it is used.&lt;br&gt;  see also : “appsession”.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;hdr([&lt;name&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  this is equivalent to req.hdr() when used on requests, and to res.hdr() when&lt;br&gt;  used on responses. please refer to these respective fetches for more details.&lt;br&gt;  in case of doubt about the fetch direction, please use the explicit ones.&lt;br&gt;  note that contrary to the hdr() sample fetch method, the hdr_* acl keywords&lt;br&gt;  unambiguously apply to the request headers.&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.fhdr(&lt;name&gt;[,&lt;occ&gt;]) : string&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http request. when&lt;br&gt;  used from an acl, all occurrences are iterated over until a match is found.&lt;br&gt;  optionally, a specific occurrence might be specified as a position number.&lt;br&gt;  positive values indicate a position from the first occurrence, with 1 being&lt;br&gt;  the first one. negative values indicate positions relative to the last one,&lt;br&gt;  with -1 being the last one. it differs from req.hdr() in that any commas&lt;br&gt;  present in the value are returned and are not used as delimiters. this is&lt;br&gt;  sometimes useful with headers such as user-agent.&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.fhdr_cnt([&lt;name&gt;]) : integer&lt;br&gt;  returns an integer value representing the number of occurrences of request&lt;br&gt;  header field name &lt;name&gt;, or the total number of header fields if &lt;name&gt; is&lt;br&gt;  not specified. contrary to its req.hdr_cnt() cousin, this function returns&lt;br&gt;  the number of full line headers and does not stop on commas.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.hdr([&lt;name&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http request. when&lt;br&gt;  used from an acl, all occurrences are iterated over until a match is found.&lt;br&gt;  optionally, a specific occurrence might be specified as a position number.&lt;br&gt;  positive values indicate a position from the first occurrence, with 1 being&lt;br&gt;  the first one. negative values indicate positions relative to the last one,&lt;br&gt;  with -1 being the last one. a typical use is with the x-forwarded-for header&lt;br&gt;  once converted to ip, associated with an ip stick-table. the function&lt;br&gt;  considers any comma as a delimiter for distinct values. if full-line headers&lt;br&gt;  are desired instead, use req.fhdr(). please carefully check rfc2616 to know&lt;br&gt;  how certain headers are supposed to be parsed. also, some of them are case&lt;br&gt;  insensitive (eg: connection).&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    hdr([&lt;name&gt;[,&lt;occ&gt;]])     : exact string match&lt;br&gt;    hdr_beg([&lt;name&gt;[,&lt;occ&gt;]]) : prefix match&lt;br&gt;    hdr_dir([&lt;name&gt;[,&lt;occ&gt;]]) : subdir match&lt;br&gt;    hdr_dom([&lt;name&gt;[,&lt;occ&gt;]]) : domain match&lt;br&gt;    hdr_end([&lt;name&gt;[,&lt;occ&gt;]]) : suffix match&lt;br&gt;    hdr_len([&lt;name&gt;[,&lt;occ&gt;]]) : length match&lt;br&gt;    hdr_reg([&lt;name&gt;[,&lt;occ&gt;]]) : regex match&lt;br&gt;    hdr_sub([&lt;name&gt;[,&lt;occ&gt;]]) : substring match&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.hdr_cnt([&lt;name&gt;]) : integer&lt;br&gt;hdr_cnt([&lt;header&gt;]) : integer (deprecated)&lt;br&gt;  returns an integer value representing the number of occurrences of request&lt;br&gt;  header field name &lt;name&gt;, or the total number of header field values if&lt;br&gt;  &lt;name&gt; is not specified. it is important to remember that one header line may&lt;br&gt;  count as several headers if it has several values. the function considers any&lt;br&gt;  comma as a delimiter for distinct values. if full-line headers are desired&lt;br&gt;  instead, req.fhdr_cnt() should be used instead. with acls, it can be used to&lt;br&gt;  detect presence, absence or abuse of a specific header, as well as to block&lt;br&gt;  request smuggling attacks by rejecting requests which contain more than one&lt;br&gt;  of certain headers. see “req.hdr” for more information on header matching.&lt;/name&gt;&lt;/name&gt;&lt;/header&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.hdr_ip([&lt;name&gt;[,&lt;occ&gt;]]) : ip&lt;br&gt;hdr_ip([&lt;name&gt;[,&lt;occ&gt;]]) : ip (deprecated)&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http request,&lt;br&gt;  converts it to an ipv4 or ipv6 address and returns this address. when used&lt;br&gt;  with acls, all occurrences are checked, and if &lt;name&gt; is omitted, every value&lt;br&gt;  of every header is checked. optionally, a specific occurrence might be&lt;br&gt;  specified as a position number. positive values indicate a position from the&lt;br&gt;  first occurrence, with 1 being the first one.  negative values indicate&lt;br&gt;  positions relative to the last one, with -1 being the last one. a typical use&lt;br&gt;  is with the x-forwarded-for and x-client-ip headers.&lt;/name&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;req.hdr_val([&lt;name&gt;[,&lt;occ&gt;]]) : integer&lt;br&gt;hdr_val([&lt;name&gt;[,&lt;occ&gt;]]) : integer (deprecated)&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http request, and&lt;br&gt;  converts it to an integer value. when used with acls, all occurrences are&lt;br&gt;  checked, and if &lt;name&gt; is omitted, every value of every header is checked.&lt;br&gt;  optionally, a specific occurrence might be specified as a position number.&lt;br&gt;  positive values indicate a position from the first occurrence, with 1 being&lt;br&gt;  the first one. negative values indicate positions relative to the last one,&lt;br&gt;  with -1 being the last one. a typical use is with the x-forwarded-for header.&lt;/name&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;http_auth(&lt;userlist&gt;) : boolean&lt;br&gt;  returns a boolean indicating whether the authentication data received from&lt;br&gt;  the client match a username &amp;amp; password stored in the specified userlist. this&lt;br&gt;  fetch function is not really useful outside of acls. currently only http&lt;br&gt;  basic auth is supported.&lt;/userlist&gt;&lt;/p&gt;
&lt;p&gt;http_auth_group(&lt;userlist&gt;) : string&lt;br&gt;  returns a string corresponding to the user name found in the authentication&lt;br&gt;  data received from the client if both the user name and password are valid&lt;br&gt;  according to the specified userlist. the main purpose is to use it in acls&lt;br&gt;  where it is then checked whether the user belongs to any group within a list.&lt;br&gt;  this fetch function is not really useful outside of acls. currently only http&lt;br&gt;  basic auth is supported.&lt;/userlist&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    http_auth_group(&lt;userlist&gt;) : group …&lt;br&gt;    returns true when the user extracted from the request and whose password is&lt;br&gt;    valid according to the specified userlist belongs to at least one of the&lt;br&gt;    groups.&lt;/userlist&gt;&lt;/p&gt;
&lt;p&gt;http_first_req : boolean&lt;br&gt;  returns true when the request being processed is the first one of the&lt;br&gt;  connection. this can be used to add or remove headers that may be missing&lt;br&gt;  from some requests when a request is not the first one, or to help grouping&lt;br&gt;  requests in the logs.&lt;/p&gt;
&lt;p&gt;method : integer + string&lt;br&gt;  returns an integer value corresponding to the method in the http request. for&lt;br&gt;  example, “get” equals 1 (check sources to establish the matching). value 9&lt;br&gt;  means “other method” and may be converted to a string extracted from the&lt;br&gt;  stream. this should not be used directly as a sample, this is only meant to&lt;br&gt;  be used from acls, which transparently convert methods from patterns to these&lt;br&gt;  integer + string values. some predefined acl already check for most common&lt;br&gt;  methods.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    method : case insensitive method match&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# only accept get and head requests
acl valid_method method get head
http-request deny if ! valid_method
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;path : string&lt;br&gt;  this extracts the request’s url path, which starts at the first slash and&lt;br&gt;  ends before the question mark (without the host part). a typical use is with&lt;br&gt;  prefetch-capable caches, and with portals which need to aggregate multiple&lt;br&gt;  information from databases and keep them in caches. note that with outgoing&lt;br&gt;  caches, it would be wiser to use “url” instead. with acls, it’s typically&lt;br&gt;  used to match exact file names (eg: “/login.php”), or directory parts using&lt;br&gt;  the derivative forms. see also the “url” and “base” fetch methods.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    path     : exact string match&lt;br&gt;    path_beg : prefix match&lt;br&gt;    path_dir : subdir match&lt;br&gt;    path_dom : domain match&lt;br&gt;    path_end : suffix match&lt;br&gt;    path_len : length match&lt;br&gt;    path_reg : regex match&lt;br&gt;    path_sub : substring match&lt;/p&gt;
&lt;p&gt;query : string&lt;br&gt;  this extracts the request’s query string, which starts after the first&lt;br&gt;  question mark. if no question mark is present, this fetch returns nothing. if&lt;br&gt;  a question mark is present but nothing follows, it returns an empty string.&lt;br&gt;  this means it’s possible to easily know whether a query string is present&lt;br&gt;  using the “found” matching method. this fetch is the completemnt of “path”&lt;br&gt;  which stops before the question mark.&lt;/p&gt;
&lt;p&gt;req.hdr_names([&lt;delim&gt;]) : string&lt;br&gt;  this builds a string made from the concatenation of all header names as they&lt;br&gt;  appear in the request when the rule is evaluated. the default delimiter is&lt;br&gt;  the comma (‘,’) but it may be overridden as an optional argument &lt;delim&gt;. in&lt;br&gt;  this case, only the first character of &lt;delim&gt; is considered.&lt;/delim&gt;&lt;/delim&gt;&lt;/delim&gt;&lt;/p&gt;
&lt;p&gt;req.ver : string&lt;br&gt;req_ver : string (deprecated)&lt;br&gt;  returns the version string from the http request, for example “1.1”. this can&lt;br&gt;  be useful for logs, but is mostly there for acl. some predefined acl already&lt;br&gt;  check for versions 1.0 and 1.1.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    req_ver : exact string match&lt;/p&gt;
&lt;p&gt;res.comp : boolean&lt;br&gt;  returns the boolean “true” value if the response has been compressed by&lt;br&gt;  haproxy, otherwise returns boolean “false”. this may be used to add&lt;br&gt;  information in the logs.&lt;/p&gt;
&lt;p&gt;res.comp_algo : string&lt;br&gt;  returns a string containing the name of the algorithm used if the response&lt;br&gt;  was compressed by haproxy, for example : “deflate”. this may be used to add&lt;br&gt;  some information in the logs.&lt;/p&gt;
&lt;p&gt;res.cook([&lt;name&gt;]) : string&lt;br&gt;scook([&lt;name&gt;]) : string (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “set-cookie”&lt;br&gt;  header line from the response, and returns its value as string. if no name is&lt;br&gt;  specified, the first cookie value is returned.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    scook([&lt;name&gt;] : exact string match&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.cook_cnt([&lt;name&gt;]) : integer&lt;br&gt;scook_cnt([&lt;name&gt;]) : integer (deprecated)&lt;br&gt;  returns an integer value representing the number of occurrences of the cookie&lt;br&gt;  &lt;name&gt; in the response, or all cookies if &lt;name&gt; is not specified. this is&lt;br&gt;  mostly useful when combined with acls to detect suspicious responses.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.cook_val([&lt;name&gt;]) : integer&lt;br&gt;scook_val([&lt;name&gt;]) : integer (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “set-cookie”&lt;br&gt;  header line from the response, and converts its value to an integer which is&lt;br&gt;  returned. if no name is specified, the first cookie value is returned.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.fhdr([&lt;name&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http response, or of&lt;br&gt;  the last header if no &lt;name&gt; is specified. optionally, a specific occurrence&lt;br&gt;  might be specified as a position number. positive values indicate a position&lt;br&gt;  from the first occurrence, with 1 being the first one. negative values&lt;br&gt;  indicate positions relative to the last one, with -1 being the last one. it&lt;br&gt;  differs from res.hdr() in that any commas present in the value are returned&lt;br&gt;  and are not used as delimiters. if this is not desired, the res.hdr() fetch&lt;br&gt;  should be used instead. this is sometimes useful with headers such as date or&lt;br&gt;  expires.&lt;/name&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.fhdr_cnt([&lt;name&gt;]) : integer&lt;br&gt;  returns an integer value representing the number of occurrences of response&lt;br&gt;  header field name &lt;name&gt;, or the total number of header fields if &lt;name&gt; is&lt;br&gt;  not specified. contrary to its res.hdr_cnt() cousin, this function returns&lt;br&gt;  the number of full line headers and does not stop on commas. if this is not&lt;br&gt;  desired, the res.hdr_cnt() fetch should be used instead.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.hdr([&lt;name&gt;[,&lt;occ&gt;]]) : string&lt;br&gt;shdr([&lt;name&gt;[,&lt;occ&gt;]]) : string (deprecated)&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http response, or of&lt;br&gt;  the last header if no &lt;name&gt; is specified. optionally, a specific occurrence&lt;br&gt;  might be specified as a position number. positive values indicate a position&lt;br&gt;  from the first occurrence, with 1 being the first one. negative values&lt;br&gt;  indicate positions relative to the last one, with -1 being the last one. this&lt;br&gt;  can be useful to learn some data into a stick-table. the function considers&lt;br&gt;  any comma as a delimiter for distinct values. if this is not desired, the&lt;br&gt;  res.fhdr() fetch should be used instead.&lt;/name&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    shdr([&lt;name&gt;[,&lt;occ&gt;]])     : exact string match&lt;br&gt;    shdr_beg([&lt;name&gt;[,&lt;occ&gt;]]) : prefix match&lt;br&gt;    shdr_dir([&lt;name&gt;[,&lt;occ&gt;]]) : subdir match&lt;br&gt;    shdr_dom([&lt;name&gt;[,&lt;occ&gt;]]) : domain match&lt;br&gt;    shdr_end([&lt;name&gt;[,&lt;occ&gt;]]) : suffix match&lt;br&gt;    shdr_len([&lt;name&gt;[,&lt;occ&gt;]]) : length match&lt;br&gt;    shdr_reg([&lt;name&gt;[,&lt;occ&gt;]]) : regex match&lt;br&gt;    shdr_sub([&lt;name&gt;[,&lt;occ&gt;]]) : substring match&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.hdr_cnt([&lt;name&gt;]) : integer&lt;br&gt;shdr_cnt([&lt;name&gt;]) : integer (deprecated)&lt;br&gt;  returns an integer value representing the number of occurrences of response&lt;br&gt;  header field name &lt;name&gt;, or the total number of header fields if &lt;name&gt; is&lt;br&gt;  not specified. the function considers any comma as a delimiter for distinct&lt;br&gt;  values. if this is not desired, the res.fhdr_cnt() fetch should be used&lt;br&gt;  instead.&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.hdr_ip([&lt;name&gt;[,&lt;occ&gt;]]) : ip&lt;br&gt;shdr_ip([&lt;name&gt;[,&lt;occ&gt;]]) : ip (deprecated)&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http response,&lt;br&gt;  convert it to an ipv4 or ipv6 address and returns this address. optionally, a&lt;br&gt;  specific occurrence might be specified as a position number. positive values&lt;br&gt;  indicate a position from the first occurrence, with 1 being the first one.&lt;br&gt;  negative values indicate positions relative to the last one, with -1 being&lt;br&gt;  the last one. this can be useful to learn some data into a stick table.&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.hdr_names([&lt;delim&gt;]) : string&lt;br&gt;  this builds a string made from the concatenation of all header names as they&lt;br&gt;  appear in the response when the rule is evaluated. the default delimiter is&lt;br&gt;  the comma (‘,’) but it may be overridden as an optional argument &lt;delim&gt;. in&lt;br&gt;  this case, only the first character of &lt;delim&gt; is considered.&lt;/delim&gt;&lt;/delim&gt;&lt;/delim&gt;&lt;/p&gt;
&lt;p&gt;res.hdr_val([&lt;name&gt;[,&lt;occ&gt;]]) : integer&lt;br&gt;shdr_val([&lt;name&gt;[,&lt;occ&gt;]]) : integer (deprecated)&lt;br&gt;  this extracts the last occurrence of header &lt;name&gt; in an http response, and&lt;br&gt;  converts it to an integer value. optionally, a specific occurrence might be&lt;br&gt;  specified as a position number. positive values indicate a position from the&lt;br&gt;  first occurrence, with 1 being the first one. negative values indicate&lt;br&gt;  positions relative to the last one, with -1 being the last one. this can be&lt;br&gt;  useful to learn some data into a stick table.&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/occ&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;res.ver : string&lt;br&gt;resp_ver : string (deprecated)&lt;br&gt;  returns the version string from the http response, for example “1.1”. this&lt;br&gt;  can be useful for logs, but is mostly there for acl.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    resp_ver : exact string match&lt;/p&gt;
&lt;p&gt;set-cookie([&lt;name&gt;]) : string (deprecated)&lt;br&gt;  this extracts the last occurrence of the cookie name &lt;name&gt; on a “set-cookie”&lt;br&gt;  header line from the response and uses the corresponding value to match. this&lt;br&gt;  can be comparable to what “appsession” does with default options, but with&lt;br&gt;  support for multi-peer synchronization and state keeping across restarts.&lt;/name&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  this fetch function is deprecated and has been superseded by the “res.cook”&lt;br&gt;  fetch. this keyword will disappear soon.&lt;/p&gt;
&lt;p&gt;  see also : “appsession”&lt;/p&gt;
&lt;p&gt;status : integer&lt;br&gt;  returns an integer containing the http status code in the http response, for&lt;br&gt;  example, 302. it is mostly used within acls and integer ranges, for example,&lt;br&gt;  to remove any location header if the response is not a 3xx.&lt;/p&gt;
&lt;p&gt;url : string&lt;br&gt;  this extracts the request’s url as presented in the request. a typical use is&lt;br&gt;  with prefetch-capable caches, and with portals which need to aggregate&lt;br&gt;  multiple information from databases and keep them in caches. with acls, using&lt;br&gt;  “path” is preferred over using “url”, because clients may send a full url as&lt;br&gt;  is normally done with proxies. the only real use is to match “*” which does&lt;br&gt;  not match in “path”, and for which there is already a predefined acl. see&lt;br&gt;  also “path” and “base”.&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    url     : exact string match&lt;br&gt;    url_beg : prefix match&lt;br&gt;    url_dir : subdir match&lt;br&gt;    url_dom : domain match&lt;br&gt;    url_end : suffix match&lt;br&gt;    url_len : length match&lt;br&gt;    url_reg : regex match&lt;br&gt;    url_sub : substring match&lt;/p&gt;
&lt;p&gt;url_ip : ip&lt;br&gt;  this extracts the ip address from the request’s url when the host part is&lt;br&gt;  presented as an ip address. its use is very limited. for instance, a&lt;br&gt;  monitoring system might use this field as an alternative for the source ip in&lt;br&gt;  order to test what path a given source address would follow, or to force an&lt;br&gt;  entry in a table for a given source address. with acls it can be used to&lt;br&gt;  restrict access to certain systems through a proxy, for example when combined&lt;br&gt;  with option “http_proxy”.&lt;/p&gt;
&lt;p&gt;url_port : integer&lt;br&gt;  this extracts the port part from the request’s url. note that if the port is&lt;br&gt;  not specified in the request, port 80 is assumed. with acls it can be used to&lt;br&gt;  restrict access to certain systems through a proxy, for example when combined&lt;br&gt;  with option “http_proxy”.&lt;/p&gt;
&lt;p&gt;urlp([&lt;name&gt;[,&lt;delim&gt;]]) : string&lt;br&gt;url_param([&lt;name&gt;[,&lt;delim&gt;]]) : string&lt;br&gt;  this extracts the first occurrence of the parameter &lt;name&gt; in the query&lt;br&gt;  string, which begins after either ‘?’ or &lt;delim&gt;, and which ends before ‘&amp;amp;’,&lt;br&gt;  ‘;’ or &lt;delim&gt;. the parameter name is case-sensitive. if no name is given,&lt;br&gt;  any parameter will match, and the first one will be returned. the result is&lt;br&gt;  a string corresponding to the value of the parameter &lt;name&gt; as presented in&lt;br&gt;  the request (no url decoding is performed). this can be used for session&lt;br&gt;  stickiness based on a client id, to extract an application cookie passed as a&lt;br&gt;  url parameter, or in acls to apply some checks. note that the acl version of&lt;br&gt;  this fetch iterates over multiple parameters and will iteratively report all&lt;br&gt;  parameters values if no name is given&lt;/name&gt;&lt;/delim&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  acl derivatives :&lt;br&gt;    urlp(&lt;name&gt;[,&lt;delim&gt;])     : exact string match&lt;br&gt;    urlp_beg(&lt;name&gt;[,&lt;delim&gt;]) : prefix match&lt;br&gt;    urlp_dir(&lt;name&gt;[,&lt;delim&gt;]) : subdir match&lt;br&gt;    urlp_dom(&lt;name&gt;[,&lt;delim&gt;]) : domain match&lt;br&gt;    urlp_end(&lt;name&gt;[,&lt;delim&gt;]) : suffix match&lt;br&gt;    urlp_len(&lt;name&gt;[,&lt;delim&gt;]) : length match&lt;br&gt;    urlp_reg(&lt;name&gt;[,&lt;delim&gt;]) : regex match&lt;br&gt;    urlp_sub(&lt;name&gt;[,&lt;delim&gt;]) : substring match&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# match http://example.com/foo?phpsessionid=some_id
stick on urlp(phpsessionid)
# match http://example.com/foo;jsessionid=some_id
stick on urlp(jsessionid,;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;urlp_val([&lt;name&gt;[,&lt;delim&gt;])] : integer&lt;br&gt;  see “urlp” above. this one extracts the url parameter &lt;name&gt; in the request&lt;br&gt;  and converts it to an integer value. this can be used for session stickiness&lt;br&gt;  based on a user id for example, or with acls to match a page number or price.&lt;/name&gt;&lt;/delim&gt;&lt;/name&gt;&lt;/p&gt;
&lt;h2 id=&quot;7-4-pre-defined-acls&quot;&gt;&lt;a href=&quot;#7-4-pre-defined-acls&quot; class=&quot;headerlink&quot; title=&quot;7.4. pre-defined acls&quot;&gt;&lt;/a&gt;7.4. pre-defined acls&lt;/h2&gt;&lt;p&gt;some predefined acls are hard-coded so that they do not have to be declared in&lt;br&gt;every frontend which needs them. they all have their names in upper case in&lt;br&gt;order to avoid confusion. their equivalence is provided below.&lt;/p&gt;
&lt;p&gt;acl name          equivalent to                usage&lt;br&gt;—————+—————————–+———————————&lt;br&gt;false            always_false                  never match&lt;br&gt;http             req_proto_http                match if protocol is valid http&lt;br&gt;http_1.0         req_ver 1.0                   match http version 1.0&lt;br&gt;http_1.1         req_ver 1.1                   match http version 1.1&lt;br&gt;http_content     hdr_val(content-length) gt 0  match an existing content-length&lt;br&gt;http_url_abs     url_reg ^[^/:]&lt;em&gt;://            match absolute url with scheme&lt;br&gt;http_url_slash   url_beg /                     match url beginning with “/“&lt;br&gt;http_url_star    url     &lt;/em&gt;                     match url equal to “*”&lt;br&gt;localhost        src 127.0.0.1/8               match connection from local host&lt;br&gt;meth_connect     method  connect               match http connect method&lt;br&gt;meth_get         method  get head              match http get or head method&lt;br&gt;meth_head        method  head                  match http head method&lt;br&gt;meth_options     method  options               match http options method&lt;br&gt;meth_post        method  post                  match http post method&lt;br&gt;meth_trace       method  trace                 match http trace method&lt;br&gt;rdp_cookie       req_rdp_cookie_cnt gt 0       match presence of an rdp cookie&lt;br&gt;req_content      req_len gt 0                  match data in the request buffer&lt;br&gt;true             always_true                   always match&lt;br&gt;wait_end         wait_end                      wait for end of content analysis&lt;br&gt;—————+—————————–+———————————&lt;/p&gt;
&lt;h2 id=&quot;8-logging&quot;&gt;&lt;a href=&quot;#8-logging&quot; class=&quot;headerlink&quot; title=&quot;8. logging&quot;&gt;&lt;/a&gt;8. logging&lt;/h2&gt;&lt;p&gt;one of haproxy’s strong points certainly lies is its precise logs. it probably&lt;br&gt;provides the finest level of information available for such a product, which is&lt;br&gt;very important for troubleshooting complex environments. standard information&lt;br&gt;provided in logs include client ports, tcp/http state timers, precise session&lt;br&gt;state at termination and precise termination cause, information about decisions&lt;br&gt;to direct traffic to a server, and of course the ability to capture arbitrary&lt;br&gt;headers.&lt;/p&gt;
&lt;p&gt;in order to improve administrators reactivity, it offers a great transparency&lt;br&gt;about encountered problems, both internal and external, and it is possible to&lt;br&gt;send logs to different sources at the same time with different level filters :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;global process-level logs (system errors, start/stop, etc..)&lt;/li&gt;
&lt;li&gt;per-instance system and internal errors (lack of resource, bugs, …)&lt;/li&gt;
&lt;li&gt;per-instance external troubles (servers up/down, max connections)&lt;/li&gt;
&lt;li&gt;per-instance activity (client connections), either at the establishment or&lt;br&gt;at the termination.&lt;/li&gt;
&lt;li&gt;per-request control of log-level, eg:&lt;pre&gt;&lt;code&gt;http-request set-log-level silent if sensitive_request
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the ability to distribute different levels of logs to different log servers&lt;br&gt;allow several production teams to interact and to fix their problems as soon&lt;br&gt;as possible. for example, the system team might monitor system-wide errors,&lt;br&gt;while the application team might be monitoring the up/down for their servers in&lt;br&gt;real time, and the security team might analyze the activity logs with one hour&lt;br&gt;delay.&lt;/p&gt;
&lt;h2 id=&quot;8-1-log-levels&quot;&gt;&lt;a href=&quot;#8-1-log-levels&quot; class=&quot;headerlink&quot; title=&quot;8.1. log levels&quot;&gt;&lt;/a&gt;8.1. log levels&lt;/h2&gt;&lt;p&gt;tcp and http connections can be logged with information such as the date, time,&lt;br&gt;source ip address, destination address, connection duration, response times,&lt;br&gt;http request, http return code, number of bytes transmitted, conditions&lt;br&gt;in which the session ended, and even exchanged cookies values. for example&lt;br&gt;track a particular user’s problems. all messages may be sent to up to two&lt;br&gt;syslog servers. check the “log” keyword in section 4.2 for more information&lt;br&gt;about log facilities.&lt;/p&gt;
&lt;h2 id=&quot;8-2-log-formats&quot;&gt;&lt;a href=&quot;#8-2-log-formats&quot; class=&quot;headerlink&quot; title=&quot;8.2. log formats&quot;&gt;&lt;/a&gt;8.2. log formats&lt;/h2&gt;&lt;p&gt;haproxy supports 5 log formats. several fields are common between these formats&lt;br&gt;and will be detailed in the following sections. a few of them may vary&lt;br&gt;slightly with the configuration, due to indicators specific to certain&lt;br&gt;options. the supported formats are as follows :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the default format, which is very basic and very rarely used. it only&lt;br&gt;provides very basic information about the incoming connection at the moment&lt;br&gt;it is accepted : source ip:port, destination ip:port, and frontend-name.&lt;br&gt;this mode will eventually disappear so it will not be described to great&lt;br&gt;extents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the tcp format, which is more advanced. this format is enabled when “option&lt;br&gt;tcplog” is set on the frontend. haproxy will then usually wait for the&lt;br&gt;connection to terminate before logging. this format provides much richer&lt;br&gt;information, such as timers, connection counts, queue size, etc… this&lt;br&gt;format is recommended for pure tcp proxies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the http format, which is the most advanced for http proxying. this format&lt;br&gt;is enabled when “option httplog” is set on the frontend. it provides the&lt;br&gt;same information as the tcp format with some http-specific fields such as&lt;br&gt;the request, the status code, and captures of headers and cookies. this&lt;br&gt;format is recommended for http proxies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the clf http format, which is equivalent to the http format, but with the&lt;br&gt;fields arranged in the same order as the clf format. in this mode, all&lt;br&gt;timers, captures, flags, etc… appear one per field after the end of the&lt;br&gt;common fields, in the same order they appear in the standard http format.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the custom log format, allows you to make your own log line.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;next sections will go deeper into details for each of these formats. format&lt;br&gt;specification will be performed on a “field” basis. unless stated otherwise, a&lt;br&gt;field is a portion of text delimited by any number of spaces. since syslog&lt;br&gt;servers are susceptible of inserting fields at the beginning of a line, it is&lt;br&gt;always assumed that the first field is the one containing the process name and&lt;br&gt;identifier.&lt;/p&gt;
&lt;p&gt;note : since log lines may be quite long, the log examples in sections below&lt;br&gt;       might be broken into multiple lines. the example log lines will be&lt;br&gt;       prefixed with 3 closing angle brackets (‘&amp;gt;&amp;gt;&amp;gt;’) and each time a log is&lt;br&gt;       broken into multiple lines, each non-final line will end with a&lt;br&gt;       backslash (‘\’) and the next line will start indented by two characters.&lt;/p&gt;
&lt;h2 id=&quot;8-2-1-default-log-format&quot;&gt;&lt;a href=&quot;#8-2-1-default-log-format&quot; class=&quot;headerlink&quot; title=&quot;8.2.1. default log format&quot;&gt;&lt;/a&gt;8.2.1. default log format&lt;/h2&gt;&lt;p&gt;this format is used when no specific option is set. the log is emitted as soon&lt;br&gt;as the connection is accepted. one should note that this currently is the only&lt;br&gt;format which logs the request’s destination ip and ports.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        listen www&lt;br&gt;            mode http&lt;br&gt;            log global&lt;br&gt;            server srv1 127.0.0.1:8000&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; feb  6 12:12:09 localhost \
      haproxy[14385]: connect from 10.0.1.2:33312 to 10.0.3.31:8012 \
      (www/http)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  field   format                                extract from the example above&lt;br&gt;      1   process_name ‘[‘ pid ‘]:’                            haproxy[14385]:&lt;br&gt;      2   ‘connect from’                                          connect from&lt;br&gt;      3   source_ip ‘:’ source_port                             10.0.1.2:33312&lt;br&gt;      4   ‘to’                                                              to&lt;br&gt;      5   destination_ip ‘:’ destination_port                   10.0.3.31:8012&lt;br&gt;      6   ‘(‘ frontend_name ‘/‘ mode ‘)’                            (www/http)&lt;/p&gt;
&lt;p&gt;detailed fields description :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“source_ip” is the ip address of the client which initiated the connection.&lt;/li&gt;
&lt;li&gt;“source_port” is the tcp port of the client which initiated the connection.&lt;/li&gt;
&lt;li&gt;“destination_ip” is the ip address the client connected to.&lt;/li&gt;
&lt;li&gt;“destination_port” is the tcp port the client connected to.&lt;/li&gt;
&lt;li&gt;“frontend_name” is the name of the frontend (or listener) which received&lt;br&gt;and processed the connection.&lt;/li&gt;
&lt;li&gt;“mode is the mode the frontend is operating (tcp or http).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in case of a unix socket, the source and destination addresses are marked as&lt;br&gt;“unix:” and the ports reflect the internal id of the socket which accepted the&lt;br&gt;connection (the same id as reported in the stats).&lt;/p&gt;
&lt;p&gt;it is advised not to use this deprecated format for newer installations as it&lt;br&gt;will eventually disappear.&lt;/p&gt;
&lt;h2 id=&quot;8-2-2-tcp-log-format&quot;&gt;&lt;a href=&quot;#8-2-2-tcp-log-format&quot; class=&quot;headerlink&quot; title=&quot;8.2.2. tcp log format&quot;&gt;&lt;/a&gt;8.2.2. tcp log format&lt;/h2&gt;&lt;p&gt;the tcp format is used when “option tcplog” is specified in the frontend, and&lt;br&gt;is the recommended format for pure tcp proxies. it provides a lot of precious&lt;br&gt;information for troubleshooting. since this format includes timers and byte&lt;br&gt;counts, the log is normally emitted at the end of the session. it can be&lt;br&gt;emitted earlier if “option logasap” is specified, which makes sense in most&lt;br&gt;environments with long sessions such as remote terminals. sessions which match&lt;br&gt;the “monitor” rules are never logged. it is also possible not to emit logs for&lt;br&gt;sessions for which no data were exchanged between the client and the server, by&lt;br&gt;specifying “option dontlognull” in the frontend. successful connections will&lt;br&gt;not be logged if “option dontlog-normal” is specified in the frontend. a few&lt;br&gt;fields may slightly vary depending on some configuration options, those are&lt;br&gt;marked with a star (‘*’) after the field name below.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        frontend fnt&lt;br&gt;            mode tcp&lt;br&gt;            option tcplog&lt;br&gt;            log global&lt;br&gt;            default_backend bck&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    backend bck
        server srv1 127.0.0.1:8000

&amp;gt;&amp;gt;&amp;gt; feb  6 12:12:56 localhost \
      haproxy[14387]: 10.0.1.2:33313 [06/feb/2009:12:12:51.443] fnt \
      bck/srv1 0/0/5007 212 -- 0/0/0/0/3 0/0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  field   format                                extract from the example above&lt;br&gt;      1   process_name ‘[‘ pid ‘]:’                            haproxy[14387]:&lt;br&gt;      2   client_ip ‘:’ client_port                             10.0.1.2:33313&lt;br&gt;      3   ‘[‘ accept_date ‘]’                       [06/feb/2009:12:12:51.443]&lt;br&gt;      4   frontend_name                                                    fnt&lt;br&gt;      5   backend_name ‘/‘ server_name                                bck/srv1&lt;br&gt;      6   tw ‘/‘ tc ‘/‘ tt&lt;em&gt;                                           0/0/5007&lt;br&gt;      7   bytes_read&lt;/em&gt;                                                      212&lt;br&gt;      8   termination_state                                                 –&lt;br&gt;      9   actconn ‘/‘ feconn ‘/‘ beconn ‘/‘ srv_conn ‘/‘ retries*    0/0/0/0/3&lt;br&gt;     10   srv_queue ‘/‘ backend_queue                                      0/0&lt;/p&gt;
&lt;p&gt;detailed fields description :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“client_ip” is the ip address of the client which initiated the tcp&lt;br&gt;connection to haproxy. if the connection was accepted on a unix socket&lt;br&gt;instead, the ip address would be replaced with the word “unix”. note that&lt;br&gt;when the connection is accepted on a socket configured with “accept-proxy”&lt;br&gt;and the proxy protocol is correctly used, then the logs will reflect the&lt;br&gt;forwarded connection’s information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“client_port” is the tcp port of the client which initiated the connection.&lt;br&gt;if the connection was accepted on a unix socket instead, the port would be&lt;br&gt;replaced with the id of the accepting socket, which is also reported in the&lt;br&gt;stats interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“accept_date” is the exact date when the connection was received by haproxy&lt;br&gt;(which might be very slightly different from the date observed on the&lt;br&gt;network if there was some queuing in the system’s backlog). this is usually&lt;br&gt;the same date which may appear in any upstream firewall’s log.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“frontend_name” is the name of the frontend (or listener) which received&lt;br&gt;and processed the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“backend_name” is the name of the backend (or listener) which was selected&lt;br&gt;to manage the connection to the server. this will be the same as the&lt;br&gt;frontend if no switching rule has been applied, which is common for tcp&lt;br&gt;applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“server_name” is the name of the last server to which the connection was&lt;br&gt;sent, which might differ from the first one if there were connection errors&lt;br&gt;and a redispatch occurred. note that this server belongs to the backend&lt;br&gt;which processed the request. if the connection was aborted before reaching&lt;br&gt;a server, “&lt;nosrv&gt;“ is indicated instead of a server name.&lt;/nosrv&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tw” is the total time in milliseconds spent waiting in the various queues.&lt;br&gt;it can be “-1” if the connection was aborted before reaching the queue.&lt;br&gt;see “timers” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tc” is the total time in milliseconds spent waiting for the connection to&lt;br&gt;establish to the final server, including retries. it can be “-1” if the&lt;br&gt;connection was aborted before a connection could be established. see&lt;br&gt;“timers” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tt” is the total time in milliseconds elapsed between the accept and the&lt;br&gt;last close. it covers all possible processing. there is one exception, if&lt;br&gt;“option logasap” was specified, then the time counting stops at the moment&lt;br&gt;the log is emitted. in this case, a ‘+’ sign is prepended before the value,&lt;br&gt;indicating that the final one will be larger. see “timers” below for more&lt;br&gt;details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“bytes_read” is the total number of bytes transmitted from the server to&lt;br&gt;the client when the log is emitted. if “option logasap” is specified, the&lt;br&gt;this value will be prefixed with a ‘+’ sign indicating that the final one&lt;br&gt;may be larger. please note that this value is a 64-bit counter, so log&lt;br&gt;analysis tools must be able to handle it without overflowing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“termination_state” is the condition the session was in when the session&lt;br&gt;ended. this indicates the session state, which side caused the end of&lt;br&gt;session to happen, and for what reason (timeout, error, …). the normal&lt;br&gt;flags should be “–”, indicating the session was closed by either end with&lt;br&gt;no data remaining in buffers. see below “session state at disconnection”&lt;br&gt;for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“actconn” is the total number of concurrent connections on the process when&lt;br&gt;the session was logged. it is useful to detect when some per-process system&lt;br&gt;limits have been reached. for instance, if actconn is close to 512 when&lt;br&gt;multiple connection errors occur, chances are high that the system limits&lt;br&gt;the process to use a maximum of 1024 file descriptors and that all of them&lt;br&gt;are used. see section 3 “global parameters” to find how to tune the system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“feconn” is the total number of concurrent connections on the frontend when&lt;br&gt;the session was logged. it is useful to estimate the amount of resource&lt;br&gt;required to sustain high loads, and to detect when the frontend’s “maxconn”&lt;br&gt;has been reached. most often when this value increases by huge jumps, it is&lt;br&gt;because there is congestion on the backend servers, but sometimes it can be&lt;br&gt;caused by a denial of service attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“beconn” is the total number of concurrent connections handled by the&lt;br&gt;backend when the session was logged. it includes the total number of&lt;br&gt;concurrent connections active on servers as well as the number of&lt;br&gt;connections pending in queues. it is useful to estimate the amount of&lt;br&gt;additional servers needed to support high loads for a given application.&lt;br&gt;most often when this value increases by huge jumps, it is because there is&lt;br&gt;congestion on the backend servers, but sometimes it can be caused by a&lt;br&gt;denial of service attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“srv_conn” is the total number of concurrent connections still active on&lt;br&gt;the server when the session was logged. it can never exceed the server’s&lt;br&gt;configured “maxconn” parameter. if this value is very often close or equal&lt;br&gt;to the server’s “maxconn”, it means that traffic regulation is involved a&lt;br&gt;lot, meaning that either the server’s maxconn value is too low, or that&lt;br&gt;there aren’t enough servers to process the load with an optimal response&lt;br&gt;time. when only one of the server’s “srv_conn” is high, it usually means&lt;br&gt;that this server has some trouble causing the connections to take longer to&lt;br&gt;be processed than on other servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“retries” is the number of connection retries experienced by this session&lt;br&gt;when trying to connect to the server. it must normally be zero, unless a&lt;br&gt;server is being stopped at the same moment the connection was attempted.&lt;br&gt;frequent retries generally indicate either a network problem between&lt;br&gt;haproxy and the server, or a misconfigured system backlog on the server&lt;br&gt;preventing new connections from being queued. this field may optionally be&lt;br&gt;prefixed with a ‘+’ sign, indicating that the session has experienced a&lt;br&gt;redispatch after the maximal retry count has been reached on the initial&lt;br&gt;server. in this case, the server name appearing in the log is the one the&lt;br&gt;connection was redispatched to, and not the first one, though both may&lt;br&gt;sometimes be the same in case of hashing for instance. so as a general rule&lt;br&gt;of thumb, when a ‘+’ is present in front of the retry count, this count&lt;br&gt;should not be attributed to the logged server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“srv_queue” is the total number of requests which were processed before&lt;br&gt;this one in the server queue. it is zero when the request has not gone&lt;br&gt;through the server queue. it makes it possible to estimate the approximate&lt;br&gt;server’s response time by dividing the time spent in queue by the number of&lt;br&gt;requests in the queue. it is worth noting that if a session experiences a&lt;br&gt;redispatch and passes through two server queues, their positions will be&lt;br&gt;cumulated. a request should not pass through both the server queue and the&lt;br&gt;backend queue unless a redispatch occurs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“backend_queue” is the total number of requests which were processed before&lt;br&gt;this one in the backend’s global queue. it is zero when the request has not&lt;br&gt;gone through the global queue. it makes it possible to estimate the average&lt;br&gt;queue length, which easily translates into a number of missing servers when&lt;br&gt;divided by a server’s “maxconn” parameter. it is worth noting that if a&lt;br&gt;session experiences a redispatch, it may pass twice in the backend’s queue,&lt;br&gt;and then both positions will be cumulated. a request should not pass&lt;br&gt;through both the server queue and the backend queue unless a redispatch&lt;br&gt;occurs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-2-3-http-log-format&quot;&gt;&lt;a href=&quot;#8-2-3-http-log-format&quot; class=&quot;headerlink&quot; title=&quot;8.2.3. http log format&quot;&gt;&lt;/a&gt;8.2.3. http log format&lt;/h2&gt;&lt;p&gt;the http format is the most complete and the best suited for http proxies. it&lt;br&gt;is enabled by when “option httplog” is specified in the frontend. it provides&lt;br&gt;the same level of information as the tcp format with additional features which&lt;br&gt;are specific to the http protocol. just like the tcp format, the log is usually&lt;br&gt;emitted at the end of the session, unless “option logasap” is specified, which&lt;br&gt;generally only makes sense for download sites. a session which matches the&lt;br&gt;“monitor” rules will never logged. it is also possible not to log sessions for&lt;br&gt;which no data were sent by the client by specifying “option dontlognull” in the&lt;br&gt;frontend. successful connections will not be logged if “option dontlog-normal”&lt;br&gt;is specified in the frontend.&lt;/p&gt;
&lt;p&gt;most fields are shared with the tcp log, some being different. a few fields may&lt;br&gt;slightly vary depending on some configuration options. those ones are marked&lt;br&gt;with a star (‘*’) after the field name below.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        frontend http-in&lt;br&gt;            mode http&lt;br&gt;            option httplog&lt;br&gt;            log global&lt;br&gt;            default_backend bck&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    backend static
        server srv1 127.0.0.1:8000

&amp;gt;&amp;gt;&amp;gt; feb  6 12:14:14 localhost \
      haproxy[14389]: 10.0.1.2:33317 [06/feb/2009:12:14:14.655] http-in \
      static/srv1 10/0/30/69/109 200 2750 - - ---- 1/1/1/1/0 0/0 {1wt.eu} \
      {} &amp;quot;get /index.html http/1.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  field   format                                extract from the example above&lt;br&gt;      1   process_name ‘[‘ pid ‘]:’                            haproxy[14389]:&lt;br&gt;      2   client_ip ‘:’ client_port                             10.0.1.2:33317&lt;br&gt;      3   ‘[‘ accept_date ‘]’                       [06/feb/2009:12:14:14.655]&lt;br&gt;      4   frontend_name                                                http-in&lt;br&gt;      5   backend_name ‘/‘ server_name                             static/srv1&lt;br&gt;      6   tq ‘/‘ tw ‘/‘ tc ‘/‘ tr ‘/‘ tt&lt;em&gt;                       10/0/30/69/109&lt;br&gt;      7   status_code                                                      200&lt;br&gt;      8   bytes_read&lt;/em&gt;                                                     2750&lt;br&gt;      9   captured_request_cookie                                            -&lt;br&gt;     10   captured_response_cookie                                           -&lt;br&gt;     11   termination_state                                               —-&lt;br&gt;     12   actconn ‘/‘ feconn ‘/‘ beconn ‘/‘ srv_conn ‘/‘ retries&lt;em&gt;    1/1/1/1/0&lt;br&gt;     13   srv_queue ‘/‘ backend_queue                                      0/0&lt;br&gt;     14   ‘{‘ captured_request_headers&lt;/em&gt; ‘}’                   {haproxy.1wt.eu}&lt;br&gt;     15   ‘{‘ captured_response_headers* ‘}’                                {}&lt;br&gt;     16   ‘“‘ http_request ‘“‘                      “get /index.html http/1.1”&lt;/p&gt;
&lt;p&gt;detailed fields description :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;“client_ip” is the ip address of the client which initiated the tcp&lt;br&gt;connection to haproxy. if the connection was accepted on a unix socket&lt;br&gt;instead, the ip address would be replaced with the word “unix”. note that&lt;br&gt;when the connection is accepted on a socket configured with “accept-proxy”&lt;br&gt;and the proxy protocol is correctly used, then the logs will reflect the&lt;br&gt;forwarded connection’s information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“client_port” is the tcp port of the client which initiated the connection.&lt;br&gt;if the connection was accepted on a unix socket instead, the port would be&lt;br&gt;replaced with the id of the accepting socket, which is also reported in the&lt;br&gt;stats interface.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“accept_date” is the exact date when the tcp connection was received by&lt;br&gt;haproxy (which might be very slightly different from the date observed on&lt;br&gt;the network if there was some queuing in the system’s backlog). this is&lt;br&gt;usually the same date which may appear in any upstream firewall’s log. this&lt;br&gt;does not depend on the fact that the client has sent the request or not.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“frontend_name” is the name of the frontend (or listener) which received&lt;br&gt;and processed the connection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“backend_name” is the name of the backend (or listener) which was selected&lt;br&gt;to manage the connection to the server. this will be the same as the&lt;br&gt;frontend if no switching rule has been applied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“server_name” is the name of the last server to which the connection was&lt;br&gt;sent, which might differ from the first one if there were connection errors&lt;br&gt;and a redispatch occurred. note that this server belongs to the backend&lt;br&gt;which processed the request. if the request was aborted before reaching a&lt;br&gt;server, “&lt;nosrv&gt;“ is indicated instead of a server name. if the request was&lt;br&gt;intercepted by the stats subsystem, “&lt;stats&gt;“ is indicated instead.&lt;/stats&gt;&lt;/nosrv&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tq” is the total time in milliseconds spent waiting for the client to send&lt;br&gt;a full http request, not counting data. it can be “-1” if the connection&lt;br&gt;was aborted before a complete request could be received. it should always&lt;br&gt;be very small because a request generally fits in one single packet. large&lt;br&gt;times here generally indicate network trouble between the client and&lt;br&gt;haproxy. see “timers” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tw” is the total time in milliseconds spent waiting in the various queues.&lt;br&gt;it can be “-1” if the connection was aborted before reaching the queue.&lt;br&gt;see “timers” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tc” is the total time in milliseconds spent waiting for the connection to&lt;br&gt;establish to the final server, including retries. it can be “-1” if the&lt;br&gt;request was aborted before a connection could be established. see “timers”&lt;br&gt;below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tr” is the total time in milliseconds spent waiting for the server to send&lt;br&gt;a full http response, not counting data. it can be “-1” if the request was&lt;br&gt;aborted before a complete response could be received. it generally matches&lt;br&gt;the server’s processing time for the request, though it may be altered by&lt;br&gt;the amount of data sent by the client to the server. large times here on&lt;br&gt;“get” requests generally indicate an overloaded server. see “timers” below&lt;br&gt;for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“tt” is the total time in milliseconds elapsed between the accept and the&lt;br&gt;last close. it covers all possible processing. there is one exception, if&lt;br&gt;“option logasap” was specified, then the time counting stops at the moment&lt;br&gt;the log is emitted. in this case, a ‘+’ sign is prepended before the value,&lt;br&gt;indicating that the final one will be larger. see “timers” below for more&lt;br&gt;details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“status_code” is the http status code returned to the client. this status&lt;br&gt;is generally set by the server, but it might also be set by haproxy when&lt;br&gt;the server cannot be reached or when its response is blocked by haproxy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“bytes_read” is the total number of bytes transmitted to the client when&lt;br&gt;the log is emitted. this does include http headers. if “option logasap” is&lt;br&gt;specified, the this value will be prefixed with a ‘+’ sign indicating that&lt;br&gt;the final one may be larger. please note that this value is a 64-bit&lt;br&gt;counter, so log analysis tools must be able to handle it without&lt;br&gt;overflowing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“captured_request_cookie” is an optional “name=value” entry indicating that&lt;br&gt;the client had this cookie in the request. the cookie name and its maximum&lt;br&gt;length are defined by the “capture cookie” statement in the frontend&lt;br&gt;configuration. the field is a single dash (‘-‘) when the option is not&lt;br&gt;set. only one cookie may be captured, it is generally used to track session&lt;br&gt;id exchanges between a client and a server to detect session crossing&lt;br&gt;between clients due to application bugs. for more details, please consult&lt;br&gt;the section “capturing http headers and cookies” below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“captured_response_cookie” is an optional “name=value” entry indicating&lt;br&gt;that the server has returned a cookie with its response. the cookie name&lt;br&gt;and its maximum length are defined by the “capture cookie” statement in the&lt;br&gt;frontend configuration. the field is a single dash (‘-‘) when the option is&lt;br&gt;not set. only one cookie may be captured, it is generally used to track&lt;br&gt;session id exchanges between a client and a server to detect session&lt;br&gt;crossing between clients due to application bugs. for more details, please&lt;br&gt;consult the section “capturing http headers and cookies” below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“termination_state” is the condition the session was in when the session&lt;br&gt;ended. this indicates the session state, which side caused the end of&lt;br&gt;session to happen, for what reason (timeout, error, …), just like in tcp&lt;br&gt;logs, and information about persistence operations on cookies in the last&lt;br&gt;two characters. the normal flags should begin with “–”, indicating the&lt;br&gt;session was closed by either end with no data remaining in buffers. see&lt;br&gt;below “session state at disconnection” for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“actconn” is the total number of concurrent connections on the process when&lt;br&gt;the session was logged. it is useful to detect when some per-process system&lt;br&gt;limits have been reached. for instance, if actconn is close to 512 or 1024&lt;br&gt;when multiple connection errors occur, chances are high that the system&lt;br&gt;limits the process to use a maximum of 1024 file descriptors and that all&lt;br&gt;of them are used. see section 3 “global parameters” to find how to tune the&lt;br&gt;system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“feconn” is the total number of concurrent connections on the frontend when&lt;br&gt;the session was logged. it is useful to estimate the amount of resource&lt;br&gt;required to sustain high loads, and to detect when the frontend’s “maxconn”&lt;br&gt;has been reached. most often when this value increases by huge jumps, it is&lt;br&gt;because there is congestion on the backend servers, but sometimes it can be&lt;br&gt;caused by a denial of service attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“beconn” is the total number of concurrent connections handled by the&lt;br&gt;backend when the session was logged. it includes the total number of&lt;br&gt;concurrent connections active on servers as well as the number of&lt;br&gt;connections pending in queues. it is useful to estimate the amount of&lt;br&gt;additional servers needed to support high loads for a given application.&lt;br&gt;most often when this value increases by huge jumps, it is because there is&lt;br&gt;congestion on the backend servers, but sometimes it can be caused by a&lt;br&gt;denial of service attack.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“srv_conn” is the total number of concurrent connections still active on&lt;br&gt;the server when the session was logged. it can never exceed the server’s&lt;br&gt;configured “maxconn” parameter. if this value is very often close or equal&lt;br&gt;to the server’s “maxconn”, it means that traffic regulation is involved a&lt;br&gt;lot, meaning that either the server’s maxconn value is too low, or that&lt;br&gt;there aren’t enough servers to process the load with an optimal response&lt;br&gt;time. when only one of the server’s “srv_conn” is high, it usually means&lt;br&gt;that this server has some trouble causing the requests to take longer to be&lt;br&gt;processed than on other servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“retries” is the number of connection retries experienced by this session&lt;br&gt;when trying to connect to the server. it must normally be zero, unless a&lt;br&gt;server is being stopped at the same moment the connection was attempted.&lt;br&gt;frequent retries generally indicate either a network problem between&lt;br&gt;haproxy and the server, or a misconfigured system backlog on the server&lt;br&gt;preventing new connections from being queued. this field may optionally be&lt;br&gt;prefixed with a ‘+’ sign, indicating that the session has experienced a&lt;br&gt;redispatch after the maximal retry count has been reached on the initial&lt;br&gt;server. in this case, the server name appearing in the log is the one the&lt;br&gt;connection was redispatched to, and not the first one, though both may&lt;br&gt;sometimes be the same in case of hashing for instance. so as a general rule&lt;br&gt;of thumb, when a ‘+’ is present in front of the retry count, this count&lt;br&gt;should not be attributed to the logged server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“srv_queue” is the total number of requests which were processed before&lt;br&gt;this one in the server queue. it is zero when the request has not gone&lt;br&gt;through the server queue. it makes it possible to estimate the approximate&lt;br&gt;server’s response time by dividing the time spent in queue by the number of&lt;br&gt;requests in the queue. it is worth noting that if a session experiences a&lt;br&gt;redispatch and passes through two server queues, their positions will be&lt;br&gt;cumulated. a request should not pass through both the server queue and the&lt;br&gt;backend queue unless a redispatch occurs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“backend_queue” is the total number of requests which were processed before&lt;br&gt;this one in the backend’s global queue. it is zero when the request has not&lt;br&gt;gone through the global queue. it makes it possible to estimate the average&lt;br&gt;queue length, which easily translates into a number of missing servers when&lt;br&gt;divided by a server’s “maxconn” parameter. it is worth noting that if a&lt;br&gt;session experiences a redispatch, it may pass twice in the backend’s queue,&lt;br&gt;and then both positions will be cumulated. a request should not pass&lt;br&gt;through both the server queue and the backend queue unless a redispatch&lt;br&gt;occurs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“captured_request_headers” is a list of headers captured in the request due&lt;br&gt;to the presence of the “capture request header” statement in the frontend.&lt;br&gt;multiple headers can be captured, they will be delimited by a vertical bar&lt;br&gt;(‘|’). when no capture is enabled, the braces do not appear, causing a&lt;br&gt;shift of remaining fields. it is important to note that this field may&lt;br&gt;contain spaces, and that using it requires a smarter log parser than when&lt;br&gt;it’s not used. please consult the section “capturing http headers and&lt;br&gt;cookies” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“captured_response_headers” is a list of headers captured in the response&lt;br&gt;due to the presence of the “capture response header” statement in the&lt;br&gt;frontend. multiple headers can be captured, they will be delimited by a&lt;br&gt;vertical bar (‘|’). when no capture is enabled, the braces do not appear,&lt;br&gt;causing a shift of remaining fields. it is important to note that this&lt;br&gt;field may contain spaces, and that using it requires a smarter log parser&lt;br&gt;than when it’s not used. please consult the section “capturing http headers&lt;br&gt;and cookies” below for more details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“http_request” is the complete http request line, including the method,&lt;br&gt;request and http version string. non-printable characters are encoded (see&lt;br&gt;below the section “non-printable characters”). this is always the last&lt;br&gt;field, and it is always delimited by quotes and is the only one which can&lt;br&gt;contain quotes. if new fields are added to the log format, they will be&lt;br&gt;added before this field. this field might be truncated if the request is&lt;br&gt;huge and does not fit in the standard syslog buffer (1024 characters). this&lt;br&gt;is the reason why this field must always remain the last one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-2-4-custom-log-format&quot;&gt;&lt;a href=&quot;#8-2-4-custom-log-format&quot; class=&quot;headerlink&quot; title=&quot;8.2.4. custom log format&quot;&gt;&lt;/a&gt;8.2.4. custom log format&lt;/h2&gt;&lt;p&gt;the directive log-format allows you to customize the logs in http mode and tcp&lt;br&gt;mode. it takes a string as argument.&lt;/p&gt;
&lt;p&gt;haproxy understands some log format variables. % precedes log format variables.&lt;br&gt;variables can take arguments using braces (‘{}’), and multiple arguments are&lt;br&gt;separated by commas within the braces. flags may be added or removed by&lt;br&gt;prefixing them with a ‘+’ or ‘-‘ sign.&lt;/p&gt;
&lt;p&gt;special variable “%o” may be used to propagate its flags to all other&lt;br&gt;variables on the same format string. this is particularly handy with quoted&lt;br&gt;string formats (“q”).&lt;/p&gt;
&lt;p&gt;if a variable is named between square brackets (‘[‘ .. ‘]’) then it is used&lt;br&gt;as a sample expression rule (see section 7.3). this it useful to add some&lt;br&gt;less common information such as the client’s ssl certificate’s dn, or to log&lt;br&gt;the key that would be used to store an entry into a stick table.&lt;/p&gt;
&lt;p&gt;note: spaces must be escaped. a space character is considered as a separator.&lt;br&gt;in order to emit a verbatim ‘%’, it must be preceded by another ‘%’ resulting&lt;br&gt;in ‘%%’. haproxy will automatically merge consecutive separators.&lt;/p&gt;
&lt;p&gt;flags are :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;q: quote a string&lt;/li&gt;
&lt;li&gt;&lt;p&gt;x: hexadecimal representation (ips, ports, %ts, %rt, %pid)&lt;/p&gt;
&lt;p&gt;example:&lt;/p&gt;
&lt;p&gt;log-format %t\ %t\ some\ text&lt;br&gt;log-format %{+q}o\ %t\ %s\ %{-q}r&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;at the moment, the default http format is defined this way :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %tq/%tw/%tc/%tr/%tt\ %st\ %b\ %cc\ \
           %cs\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+q}r
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the default clf format is defined this way :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log-format %{+q}o\ %{-q}ci\ -\ -\ [%t]\ %r\ %st\ %b\ \&amp;quot;\&amp;quot;\ \&amp;quot;\&amp;quot;\ %cp\ \
           %ms\ %ft\ %b\ %s\ \%tq\ %tw\ %tc\ %tr\ %tt\ %tsc\ %ac\ %fc\ \
           %bc\ %sc\ %rc\ %sq\ %bq\ %cc\ %cs\ \%hrl\ %hsl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and the default tcp format is defined this way :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;log-format %ci:%cp\ [%t]\ %ft\ %b/%s\ %tw/%tc/%tt\ %b\ %ts\ \
           %ac/%fc/%bc/%sc/%rc\ %sq/%bq
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;please refer to the table below for currently defined variables :&lt;/p&gt;
&lt;p&gt;  +—+——+———————————————–+————-+&lt;br&gt;  | r | var  | field name (8.2.2 and 8.2.3 for description)  | type        |&lt;br&gt;  +—+——+———————————————–+————-+&lt;br&gt;  |   | %o   | special variable, apply flags on all next var |             |&lt;br&gt;  +—+——+———————————————–+————-+&lt;br&gt;  |   | %b   | bytes_read           (from server to client)  | numeric     |&lt;br&gt;  | h | %cc  | captured_request_cookie                       | string      |&lt;br&gt;  | h | %cs  | captured_response_cookie                      | string      |&lt;br&gt;  |   | %h   | hostname                                      | string      |&lt;br&gt;  | h | %hm  | http method (ex: post)                        | string      |&lt;br&gt;  | h | %hp  | http request uri without query string (path)  | string      |&lt;br&gt;  | h | %hu  | http request uri (ex: /foo?bar=baz)           | string      |&lt;br&gt;  | h | %hv  | http version (ex: http/1.0)                   | string      |&lt;br&gt;  |   | %id  | unique-id                                     | string      |&lt;br&gt;  |   | %st  | status_code                                   | numeric     |&lt;br&gt;  |   | %t   | gmt_date_time                                 | date        |&lt;br&gt;  |   | %tc  | tc                                            | numeric     |&lt;br&gt;  |   | %tl  | local_date_time                               | date        |&lt;br&gt;  | h | %tq  | tq                                            | numeric     |&lt;br&gt;  | h | %tr  | tr                                            | numeric     |&lt;br&gt;  |   | %ts  | timestamp                                     | numeric     |&lt;br&gt;  |   | %tt  | tt                                            | numeric     |&lt;br&gt;  |   | %tw  | tw                                            | numeric     |&lt;br&gt;  |   | %u   | bytes_uploaded       (from client to server)  | numeric     |&lt;br&gt;  |   | %ac  | actconn                                       | numeric     |&lt;br&gt;  |   | %b   | backend_name                                  | string      |&lt;br&gt;  |   | %bc  | beconn      (backend concurrent connections)  | numeric     |&lt;br&gt;  |   | %bi  | backend_source_ip       (connecting address)  | ip          |&lt;br&gt;  |   | %bp  | backend_source_port     (connecting address)  | numeric     |&lt;br&gt;  |   | %bq  | backend_queue                                 | numeric     |&lt;br&gt;  |   | %ci  | client_ip                 (accepted address)  | ip          |&lt;br&gt;  |   | %cp  | client_port               (accepted address)  | numeric     |&lt;br&gt;  |   | %f   | frontend_name                                 | string      |&lt;br&gt;  |   | %fc  | feconn     (frontend concurrent connections)  | numeric     |&lt;br&gt;  |   | %fi  | frontend_ip              (accepting address)  | ip          |&lt;br&gt;  |   | %fp  | frontend_port            (accepting address)  | numeric     |&lt;br&gt;  |   | %ft  | frontend_name_transport (‘~’ suffix for ssl)  | string      |&lt;br&gt;  |   | %lc  | frontend_log_counter                          | numeric     |&lt;br&gt;  |   | %hr  | captured_request_headers default style        | string      |&lt;br&gt;  |   | %hrl | captured_request_headers clf style            | string list |&lt;br&gt;  |   | %hs  | captured_response_headers default style       | string      |&lt;br&gt;  |   | %hsl | captured_response_headers clf style           | string list |&lt;br&gt;  |   | %ms  | accept date milliseconds                      | numeric     |&lt;br&gt;  |   | %pid | pid                                           | numeric     |&lt;br&gt;  | h | %r   | http_request                                  | string      |&lt;br&gt;  |   | %rc  | retries                                       | numeric     |&lt;br&gt;  |   | %rt  | request_counter (http req or tcp session)     | numeric     |&lt;br&gt;  |   | %s   | server_name                                   | string      |&lt;br&gt;  |   | %sc  | srv_conn     (server concurrent connections)  | numeric     |&lt;br&gt;  |   | %si  | server_ip                   (target address)  | ip          |&lt;br&gt;  |   | %sp  | server_port                 (target address)  | numeric     |&lt;br&gt;  |   | %sq  | srv_queue                                     | numeric     |&lt;br&gt;  | s | %sslc| ssl_ciphers (ex: aes-sha)                     | string      |&lt;br&gt;  | s | %sslv| ssl_version (ex: tlsv1)                       | string      |&lt;br&gt;  |   | %t   | date_time      (with millisecond resolution)  | date        |&lt;br&gt;  |   | %ts  | termination_state                             | string      |&lt;br&gt;  | h | %tsc | termination_state with cookie status          | string      |&lt;br&gt;  +—+——+———————————————–+————-+&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r = restrictions : h = mode http only ; s = ssl only
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-2-5-error-log-format&quot;&gt;&lt;a href=&quot;#8-2-5-error-log-format&quot; class=&quot;headerlink&quot; title=&quot;8.2.5. error log format&quot;&gt;&lt;/a&gt;8.2.5. error log format&lt;/h2&gt;&lt;p&gt;when an incoming connection fails due to an ssl handshake or an invalid proxy&lt;br&gt;protocol header, haproxy will log the event using a shorter, fixed line format.&lt;br&gt;by default, logs are emitted at the log_info level, unless the option&lt;br&gt;“log-separate-errors” is set in the backend, in which case the log_err level&lt;br&gt;will be used. connections on which no data are exchanged (eg: probes) are not&lt;br&gt;logged if the “dontlognull” option is set.&lt;/p&gt;
&lt;p&gt;the format looks like this :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; dec  3 18:27:14 localhost \
      haproxy[6103]: 127.0.0.1:56059 [03/dec/2012:17:35:10.380] frt/f1: \
      connection error during ssl handshake
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  field   format                                extract from the example above&lt;br&gt;      1   process_name ‘[‘ pid ‘]:’                             haproxy[6103]:&lt;br&gt;      2   client_ip ‘:’ client_port                            127.0.0.1:56059&lt;br&gt;      3   ‘[‘ accept_date ‘]’                       [03/dec/2012:17:35:10.380]&lt;br&gt;      4   frontend_name “/“ bind_name “:”                              frt/f1:&lt;br&gt;      5   message                        connection error during ssl handshake&lt;/p&gt;
&lt;p&gt;these fields just provide minimal information to help debugging connection&lt;br&gt;failures.&lt;/p&gt;
&lt;h2 id=&quot;8-3-advanced-logging-options&quot;&gt;&lt;a href=&quot;#8-3-advanced-logging-options&quot; class=&quot;headerlink&quot; title=&quot;8.3. advanced logging options&quot;&gt;&lt;/a&gt;8.3. advanced logging options&lt;/h2&gt;&lt;p&gt;some advanced logging options are often looked for but are not easy to find out&lt;br&gt;just by looking at the various options. here is an entry point for the few&lt;br&gt;options which can enable better logging. please refer to the keywords reference&lt;br&gt;for more information about their usage.&lt;/p&gt;
&lt;h2 id=&quot;8-3-1-disabling-logging-of-external-tests&quot;&gt;&lt;a href=&quot;#8-3-1-disabling-logging-of-external-tests&quot; class=&quot;headerlink&quot; title=&quot;8.3.1. disabling logging of external tests&quot;&gt;&lt;/a&gt;8.3.1. disabling logging of external tests&lt;/h2&gt;&lt;p&gt;it is quite common to have some monitoring tools perform health checks on&lt;br&gt;haproxy. sometimes it will be a layer 3 load-balancer such as lvs or any&lt;br&gt;commercial load-balancer, and sometimes it will simply be a more complete&lt;br&gt;monitoring system such as nagios. when the tests are very frequent, users often&lt;br&gt;ask how to disable logging for those checks. there are three possibilities :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if connections come from everywhere and are just tcp probes, it is often&lt;br&gt;desired to simply disable logging of connections without data exchange, by&lt;br&gt;setting “option dontlognull” in the frontend. it also disables logging of&lt;br&gt;port scans, which may or may not be desired.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the connection come from a known source network, use “monitor-net” to&lt;br&gt;declare this network as monitoring only. any host in this network will then&lt;br&gt;only be able to perform health checks, and their requests will not be&lt;br&gt;logged. this is generally appropriate to designate a list of equipment&lt;br&gt;such as other load-balancers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if the tests are performed on a known uri, use “monitor-uri” to declare&lt;br&gt;this uri as dedicated to monitoring. any host sending this request will&lt;br&gt;only get the result of a health-check, and the request will not be logged.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;8-3-2-logging-before-waiting-for-the-session-to-terminate&quot;&gt;&lt;a href=&quot;#8-3-2-logging-before-waiting-for-the-session-to-terminate&quot; class=&quot;headerlink&quot; title=&quot;8.3.2. logging before waiting for the session to terminate&quot;&gt;&lt;/a&gt;8.3.2. logging before waiting for the session to terminate&lt;/h2&gt;&lt;p&gt;the problem with logging at end of connection is that you have no clue about&lt;br&gt;what is happening during very long sessions, such as remote terminal sessions&lt;br&gt;or large file downloads. this problem can be worked around by specifying&lt;br&gt;“option logasap” in the frontend. haproxy will then log as soon as possible,&lt;br&gt;just before data transfer begins. this means that in case of tcp, it will still&lt;br&gt;log the connection status to the server, and in case of http, it will log just&lt;br&gt;after processing the server headers. in this case, the number of bytes reported&lt;br&gt;is the number of header bytes sent to the client. in order to avoid confusion&lt;br&gt;with normal logs, the total time field and the number of bytes are prefixed&lt;br&gt;with a ‘+’ sign which means that real numbers are certainly larger.&lt;/p&gt;
&lt;h2 id=&quot;8-3-3-raising-log-level-upon-errors&quot;&gt;&lt;a href=&quot;#8-3-3-raising-log-level-upon-errors&quot; class=&quot;headerlink&quot; title=&quot;8.3.3. raising log level upon errors&quot;&gt;&lt;/a&gt;8.3.3. raising log level upon errors&lt;/h2&gt;&lt;p&gt;sometimes it is more convenient to separate normal traffic from errors logs,&lt;br&gt;for instance in order to ease error monitoring from log files. when the option&lt;br&gt;“log-separate-errors” is used, connections which experience errors, timeouts,&lt;br&gt;retries, redispatches or http status codes 5xx will see their syslog level&lt;br&gt;raised from “info” to “err”. this will help a syslog daemon store the log in&lt;br&gt;a separate file. it is very important to keep the errors in the normal traffic&lt;br&gt;file too, so that log ordering is not altered. you should also be careful if&lt;br&gt;you already have configured your syslog daemon to store all logs higher than&lt;br&gt;“notice” in an “admin” file, because the “err” level is higher than “notice”.&lt;/p&gt;
&lt;h2 id=&quot;8-3-4-disabling-logging-of-successful-connections&quot;&gt;&lt;a href=&quot;#8-3-4-disabling-logging-of-successful-connections&quot; class=&quot;headerlink&quot; title=&quot;8.3.4. disabling logging of successful connections&quot;&gt;&lt;/a&gt;8.3.4. disabling logging of successful connections&lt;/h2&gt;&lt;p&gt;although this may sound strange at first, some large sites have to deal with&lt;br&gt;multiple thousands of logs per second and are experiencing difficulties keeping&lt;br&gt;them intact for a long time or detecting errors within them. if the option&lt;br&gt;“dontlog-normal” is set on the frontend, all normal connections will not be&lt;br&gt;logged. in this regard, a normal connection is defined as one without any&lt;br&gt;error, timeout, retry nor redispatch. in http, the status code is checked too,&lt;br&gt;and a response with a status 5xx is not considered normal and will be logged&lt;br&gt;too. of course, doing is is really discouraged as it will remove most of the&lt;br&gt;useful information from the logs. do this only if you have no other&lt;br&gt;alternative.&lt;/p&gt;
&lt;h2 id=&quot;8-4-timing-events&quot;&gt;&lt;a href=&quot;#8-4-timing-events&quot; class=&quot;headerlink&quot; title=&quot;8.4. timing events&quot;&gt;&lt;/a&gt;8.4. timing events&lt;/h2&gt;&lt;p&gt;timers provide a great help in troubleshooting network problems. all values are&lt;br&gt;reported in milliseconds (ms). these timers should be used in conjunction with&lt;br&gt;the session termination flags. in tcp mode with “option tcplog” set on the&lt;br&gt;frontend, 3 control points are reported under the form “tw/tc/tt”, and in http&lt;br&gt;mode, 5 control points are reported under the form “tq/tw/tc/tr/tt” :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;tq: total time to get the client request (http mode only). it’s the time&lt;br&gt;elapsed between the moment the client connection was accepted and the&lt;br&gt;moment the proxy received the last http header. the value “-1” indicates&lt;br&gt;that the end of headers (empty line) has never been seen. this happens when&lt;br&gt;the client closes prematurely or times out.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tw: total time spent in the queues waiting for a connection slot. it&lt;br&gt;accounts for backend queue as well as the server queues, and depends on the&lt;br&gt;queue size, and the time needed for the server to complete previous&lt;br&gt;requests. the value “-1” means that the request was killed before reaching&lt;br&gt;the queue, which is generally what happens with invalid or denied requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tc: total time to establish the tcp connection to the server. it’s the time&lt;br&gt;elapsed between the moment the proxy sent the connection request, and the&lt;br&gt;moment it was acknowledged by the server, or between the tcp syn packet and&lt;br&gt;the matching syn/ack packet in return. the value “-1” means that the&lt;br&gt;connection never established.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tr: server response time (http mode only). it’s the time elapsed between&lt;br&gt;the moment the tcp connection was established to the server and the moment&lt;br&gt;the server sent its complete response headers. it purely shows its request&lt;br&gt;processing time, without the network overhead due to the data transmission.&lt;br&gt;it is worth noting that when the client has data to send to the server, for&lt;br&gt;instance during a post request, the time already runs, and this can distort&lt;br&gt;apparent response time. for this reason, it’s generally wise not to trust&lt;br&gt;too much this field for post requests initiated from clients behind an&lt;br&gt;untrusted network. a value of “-1” here means that the last the response&lt;br&gt;header (empty line) was never seen, most likely because the server timeout&lt;br&gt;stroke before the server managed to process the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;tt: total session duration time, between the moment the proxy accepted it&lt;br&gt;and the moment both ends were closed. the exception is when the “logasap”&lt;br&gt;option is specified. in this case, it only equals (tq+tw+tc+tr), and is&lt;br&gt;prefixed with a ‘+’ sign. from this field, we can deduce “td”, the data&lt;br&gt;transmission time, by subtracting other timers when valid :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;td = tt - (tq + tw + tc + tr)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;timers with “-1” values have to be excluded from this equation. in tcp&lt;br&gt;mode, “tq” and “tr” have to be excluded too. note that “tt” can never be&lt;br&gt;negative.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;these timers provide precious indications on trouble causes. since the tcp&lt;br&gt;protocol defines retransmit delays of 3, 6, 12… seconds, we know for sure&lt;br&gt;that timers close to multiples of 3s are nearly always related to lost packets&lt;br&gt;due to network problems (wires, negotiation, congestion). moreover, if “tt” is&lt;br&gt;close to a timeout value specified in the configuration, it often means that a&lt;br&gt;session has been aborted on timeout.&lt;/p&gt;
&lt;p&gt;most common cases :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;if “tq” is close to 3000, a packet has probably been lost between the&lt;br&gt;client and the proxy. this is very rare on local networks but might happen&lt;br&gt;when clients are on far remote networks and send large requests. it may&lt;br&gt;happen that values larger than usual appear here without any network cause.&lt;br&gt;sometimes, during an attack or just after a resource starvation has ended,&lt;br&gt;haproxy may accept thousands of connections in a few milliseconds. the time&lt;br&gt;spent accepting these connections will inevitably slightly delay processing&lt;br&gt;of other connections, and it can happen that request times in the order of&lt;br&gt;a few tens of milliseconds are measured after a few thousands of new&lt;br&gt;connections have been accepted at once. setting “option http-server-close”&lt;br&gt;may display larger request times since “tq” also measures the time spent&lt;br&gt;waiting for additional requests.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if “tc” is close to 3000, a packet has probably been lost between the&lt;br&gt;server and the proxy during the server connection phase. this value should&lt;br&gt;always be very low, such as 1 ms on local networks and less than a few tens&lt;br&gt;of ms on remote networks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if “tr” is nearly always lower than 3000 except some rare values which seem&lt;br&gt;to be the average majored by 3000, there are probably some packets lost&lt;br&gt;between the proxy and the server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if “tt” is large even for small byte counts, it generally is because&lt;br&gt;neither the client nor the server decides to close the connection, for&lt;br&gt;instance because both have agreed on a keep-alive connection mode. in order&lt;br&gt;to solve this issue, it will be needed to specify “option httpclose” on&lt;br&gt;either the frontend or the backend. if the problem persists, it means that&lt;br&gt;the server ignores the “close” connection mode and expects the client to&lt;br&gt;close. then it will be required to use “option forceclose”. having the&lt;br&gt;smallest possible ‘tt’ is important when connection regulation is used with&lt;br&gt;the “maxconn” option on the servers, since no new connection will be sent&lt;br&gt;to the server until another one is released.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;other noticeable http log cases (‘xx’ means any value to be ignored) :&lt;/p&gt;
&lt;p&gt;  tq/tw/tc/tr/+tt  the “option logasap” is present on the frontend and the log&lt;br&gt;                   was emitted before the data phase. all the timers are valid&lt;br&gt;                   except “tt” which is shorter than reality.&lt;/p&gt;
&lt;p&gt;  -1/xx/xx/xx/tt   the client was not able to send a complete request in time&lt;br&gt;                   or it aborted too early. check the session termination flags&lt;br&gt;                   then “timeout http-request” and “timeout client” settings.&lt;/p&gt;
&lt;p&gt;  tq/-1/xx/xx/tt   it was not possible to process the request, maybe because&lt;br&gt;                   servers were out of order, because the request was invalid&lt;br&gt;                   or forbidden by acl rules. check the session termination&lt;br&gt;                   flags.&lt;/p&gt;
&lt;p&gt;  tq/tw/-1/xx/tt   the connection could not establish on the server. either it&lt;br&gt;                   actively refused it or it timed out after tt-(tq+tw) ms.&lt;br&gt;                   check the session termination flags, then check the&lt;br&gt;                   “timeout connect” setting. note that the tarpit action might&lt;br&gt;                   return similar-looking patterns, with “tw” equal to the time&lt;br&gt;                   the client connection was maintained open.&lt;/p&gt;
&lt;p&gt;  tq/tw/tc/-1/tt   the server has accepted the connection but did not return&lt;br&gt;                   a complete response in time, or it closed its connection&lt;br&gt;                   unexpectedly after tt-(tq+tw+tc) ms. check the session&lt;br&gt;                   termination flags, then check the “timeout server” setting.&lt;/p&gt;
&lt;h2 id=&quot;8-5-session-state-at-disconnection&quot;&gt;&lt;a href=&quot;#8-5-session-state-at-disconnection&quot; class=&quot;headerlink&quot; title=&quot;8.5. session state at disconnection&quot;&gt;&lt;/a&gt;8.5. session state at disconnection&lt;/h2&gt;&lt;p&gt;tcp and http logs provide a session termination indicator in the&lt;br&gt;“termination_state” field, just before the number of active connections. it is&lt;br&gt;2-characters long in tcp mode, and is extended to 4 characters in http mode,&lt;br&gt;each of which has a special meaning :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;on the first character, a code reporting the first event which caused the&lt;br&gt;session to terminate :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;c : the tcp session was unexpectedly aborted by the client.

s : the tcp session was unexpectedly aborted by the server, or the
    server explicitly refused it.

p : the session was prematurely aborted by the proxy, because of a
    connection limit enforcement, because a deny filter was matched,
    because of a security check which detected and blocked a dangerous
    error in server response which might have caused information leak
    (eg: cacheable cookie).

l : the session was locally processed by haproxy and was not passed to
    a server. this is what happens for stats and redirects.

r : a resource on the proxy has been exhausted (memory, sockets, source
    ports, ...). usually, this appears during the connection phase, and
    system logs should contain a copy of the precise error. if this
    happens, it must be considered as a very serious anomaly which
    should be fixed as soon as possible by any means.

i : an internal error was identified by the proxy during a self-check.
    this should never happen, and you are encouraged to report any log
    containing this, because this would almost certainly be a bug. it
    would be wise to preventively restart the process after such an
    event too, in case it would be caused by memory corruption.

d : the session was killed by haproxy because the server was detected
    as down and was configured to kill all connections when going down.

u : the session was killed by haproxy on this backup server because an
    active server was detected as up and was configured to kill all
    backup connections when going up.

k : the session was actively killed by an admin operating on haproxy.

c : the client-side timeout expired while waiting for the client to
    send or receive data.

s : the server-side timeout expired while waiting for the server to
    send or receive data.

- : normal session completion, both the client and the server closed
    with nothing left in the buffers.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;on the second character, the tcp or http session state when it was closed :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;r : the proxy was waiting for a complete, valid request from the client
    (http mode only). nothing was sent to any server.

q : the proxy was waiting in the queue for a connection slot. this can
    only happen when servers have a &amp;apos;maxconn&amp;apos; parameter set. it can
    also happen in the global queue after a redispatch consecutive to
    a failed attempt to connect to a dying server. if no redispatch is
    reported, then no connection attempt was made to any server.

c : the proxy was waiting for the connection to establish on the
    server. the server might at most have noticed a connection attempt.

h : the proxy was waiting for complete, valid response headers from the
    server (http only).

d : the session was in the data phase.

l : the proxy was still transmitting last data to the client while the
    server had already finished. this one is very rare as it can only
    happen when the client dies while receiving the last packets.

t : the request was tarpitted. it has been held open with the client
    during the whole &amp;quot;timeout tarpit&amp;quot; duration or until the client
    closed, both of which will be reported in the &amp;quot;tw&amp;quot; timer.

- : normal session completion after end of data transfer.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the third character tells whether the persistence cookie was provided by&lt;br&gt;the client (only in http mode) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n : the client provided no cookie. this is usually the case for new
    visitors, so counting the number of occurrences of this flag in the
    logs generally indicate a valid trend for the site frequentation.

i : the client provided an invalid cookie matching no known server.
    this might be caused by a recent configuration change, mixed
    cookies between http/https sites, persistence conditionally
    ignored, or an attack.

d : the client provided a cookie designating a server which was down,
    so either &amp;quot;option persist&amp;quot; was used and the client was sent to
    this server, or it was not set and the client was redispatched to
    another server.

v : the client provided a valid cookie, and was sent to the associated
    server.

e : the client provided a valid cookie, but with a last date which was
    older than what is allowed by the &amp;quot;maxidle&amp;quot; cookie parameter, so
    the cookie is consider expired and is ignored. the request will be
    redispatched just as if there was no cookie.

o : the client provided a valid cookie, but with a first date which was
    older than what is allowed by the &amp;quot;maxlife&amp;quot; cookie parameter, so
    the cookie is consider too old and is ignored. the request will be
    redispatched just as if there was no cookie.

u : a cookie was present but was not used to select the server because
    some other server selection mechanism was used instead (typically a
    &amp;quot;use-server&amp;quot; rule).

- : does not apply (no cookie set in configuration).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the last character reports what operations were performed on the persistence&lt;br&gt;cookie returned by the server (only in http mode) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;n : no cookie was provided by the server, and none was inserted either.

i : no cookie was provided by the server, and the proxy inserted one.
    note that in &amp;quot;cookie insert&amp;quot; mode, if the server provides a cookie,
    it will still be overwritten and reported as &amp;quot;i&amp;quot; here.

u : the proxy updated the last date in the cookie that was presented by
    the client. this can only happen in insert mode with &amp;quot;maxidle&amp;quot;. it
    happens every time there is activity at a different date than the
    date indicated in the cookie. if any other change happens, such as
    a redispatch, then the cookie will be marked as inserted instead.

p : a cookie was provided by the server and transmitted as-is.

r : the cookie provided by the server was rewritten by the proxy, which
    happens in &amp;quot;cookie rewrite&amp;quot; or &amp;quot;cookie prefix&amp;quot; modes.

d : the cookie provided by the server was deleted by the proxy.

- : does not apply (no cookie set in configuration).
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the combination of the two first flags gives a lot of information about what&lt;br&gt;was happening when the session terminated, and why it did terminate. it can be&lt;br&gt;helpful to detect server saturation, network troubles, local system resource&lt;br&gt;starvation, attacks, etc…&lt;/p&gt;
&lt;p&gt;the most common termination flags combinations are indicated below. they are&lt;br&gt;alphabetically sorted, with the lowercase set just after the upper case for&lt;br&gt;easier finding and understanding.&lt;/p&gt;
&lt;p&gt;  flags   reason&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--   normal termination.

cc   the client aborted before the connection could be established to the
     server. this can happen when haproxy tries to connect to a recently
     dead (or unchecked) server, and the client aborts while haproxy is
     waiting for the server to respond or for &amp;quot;timeout connect&amp;quot; to expire.

cd   the client unexpectedly aborted during data transfer. this can be
     caused by a browser crash, by an intermediate equipment between the
     client and haproxy which decided to actively break the connection,
     by network routing issues between the client and haproxy, or by a
     keep-alive session between the server and the client terminated first
     by the client.

cd   the client did not send nor acknowledge any data for as long as the
     &amp;quot;timeout client&amp;quot; delay. this is often caused by network failures on
     the client side, or the client simply leaving the net uncleanly.

ch   the client aborted while waiting for the server to start responding.
     it might be the server taking too long to respond or the client
     clicking the &amp;apos;stop&amp;apos; button too fast.

ch   the &amp;quot;timeout client&amp;quot; stroke while waiting for client data during a
     post request. this is sometimes caused by too large tcp mss values
     for pppoe networks which cannot transport full-sized packets. it can
     also happen when client timeout is smaller than server timeout and
     the server takes too long to respond.

cq   the client aborted while its session was queued, waiting for a server
     with enough empty slots to accept it. it might be that either all the
     servers were saturated or that the assigned server was taking too
     long a time to respond.

cr   the client aborted before sending a full http request. most likely
     the request was typed by hand using a telnet client, and aborted
     too early. the http status code is likely a 400 here. sometimes this
     might also be caused by an ids killing the connection between haproxy
     and the client. &amp;quot;option http-ignore-probes&amp;quot; can be used to ignore
     connections without any data transfer.

cr   the &amp;quot;timeout http-request&amp;quot; stroke before the client sent a full http
     request. this is sometimes caused by too large tcp mss values on the
     client side for pppoe networks which cannot transport full-sized
     packets, or by clients sending requests by hand and not typing fast
     enough, or forgetting to enter the empty line at the end of the
     request. the http status code is likely a 408 here. note: recently,
     some browsers started to implement a &amp;quot;pre-connect&amp;quot; feature consisting
     in speculatively connecting to some recently visited web sites just
     in case the user would like to visit them. this results in many
     connections being established to web sites, which end up in 408
     request timeout if the timeout strikes first, or 400 bad request when
     the browser decides to close them first. these ones pollute the log
     and feed the error counters. some versions of some browsers have even
     been reported to display the error code. it is possible to work
     around the undesirable effects of this behaviour by adding &amp;quot;option
     http-ignore-probes&amp;quot; in the frontend, resulting in connections with
     zero data transfer to be totally ignored. this will definitely hide
     the errors of people experiencing connectivity issues though.

ct   the client aborted while its session was tarpitted. it is important to
     check if this happens on valid requests, in order to be sure that no
     wrong tarpit rules have been written. if a lot of them happen, it
     might make sense to lower the &amp;quot;timeout tarpit&amp;quot; value to something
     closer to the average reported &amp;quot;tw&amp;quot; timer, in order not to consume
     resources for just a few attackers.

lr   the request was intercepted and locally handled by haproxy. generally
     it means that this was a redirect or a stats request.

sc   the server or an equipment between it and haproxy explicitly refused
     the tcp connection (the proxy received a tcp rst or an icmp message
     in return). under some circumstances, it can also be the network
     stack telling the proxy that the server is unreachable (eg: no route,
     or no arp response on local network). when this happens in http mode,
     the status code is likely a 502 or 503 here.

sc   the &amp;quot;timeout connect&amp;quot; stroke before a connection to the server could
     complete. when this happens in http mode, the status code is likely a
     503 or 504 here.

sd   the connection to the server died with an error during the data
     transfer. this usually means that haproxy has received an rst from
     the server or an icmp message from an intermediate equipment while
     exchanging data with the server. this can be caused by a server crash
     or by a network issue on an intermediate equipment.

sd   the server did not send nor acknowledge any data for as long as the
     &amp;quot;timeout server&amp;quot; setting during the data phase. this is often caused
     by too short timeouts on l4 equipments before the server (firewalls,
     load-balancers, ...), as well as keep-alive sessions maintained
     between the client and the server expiring first on haproxy.

sh   the server aborted before sending its full http response headers, or
     it crashed while processing the request. since a server aborting at
     this moment is very rare, it would be wise to inspect its logs to
     control whether it crashed and why. the logged request may indicate a
     small set of faulty requests, demonstrating bugs in the application.
     sometimes this might also be caused by an ids killing the connection
     between haproxy and the server.

sh   the &amp;quot;timeout server&amp;quot; stroke before the server could return its
     response headers. this is the most common anomaly, indicating too
     long transactions, probably caused by server or database saturation.
     the immediate workaround consists in increasing the &amp;quot;timeout server&amp;quot;
     setting, but it is important to keep in mind that the user experience
     will suffer from these long response times. the only long term
     solution is to fix the application.

sq   the session spent too much time in queue and has been expired. see
     the &amp;quot;timeout queue&amp;quot; and &amp;quot;timeout connect&amp;quot; settings to find out how to
     fix this if it happens too often. if it often happens massively in
     short periods, it may indicate general problems on the affected
     servers due to i/o or database congestion, or saturation caused by
     external attacks.

pc   the proxy refused to establish a connection to the server because the
     process&amp;apos; socket limit has been reached while attempting to connect.
     the global &amp;quot;maxconn&amp;quot; parameter may be increased in the configuration
     so that it does not happen anymore. this status is very rare and
     might happen when the global &amp;quot;ulimit-n&amp;quot; parameter is forced by hand.

pd   the proxy blocked an incorrectly formatted chunked encoded message in
     a request or a response, after the server has emitted its headers. in
     most cases, this will indicate an invalid message from the server to
     the client. haproxy supports chunk sizes of up to 2gb - 1 (2147483647
     bytes). any larger size will be considered as an error.

ph   the proxy blocked the server&amp;apos;s response, because it was invalid,
     incomplete, dangerous (cache control), or matched a security filter.
     in any case, an http 502 error is sent to the client. one possible
     cause for this error is an invalid syntax in an http header name
     containing unauthorized characters. it is also possible but quite
     rare, that the proxy blocked a chunked-encoding request from the
     client due to an invalid syntax, before the server responded. in this
     case, an http 400 error is sent to the client and reported in the
     logs.

pr   the proxy blocked the client&amp;apos;s http request, either because of an
     invalid http syntax, in which case it returned an http 400 error to
     the client, or because a deny filter matched, in which case it
     returned an http 403 error.

pt   the proxy blocked the client&amp;apos;s request and has tarpitted its
     connection before returning it a 500 server error. nothing was sent
     to the server. the connection was maintained open for as long as
     reported by the &amp;quot;tw&amp;quot; timer field.

rc   a local resource has been exhausted (memory, sockets, source ports)
     preventing the connection to the server from establishing. the error
     logs will tell precisely what was missing. this is very rare and can
     only be solved by proper system tuning.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the combination of the two last flags gives a lot of information about how&lt;br&gt;persistence was handled by the client, the server and by haproxy. this is very&lt;br&gt;important to troubleshoot disconnections, when users complain they have to&lt;br&gt;re-authenticate. the commonly encountered flags are :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--   persistence cookie is not enabled.

nn   no cookie was provided by the client, none was inserted in the
     response. for instance, this can be in insert mode with &amp;quot;postonly&amp;quot;
     set on a get request.

ii   a cookie designating an invalid server was provided by the client,
     a valid one was inserted in the response. this typically happens when
     a &amp;quot;server&amp;quot; entry is removed from the configuration, since its cookie
     value can be presented by a client when no other server knows it.

ni   no cookie was provided by the client, one was inserted in the
     response. this typically happens for first requests from every user
     in &amp;quot;insert&amp;quot; mode, which makes it an easy way to count real users.

vn   a cookie was provided by the client, none was inserted in the
     response. this happens for most responses for which the client has
     already got a cookie.

vu   a cookie was provided by the client, with a last visit date which is
     not completely up-to-date, so an updated cookie was provided in
     response. this can also happen if there was no date at all, or if
     there was a date but the &amp;quot;maxidle&amp;quot; parameter was not set, so that the
     cookie can be switched to unlimited time.

ei   a cookie was provided by the client, with a last visit date which is
     too old for the &amp;quot;maxidle&amp;quot; parameter, so the cookie was ignored and a
     new cookie was inserted in the response.

oi   a cookie was provided by the client, with a first visit date which is
     too old for the &amp;quot;maxlife&amp;quot; parameter, so the cookie was ignored and a
     new cookie was inserted in the response.

di   the server designated by the cookie was down, a new server was
     selected and a new cookie was emitted in the response.

vi   the server designated by the cookie was not marked dead but could not
     be reached. a redispatch happened and selected another one, which was
     then advertised in the response.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-6-non-printable-characters&quot;&gt;&lt;a href=&quot;#8-6-non-printable-characters&quot; class=&quot;headerlink&quot; title=&quot;8.6. non-printable characters&quot;&gt;&lt;/a&gt;8.6. non-printable characters&lt;/h2&gt;&lt;p&gt;in order not to cause trouble to log analysis tools or terminals during log&lt;br&gt;consulting, non-printable characters are not sent as-is into log files, but are&lt;br&gt;converted to the two-digits hexadecimal representation of their ascii code,&lt;br&gt;prefixed by the character ‘#’. the only characters that can be logged without&lt;br&gt;being escaped are comprised between 32 and 126 (inclusive). obviously, the&lt;br&gt;escape character ‘#’ itself is also encoded to avoid any ambiguity (“#23”). it&lt;br&gt;is the same for the character ‘“‘ which becomes “#22”, as well as ‘{‘, ‘|’ and&lt;br&gt;‘}’ when logging headers.&lt;/p&gt;
&lt;p&gt;note that the space character (‘ ‘) is not encoded in headers, which can cause&lt;br&gt;issues for tools relying on space count to locate fields. a typical header&lt;br&gt;containing spaces is “user-agent”.&lt;/p&gt;
&lt;p&gt;last, it has been observed that some syslog daemons such as syslog-ng escape&lt;br&gt;the quote (‘“‘) with a backslash (‘\’). the reverse operation can safely be&lt;br&gt;performed since no quote may appear anywhere else in the logs.&lt;/p&gt;
&lt;h2 id=&quot;8-7-capturing-http-cookies&quot;&gt;&lt;a href=&quot;#8-7-capturing-http-cookies&quot; class=&quot;headerlink&quot; title=&quot;8.7. capturing http cookies&quot;&gt;&lt;/a&gt;8.7. capturing http cookies&lt;/h2&gt;&lt;p&gt;cookie capture simplifies the tracking a complete user session. this can be&lt;br&gt;achieved using the “capture cookie” statement in the frontend. please refer to&lt;br&gt;section 4.2 for more details. only one cookie can be captured, and the same&lt;br&gt;cookie will simultaneously be checked in the request (“cookie:” header) and in&lt;br&gt;the response (“set-cookie:” header). the respective values will be reported in&lt;br&gt;the http logs at the “captured_request_cookie” and “captured_response_cookie”&lt;br&gt;locations (see section 8.2.3 about http log format). when either cookie is&lt;br&gt;not seen, a dash (‘-‘) replaces the value. this way, it’s easy to detect when a&lt;br&gt;user switches to a new session for example, because the server will reassign it&lt;br&gt;a new cookie. it is also possible to detect if a server unexpectedly sets a&lt;br&gt;wrong cookie to a client, leading to session crossing.&lt;/p&gt;
&lt;p&gt;  examples :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# capture the first cookie whose name starts with &amp;quot;aspsession&amp;quot;
capture cookie aspsession len 32

# capture the first cookie whose name is exactly &amp;quot;vgnvisitor&amp;quot;
capture cookie vgnvisitor= len 32
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-8-capturing-http-headers&quot;&gt;&lt;a href=&quot;#8-8-capturing-http-headers&quot; class=&quot;headerlink&quot; title=&quot;8.8. capturing http headers&quot;&gt;&lt;/a&gt;8.8. capturing http headers&lt;/h2&gt;&lt;p&gt;header captures are useful to track unique request identifiers set by an upper&lt;br&gt;proxy, virtual host names, user-agents, post content-length, referrers, etc. in&lt;br&gt;the response, one can search for information about the response length, how the&lt;br&gt;server asked the cache to behave, or an object location during a redirection.&lt;/p&gt;
&lt;p&gt;header captures are performed using the “capture request header” and “capture&lt;br&gt;response header” statements in the frontend. please consult their definition in&lt;br&gt;section 4.2 for more details.&lt;/p&gt;
&lt;p&gt;it is possible to include both request headers and response headers at the same&lt;br&gt;time. non-existent headers are logged as empty strings, and if one header&lt;br&gt;appears more than once, only its last occurrence will be logged. request headers&lt;br&gt;are grouped within braces ‘{‘ and ‘}’ in the same order as they were declared,&lt;br&gt;and delimited with a vertical bar ‘|’ without any space. response headers&lt;br&gt;follow the same representation, but are displayed after a space following the&lt;br&gt;request headers block. these blocks are displayed just before the http request&lt;br&gt;in the logs.&lt;/p&gt;
&lt;p&gt;as a special case, it is possible to specify an http header capture in a tcp&lt;br&gt;frontend. the purpose is to enable logging of headers which will be parsed in&lt;br&gt;an http backend if the request is then switched to this http backend.&lt;/p&gt;
&lt;p&gt;  example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    # this instance chains to the outgoing proxy
    listen proxy-out
        mode http
        option httplog
        option logasap
        log global
        server cache1 192.168.1.1:3128

        # log the name of the virtual server
        capture request  header host len 20

        # log the amount of data uploaded during a post
        capture request  header content-length len 10

        # log the beginning of the referrer
        capture request  header referer len 20

        # server name (useful for outgoing proxies only)
        capture response header server len 20

        # logging the content-length is useful with &amp;quot;option logasap&amp;quot;
        capture response header content-length len 10

        # log the expected cache behaviour on the response
        capture response header cache-control len 8

        # the via header will report the next proxy&amp;apos;s name
        capture response header via len 20

        # log the url location during a redirection
        capture response header location len 20

&amp;gt;&amp;gt;&amp;gt; aug  9 20:26:09 localhost \
      haproxy[2022]: 127.0.0.1:34014 [09/aug/2004:20:26:09] proxy-out \
      proxy-out/cache1 0/0/0/162/+162 200 +350 - - ---- 0/0/0/0/0 0/0 \
      {fr.adserver.yahoo.co||http://fr.f416.mail.} {|864|private||} \
      &amp;quot;get http://fr.adserver.yahoo.com/&amp;quot;

&amp;gt;&amp;gt;&amp;gt; aug  9 20:30:46 localhost \
      haproxy[2022]: 127.0.0.1:34020 [09/aug/2004:20:30:46] proxy-out \
      proxy-out/cache1 0/0/0/182/+182 200 +279 - - ---- 0/0/0/0/0 0/0 \
      {w.ods.org||} {formilux/0.1.8|3495|||} \
      &amp;quot;get http://trafic.1wt.eu/ http/1.1&amp;quot;

&amp;gt;&amp;gt;&amp;gt; aug  9 20:30:46 localhost \
      haproxy[2022]: 127.0.0.1:34028 [09/aug/2004:20:30:46] proxy-out \
      proxy-out/cache1 0/0/2/126/+128 301 +223 - - ---- 0/0/0/0/0 0/0 \
      {www.sytadin.equipement.gouv.fr||http://trafic.1wt.eu/} \
      {apache|230|||http://www.sytadin.} \
      &amp;quot;get http://www.sytadin.equipement.gouv.fr/ http/1.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-9-examples-of-logs&quot;&gt;&lt;a href=&quot;#8-9-examples-of-logs&quot; class=&quot;headerlink&quot; title=&quot;8.9. examples of logs&quot;&gt;&lt;/a&gt;8.9. examples of logs&lt;/h2&gt;&lt;p&gt;these are real-world examples of logs accompanied with an explanation. some of&lt;br&gt;them have been made up by hand. the syslog part has been removed for better&lt;br&gt;reading. their sole purpose is to explain how to decipher them.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; haproxy[674]: 127.0.0.1:33318 [15/oct/2003:08:31:57.130] px-http \
      px-http/srv1 6559/0/7/147/6723 200 243 - - ---- 5/3/3/1/0 0/0 \
      &amp;quot;head / http/1.0&amp;quot;

=&amp;gt; long request (6.5s) entered by hand through &amp;apos;telnet&amp;apos;. the server replied
   in 147 ms, and the session ended normally (&amp;apos;----&amp;apos;)

&amp;gt;&amp;gt;&amp;gt; haproxy[674]: 127.0.0.1:33319 [15/oct/2003:08:31:57.149] px-http \
      px-http/srv1 6559/1230/7/147/6870 200 243 - - ---- 324/239/239/99/0 \
      0/9 &amp;quot;head / http/1.0&amp;quot;

=&amp;gt; idem, but the request was queued in the global queue behind 9 other
   requests, and waited there for 1230 ms.

&amp;gt;&amp;gt;&amp;gt; haproxy[674]: 127.0.0.1:33320 [15/oct/2003:08:32:17.654] px-http \
      px-http/srv1 9/0/7/14/+30 200 +243 - - ---- 3/3/3/1/0 0/0 \
      &amp;quot;get /image.iso http/1.0&amp;quot;

=&amp;gt; request for a long data transfer. the &amp;quot;logasap&amp;quot; option was specified, so
   the log was produced just before transferring data. the server replied in
   14 ms, 243 bytes of headers were sent to the client, and total time from
   accept to first data byte is 30 ms.

&amp;gt;&amp;gt;&amp;gt; haproxy[674]: 127.0.0.1:33320 [15/oct/2003:08:32:17.925] px-http \
      px-http/srv1 9/0/7/14/30 502 243 - - ph-- 3/2/2/0/0 0/0 \
      &amp;quot;get /cgi-bin/bug.cgi? http/1.0&amp;quot;

=&amp;gt; the proxy blocked a server response either because of an &amp;quot;rspdeny&amp;quot; or
   &amp;quot;rspideny&amp;quot; filter, or because the response was improperly formatted and
   not http-compliant, or because it blocked sensitive information which
   risked being cached. in this case, the response is replaced with a &amp;quot;502
   bad gateway&amp;quot;. the flags (&amp;quot;ph--&amp;quot;) tell us that it was haproxy who decided
   to return the 502 and not the server.

&amp;gt;&amp;gt;&amp;gt; haproxy[18113]: 127.0.0.1:34548 [15/oct/2003:15:18:55.798] px-http \
      px-http/&amp;lt;nosrv&amp;gt; -1/-1/-1/-1/8490 -1 0 - - cr-- 2/2/2/0/0 0/0 &amp;quot;&amp;quot;

=&amp;gt; the client never completed its request and aborted itself (&amp;quot;c---&amp;quot;) after
   8.5s, while the proxy was waiting for the request headers (&amp;quot;-r--&amp;quot;).
   nothing was sent to any server.

&amp;gt;&amp;gt;&amp;gt; haproxy[18113]: 127.0.0.1:34549 [15/oct/2003:15:19:06.103] px-http \
     px-http/&amp;lt;nosrv&amp;gt; -1/-1/-1/-1/50001 408 0 - - cr-- 2/2/2/0/0 0/0 &amp;quot;&amp;quot;

=&amp;gt; the client never completed its request, which was aborted by the
   time-out (&amp;quot;c---&amp;quot;) after 50s, while the proxy was waiting for the request
   headers (&amp;quot;-r--&amp;quot;).  nothing was sent to any server, but the proxy could
   send a 408 return code to the client.

&amp;gt;&amp;gt;&amp;gt; haproxy[18989]: 127.0.0.1:34550 [15/oct/2003:15:24:28.312] px-tcp \
      px-tcp/srv1 0/0/5007 0 cd 0/0/0/0/0 0/0

=&amp;gt; this log was produced with &amp;quot;option tcplog&amp;quot;. the client timed out after
   5 seconds (&amp;quot;c----&amp;quot;).

&amp;gt;&amp;gt;&amp;gt; haproxy[18989]: 10.0.0.1:34552 [15/oct/2003:15:26:31.462] px-http \
      px-http/srv1 3183/-1/-1/-1/11215 503 0 - - sc-- 205/202/202/115/3 \
      0/0 &amp;quot;head / http/1.0&amp;quot;

=&amp;gt; the request took 3s to complete (probably a network problem), and the
   connection to the server failed (&amp;apos;sc--&amp;apos;) after 4 attempts of 2 seconds
   (config says &amp;apos;retries 3&amp;apos;), and no redispatch (otherwise we would have
   seen &amp;quot;/+3&amp;quot;). status code 503 was returned to the client. there were 115
   connections on this server, 202 connections on this proxy, and 205 on
   the global process. it is possible that the server refused the
   connection because of too many already established.
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;9-statistics-and-monitoring&quot;&gt;&lt;a href=&quot;#9-statistics-and-monitoring&quot; class=&quot;headerlink&quot; title=&quot;9. statistics and monitoring&quot;&gt;&lt;/a&gt;9. statistics and monitoring&lt;/h2&gt;&lt;p&gt;it is possible to query haproxy about its status. the most commonly used&lt;br&gt;mechanism is the http statistics page. this page also exposes an alternative&lt;br&gt;csv output format for monitoring tools. the same format is provided on the&lt;br&gt;unix socket.&lt;/p&gt;
&lt;h2 id=&quot;9-1-csv-format&quot;&gt;&lt;a href=&quot;#9-1-csv-format&quot; class=&quot;headerlink&quot; title=&quot;9.1. csv format&quot;&gt;&lt;/a&gt;9.1. csv format&lt;/h2&gt;&lt;p&gt;the statistics may be consulted either from the unix socket or from the http&lt;br&gt;page. both means provide a csv format whose fields follow. the first line&lt;br&gt;begins with a sharp (‘#’) and has one word per comma-delimited field which&lt;br&gt;represents the title of the column. all other lines starting at the second one&lt;br&gt;use a classical csv format using a comma as the delimiter, and the double quote&lt;br&gt;(‘“‘) as an optional text delimiter, but only if the enclosed text is ambiguous&lt;br&gt;(if it contains a quote or a comma). the double-quote character (‘“‘) in the&lt;br&gt;text is doubled (‘“”‘), which is the format that most tools recognize. please&lt;br&gt;do not insert any column before these ones in order not to break tools which&lt;br&gt;use hard-coded column positions.&lt;/p&gt;
&lt;p&gt;in brackets after each field name are the types which may have a value for&lt;br&gt;that field. the types are l (listeners), f (frontends), b (backends), and&lt;br&gt;s (servers).&lt;/p&gt;
&lt;p&gt;  0. pxname [lfbs]: proxy name&lt;br&gt;  1. svname [lfbs]: service name (frontend for frontend, backend for backend,&lt;br&gt;     any name for server/listener)&lt;br&gt;  2. qcur [..bs]: current queued requests. for the backend this reports the&lt;br&gt;     number queued without a server assigned.&lt;br&gt;  3. qmax [..bs]: max value of qcur&lt;br&gt;  4. scur [lfbs]: current sessions&lt;br&gt;  5. smax [lfbs]: max sessions&lt;br&gt;  6. slim [lfbs]: configured session limit&lt;br&gt;  7. stot [lfbs]: cumulative number of connections&lt;br&gt;  8. bin [lfbs]: bytes in&lt;br&gt;  9. bout [lfbs]: bytes out&lt;br&gt; 10. dreq [lfb.]: requests denied because of security concerns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- for tcp this is because of a matched tcp-request content rule.
- for http this is because of a matched http-request or tarpit rule.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 11. dresp [lfbs]: responses denied because of security concerns.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- for http this is because of a matched http-request rule, or
  &amp;quot;option checkcache&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 12. ereq [lf..]: request errors. some of the possible causes are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- early termination from the client, before the request has been sent.
- read error from the client
- client timeout
- client closed connection
- various bad requests from the client.
- request was tarpitted.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 13. econ [..bs]: number of requests that encountered an error trying to&lt;br&gt;     connect to a backend server. the backend stat is the sum of the stat&lt;br&gt;     for all servers of that backend, plus any connection errors not&lt;br&gt;     associated with a particular server (such as the backend having no&lt;br&gt;     active servers).&lt;br&gt; 14. eresp [..bs]: response errors. srv_abrt will be counted here also.&lt;br&gt;     some other errors are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- write error on the client socket (won&amp;apos;t be counted for the server stat)
- failure applying filters to the response.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 15. wretr [..bs]: number of times a connection to a server was retried.&lt;br&gt; 16. wredis [..bs]: number of times a request was redispatched to another&lt;br&gt;     server. the server value counts the number of times that server was&lt;br&gt;     switched away from.&lt;br&gt; 17. status [lfbs]: status (up/down/nolb/maint/maint(via)…)&lt;br&gt; 18. weight [..bs]: total weight (backend), server weight (server)&lt;br&gt; 19. act [..bs]: number of active servers (backend), server is active (server)&lt;br&gt; 20. bck [..bs]: number of backup servers (backend), server is backup (server)&lt;br&gt; 21. chkfail […s]: number of failed checks. (only counts checks failed when&lt;br&gt;     the server is up.)&lt;br&gt; 22. chkdown [..bs]: number of up-&amp;gt;down transitions. the backend counter counts&lt;br&gt;     transitions to the whole backend being down, rather than the sum of the&lt;br&gt;     counters for each server.&lt;br&gt; 23. lastchg [..bs]: number of seconds since the last up&amp;lt;-&amp;gt;down transition&lt;br&gt; 24. downtime [..bs]: total downtime (in seconds). the value for the backend&lt;br&gt;     is the downtime for the whole backend, not the sum of the server downtime.&lt;br&gt; 25. qlimit […s]: configured maxqueue for the server, or nothing in the&lt;br&gt;     value is 0 (default, meaning no limit)&lt;br&gt; 26. pid [lfbs]: process id (0 for first instance, 1 for second, …)&lt;br&gt; 27. iid [lfbs]: unique proxy id&lt;br&gt; 28. sid [l..s]: server id (unique inside a proxy)&lt;br&gt; 29. throttle […s]: current throttle percentage for the server, when&lt;br&gt;     slowstart is active, or no value if not in slowstart.&lt;br&gt; 30. lbtot [..bs]: total number of times a server was selected, either for new&lt;br&gt;     sessions, or when re-dispatching. the server counter is the number&lt;br&gt;     of times that server was selected.&lt;br&gt; 31. tracked […s]: id of proxy/server if tracking is enabled.&lt;br&gt; 32. type [lfbs]: (0=frontend, 1=backend, 2=server, 3=socket/listener)&lt;br&gt; 33. rate [.fbs]: number of sessions per second over last elapsed second&lt;br&gt; 34. rate_lim [.f..]: configured limit on new sessions per second&lt;br&gt; 35. rate_max [.fbs]: max number of new sessions per second&lt;br&gt; 36. check_status […s]: status of last health check, one of:&lt;br&gt;        unk     -&amp;gt; unknown&lt;br&gt;        ini     -&amp;gt; initializing&lt;br&gt;        sockerr -&amp;gt; socket error&lt;br&gt;        l4ok    -&amp;gt; check passed on layer 4, no upper layers testing enabled&lt;br&gt;        l4tout  -&amp;gt; layer 1-4 timeout&lt;br&gt;        l4con   -&amp;gt; layer 1-4 connection problem, for example&lt;br&gt;                   “connection refused” (tcp rst) or “no route to host” (icmp)&lt;br&gt;        l6ok    -&amp;gt; check passed on layer 6&lt;br&gt;        l6tout  -&amp;gt; layer 6 (ssl) timeout&lt;br&gt;        l6rsp   -&amp;gt; layer 6 invalid response - protocol error&lt;br&gt;        l7ok    -&amp;gt; check passed on layer 7&lt;br&gt;        l7okc   -&amp;gt; check conditionally passed on layer 7, for example 404 with&lt;br&gt;                   disable-on-404&lt;br&gt;        l7tout  -&amp;gt; layer 7 (http/smtp) timeout&lt;br&gt;        l7rsp   -&amp;gt; layer 7 invalid response - protocol error&lt;br&gt;        l7sts   -&amp;gt; layer 7 response error, for example http 5xx&lt;br&gt; 37. check_code […s]: layer5-7 code, if available&lt;br&gt; 38. check_duration […s]: time in ms took to finish last health check&lt;br&gt; 39. hrsp_1xx [.fbs]: http responses with 1xx code&lt;br&gt; 40. hrsp_2xx [.fbs]: http responses with 2xx code&lt;br&gt; 41. hrsp_3xx [.fbs]: http responses with 3xx code&lt;br&gt; 42. hrsp_4xx [.fbs]: http responses with 4xx code&lt;br&gt; 43. hrsp_5xx [.fbs]: http responses with 5xx code&lt;br&gt; 44. hrsp_other [.fbs]: http responses with other codes (protocol error)&lt;br&gt; 45. hanafail […s]: failed health checks details&lt;br&gt; 46. req_rate [.f..]: http requests per second over last elapsed second&lt;br&gt; 47. req_rate_max [.f..]: max number of http requests per second observed&lt;br&gt; 48. req_tot [.f..]: total number of http requests received&lt;br&gt; 49. cli_abrt [..bs]: number of data transfers aborted by the client&lt;br&gt; 50. srv_abrt [..bs]: number of data transfers aborted by the server&lt;br&gt;     (inc. in eresp)&lt;br&gt; 51. comp_in [.fb.]: number of http response bytes fed to the compressor&lt;br&gt; 52. comp_out [.fb.]: number of http response bytes emitted by the compressor&lt;br&gt; 53. comp_byp [.fb.]: number of bytes that bypassed the http compressor&lt;br&gt;     (cpu/bw limit)&lt;br&gt; 54. comp_rsp [.fb.]: number of http responses that were compressed&lt;br&gt; 55. lastsess [..bs]: number of seconds since last session assigned to&lt;br&gt;     server/backend&lt;br&gt; 56. last_chk […s]: last health check contents or textual error&lt;br&gt; 57. last_agt […s]: last agent check contents or textual error&lt;br&gt; 58. qtime [..bs]: the average queue time in ms over the 1024 last requests&lt;br&gt; 59. ctime [..bs]: the average connect time in ms over the 1024 last requests&lt;br&gt; 60. rtime [..bs]: the average response time in ms over the 1024 last requests&lt;br&gt;     (0 for tcp)&lt;br&gt; 61. ttime [..bs]: the average total session time in ms over the 1024 last&lt;br&gt;     requests&lt;/p&gt;
&lt;h2 id=&quot;9-2-unix-socket-commands&quot;&gt;&lt;a href=&quot;#9-2-unix-socket-commands&quot; class=&quot;headerlink&quot; title=&quot;9.2. unix socket commands&quot;&gt;&lt;/a&gt;9.2. unix socket commands&lt;/h2&gt;&lt;p&gt;the stats socket is not enabled by default. in order to enable it, it is&lt;br&gt;necessary to add one line in the global section of the haproxy configuration.&lt;br&gt;a second line is recommended to set a larger timeout, always appreciated when&lt;br&gt;issuing commands by hand :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;global
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats timeout 2m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;it is also possible to add multiple instances of the stats socket by repeating&lt;br&gt;the line, and make them listen to a tcp port instead of a unix socket. this is&lt;br&gt;never done by default because this is dangerous, but can be handy in some&lt;br&gt;situations :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;global
    stats socket /var/run/haproxy.sock mode 600 level admin
    stats socket ipv4@192.168.0.1:9999 level admin
    stats timeout 2m
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;to access the socket, an external utility such as “socat” is required. socat is a&lt;br&gt;swiss-army knife to connect anything to anything. we use it to connect terminals&lt;br&gt;to the socket, or a couple of stdin/stdout pipes to it for scripts. the two main&lt;br&gt;syntaxes we’ll use are the following :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# socat /var/run/haproxy.sock stdio
# socat /var/run/haproxy.sock readline
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the first one is used with scripts. it is possible to send the output of a&lt;br&gt;script to haproxy, and pass haproxy’s output to another script. that’s useful&lt;br&gt;for retrieving counters or attack traces for example.&lt;/p&gt;
&lt;p&gt;the second one is only useful for issuing commands by hand. it has the benefit&lt;br&gt;that the terminal is handled by the readline library which supports line&lt;br&gt;editing and history, which is very convenient when issuing repeated commands&lt;br&gt;(eg: watch a counter).&lt;/p&gt;
&lt;p&gt;the socket supports two operation modes :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;interactive&lt;/li&gt;
&lt;li&gt;non-interactive&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;the non-interactive mode is the default when socat connects to the socket. in&lt;br&gt;this mode, a single line may be sent. it is processed as a whole, responses are&lt;br&gt;sent back, and the connection closes after the end of the response. this is the&lt;br&gt;mode that scripts and monitoring tools use. it is possible to send multiple&lt;br&gt;commands in this mode, they need to be delimited by a semi-colon (‘;’). for&lt;br&gt;example :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# echo &amp;quot;show info;show stat;show table&amp;quot; | socat /var/run/haproxy stdio
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;the interactive mode displays a prompt (‘&amp;gt;’) and waits for commands to be&lt;br&gt;entered on the line, then processes them, and displays the prompt again to wait&lt;br&gt;for a new command. this mode is entered via the “prompt” command which must be&lt;br&gt;sent on the first line in non-interactive mode. the mode is a flip switch, if&lt;br&gt;“prompt” is sent in interactive mode, it is disabled and the connection closes&lt;br&gt;after processing the last command of the same line.&lt;/p&gt;
&lt;p&gt;for this reason, when debugging by hand, it’s quite common to start with the&lt;br&gt;“prompt” command :&lt;/p&gt;
&lt;h1 id=&quot;socat-var-run-haproxy-readline&quot;&gt;&lt;a href=&quot;#socat-var-run-haproxy-readline&quot; class=&quot;headerlink&quot; title=&quot;socat /var/run/haproxy readline&quot;&gt;&lt;/a&gt;socat /var/run/haproxy readline&lt;/h1&gt;&lt;p&gt;   prompt&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;show info&lt;br&gt;   …&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;since multiple commands may be issued at once, haproxy uses the empty line as a&lt;br&gt;delimiter to mark an end of output for each command, and takes care of ensuring&lt;br&gt;that no command can emit an empty line on output. a script can thus easily&lt;br&gt;parse the output even when multiple commands were pipelined on a single line.&lt;/p&gt;
&lt;p&gt;it is important to understand that when multiple haproxy processes are started&lt;br&gt;on the same sockets, any process may pick up the request and will output its&lt;br&gt;own stats.&lt;/p&gt;
&lt;p&gt;the list of commands currently supported on the stats socket is provided below.&lt;br&gt;if an unknown command is sent, haproxy displays the usage message which reminds&lt;br&gt;all supported commands. some commands support a more complex syntax, generally&lt;br&gt;it will explain what part of the command is invalid when this happens.&lt;/p&gt;
&lt;p&gt;add acl &lt;acl&gt; &lt;pattern&gt;&lt;br&gt;  add an entry into the acl &lt;acl&gt;. &lt;acl&gt; is the #&lt;id&gt; or the &lt;file&gt; returned by&lt;br&gt;  “show acl”. this command does not verify if the entry already exists. this&lt;br&gt;  command cannot be used if the reference &lt;acl&gt; is a file also used with a map.&lt;br&gt;  in this case, you must use the command “add map” in place of “add acl”.&lt;/acl&gt;&lt;/file&gt;&lt;/id&gt;&lt;/acl&gt;&lt;/acl&gt;&lt;/pattern&gt;&lt;/acl&gt;&lt;/p&gt;
&lt;p&gt;add map &lt;map&gt; &lt;key&gt; &lt;value&gt;&lt;br&gt;  add an entry into the map &lt;map&gt; to associate the value &lt;value&gt; to the key&lt;br&gt;  &lt;key&gt;. this command does not verify if the entry already exists. it is&lt;br&gt;  mainly used to fill a map after a clear operation. note that if the reference&lt;br&gt;  &lt;map&gt; is a file and is shared with a map, this map will contain also a new&lt;br&gt;  pattern entry.&lt;/map&gt;&lt;/key&gt;&lt;/value&gt;&lt;/map&gt;&lt;/value&gt;&lt;/key&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;clear counters&lt;br&gt;  clear the max values of the statistics counters in each proxy (frontend &amp;amp;&lt;br&gt;  backend) and in each server. the cumulated counters are not affected. this&lt;br&gt;  can be used to get clean counters after an incident, without having to&lt;br&gt;  restart nor to clear traffic counters. this command is restricted and can&lt;br&gt;  only be issued on sockets configured for levels “operator” or “admin”.&lt;/p&gt;
&lt;p&gt;clear counters all&lt;br&gt;  clear all statistics counters in each proxy (frontend &amp;amp; backend) and in each&lt;br&gt;  server. this has the same effect as restarting. this command is restricted&lt;br&gt;  and can only be issued on sockets configured for level “admin”.&lt;/p&gt;
&lt;p&gt;clear acl &lt;acl&gt;&lt;br&gt;  remove all entries from the acl &lt;acl&gt;. &lt;acl&gt; is the #&lt;id&gt; or the &lt;file&gt;&lt;br&gt;  returned by “show acl”. note that if the reference &lt;acl&gt; is a file and is&lt;br&gt;  shared with a map, this map will be also cleared.&lt;/acl&gt;&lt;/file&gt;&lt;/id&gt;&lt;/acl&gt;&lt;/acl&gt;&lt;/acl&gt;&lt;/p&gt;
&lt;p&gt;clear map &lt;map&gt;&lt;br&gt;  remove all entries from the map &lt;map&gt;. &lt;map&gt; is the #&lt;id&gt; or the &lt;file&gt;&lt;br&gt;  returned by “show map”. note that if the reference &lt;map&gt; is a file and is&lt;br&gt;  shared with a acl, this acl will be also cleared.&lt;/map&gt;&lt;/file&gt;&lt;/id&gt;&lt;/map&gt;&lt;/map&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;clear table &lt;table&gt; [ data.&lt;type&gt; &lt;operator&gt; &lt;value&gt; ] | [ key &lt;key&gt; ]&lt;br&gt;  remove entries from the stick-table &lt;table&gt;.&lt;/table&gt;&lt;/key&gt;&lt;/value&gt;&lt;/operator&gt;&lt;/type&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;  this is typically used to unblock some users complaining they have been&lt;br&gt;  abusively denied access to a service, but this can also be used to clear some&lt;br&gt;  stickiness entries matching a server that is going to be replaced (see “show&lt;br&gt;  table” below for details).  note that sometimes, removal of an entry will be&lt;br&gt;  refused because it is currently tracked by a session. retrying a few seconds&lt;br&gt;  later after the session ends is usual enough.&lt;/p&gt;
&lt;p&gt;  in the case where no options arguments are given all entries will be removed.&lt;/p&gt;
&lt;p&gt;  when the “data.” form is used entries matching a filter applied using the&lt;br&gt;  stored data (see “stick-table” in section 4.2) are removed.  a stored data&lt;br&gt;  type must be specified in &lt;type&gt;, and this data type must be stored in the&lt;br&gt;  table otherwise an error is reported. the data is compared according to&lt;br&gt;  &lt;operator&gt; with the 64-bit integer &lt;value&gt;.  operators are the same as with&lt;br&gt;  the acls :&lt;/value&gt;&lt;/operator&gt;&lt;/type&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- eq : match entries whose data is equal to this value
- ne : match entries whose data is not equal to this value
- le : match entries whose data is less than or equal to this value
- ge : match entries whose data is greater than or equal to this value
- lt : match entries whose data is less than this value
- gt : match entries whose data is greater than this value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when the key form is used the entry &lt;key&gt; is removed.  the key must be of the&lt;br&gt;  same type as the table, which currently is limited to ipv4, ipv6, integer and&lt;br&gt;  string.&lt;/key&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        $ echo “show table http_proxy” | socat stdio /tmp/sock1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:2
&amp;gt;&amp;gt;&amp;gt; 0x80e6a4c: key=127.0.0.1 use=0 exp=3594729 gpc0=0 conn_rate(30000)=1 \
      bytes_out_rate(60000)=187
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191

    $ echo &amp;quot;clear table http_proxy key 127.0.0.1&amp;quot; | socat stdio /tmp/sock1

    $ echo &amp;quot;show table http_proxy&amp;quot; | socat stdio /tmp/sock1
&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:1
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191
    $ echo &amp;quot;clear table http_proxy data.gpc0 eq 1&amp;quot; | socat stdio /tmp/sock1
    $ echo &amp;quot;show table http_proxy&amp;quot; | socat stdio /tmp/sock1
&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;del acl &lt;acl&gt; [&lt;key&gt;|#&lt;ref&gt;]&lt;br&gt;  delete all the acl entries from the acl &lt;acl&gt; corresponding to the key &lt;key&gt;.&lt;br&gt;  &lt;acl&gt; is the #&lt;id&gt; or the &lt;file&gt; returned by “show acl”. if the &lt;ref&gt; is used,&lt;br&gt;  this command delete only the listed reference. the reference can be found with&lt;br&gt;  listing the content of the acl. note that if the reference &lt;acl&gt; is a file and&lt;br&gt;  is shared with a map, the entry will be also deleted in the map.&lt;/acl&gt;&lt;/ref&gt;&lt;/file&gt;&lt;/id&gt;&lt;/acl&gt;&lt;/key&gt;&lt;/acl&gt;&lt;/ref&gt;&lt;/key&gt;&lt;/acl&gt;&lt;/p&gt;
&lt;p&gt;del map &lt;map&gt; [&lt;key&gt;|#&lt;ref&gt;]&lt;br&gt;  delete all the map entries from the map &lt;map&gt; corresponding to the key &lt;key&gt;.&lt;br&gt;  &lt;map&gt; is the #&lt;id&gt; or the &lt;file&gt; returned by “show map”. if the &lt;ref&gt; is used,&lt;br&gt;  this command delete only the listed reference. the reference can be found with&lt;br&gt;  listing the content of the map. note that if the reference &lt;map&gt; is a file and&lt;br&gt;  is shared with a acl, the entry will be also deleted in the map.&lt;/map&gt;&lt;/ref&gt;&lt;/file&gt;&lt;/id&gt;&lt;/map&gt;&lt;/key&gt;&lt;/map&gt;&lt;/ref&gt;&lt;/key&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;disable agent &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  mark the auxiliary agent check as temporarily stopped.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  in the case where an agent check is being run as a auxiliary check, due&lt;br&gt;  to the agent-check parameter of a server directive, new checks are only&lt;br&gt;  initialised when the agent is in the enabled. thus, disable agent will&lt;br&gt;  prevent any new agent checks from begin initiated until the agent&lt;br&gt;  re-enabled using enable agent.&lt;/p&gt;
&lt;p&gt;  when an agent is disabled the processing of an auxiliary agent check that&lt;br&gt;  was initiated while the agent was set as enabled is as follows: all&lt;br&gt;  results that would alter the weight, specifically “drain” or a weight&lt;br&gt;  returned by the agent, are ignored. the processing of agent check is&lt;br&gt;  otherwise unchanged.&lt;/p&gt;
&lt;p&gt;  the motivation for this feature is to allow the weight changing effects&lt;br&gt;  of the agent checks to be paused to allow the weight of a server to be&lt;br&gt;  configured using set weight without being overridden by the agent.&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;disable frontend &lt;frontend&gt;&lt;br&gt;  mark the frontend as temporarily stopped. this corresponds to the mode which&lt;br&gt;  is used during a soft restart : the frontend releases the port but can be&lt;br&gt;  enabled again if needed. this should be used with care as some non-linux oses&lt;br&gt;  are unable to enable it back. this is intended to be used in environments&lt;br&gt;  where stopping a proxy is not even imaginable but a misconfigured proxy must&lt;br&gt;  be fixed. that way it’s possible to release the port and bind it into another&lt;br&gt;  process to restore operations. the frontend will appear with status “stop”&lt;br&gt;  on the stats page.&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;  the frontend may be specified either by its name or by its numeric id,&lt;br&gt;  prefixed with a sharp (‘#’).&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;disable health &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  mark the primary health check as temporarily stopped. this will disable&lt;br&gt;  sending of health checks, and the last health check result will be ignored.&lt;br&gt;  the server will be in unchecked state and considered up unless an auxiliary&lt;br&gt;  agent check forces it down.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;disable server &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  mark the server down for maintenance. in this mode, no more checks will be&lt;br&gt;  performed on the server until it leaves maintenance.&lt;br&gt;  if the server is tracked by other servers, those servers will be set to down&lt;br&gt;  during the maintenance.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  in the statistics page, a server down for maintenance will appear with a&lt;br&gt;  “maint” status, its tracking servers with the “maint(via)” one.&lt;/p&gt;
&lt;p&gt;  both the backend and the server may be specified either by their name or by&lt;br&gt;  their numeric id, prefixed with a sharp (‘#’).&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;enable agent &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  resume auxiliary agent check that was temporarily stopped.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  see “disable agent” for details of the effect of temporarily starting&lt;br&gt;  and stopping an auxiliary agent.&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;enable frontend &lt;frontend&gt;&lt;br&gt;  resume a frontend which was temporarily stopped. it is possible that some of&lt;br&gt;  the listening ports won’t be able to bind anymore (eg: if another process&lt;br&gt;  took them since the ‘disable frontend’ operation). if this happens, an error&lt;br&gt;  is displayed. some operating systems might not be able to resume a frontend&lt;br&gt;  which was disabled.&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;  the frontend may be specified either by its name or by its numeric id,&lt;br&gt;  prefixed with a sharp (‘#’).&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;enable health &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  resume a primary health check that was temporarily stopped. this will enable&lt;br&gt;  sending of health checks again. please see “disable health” for details.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;enable server &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  if the server was previously marked as down for maintenance, this marks the&lt;br&gt;  server up and checks are re-enabled.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;  both the backend and the server may be specified either by their name or by&lt;br&gt;  their numeric id, prefixed with a sharp (‘#’).&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;get map &lt;map&gt; &lt;value&gt;&lt;br&gt;get acl &lt;acl&gt; &lt;value&gt;&lt;br&gt;  lookup the value &lt;value&gt; in the map &lt;map&gt; or in the acl &lt;acl&gt;. &lt;map&gt; or &lt;acl&gt;&lt;br&gt;  are the #&lt;id&gt; or the &lt;file&gt; returned by “show map” or “show acl”. this command&lt;br&gt;  returns all the matching patterns associated with this map. this is useful for&lt;br&gt;  debugging maps and acls. the output format is composed by one line par&lt;br&gt;  matching type. each line is composed by space-delimited series of words.&lt;/file&gt;&lt;/id&gt;&lt;/acl&gt;&lt;/map&gt;&lt;/acl&gt;&lt;/map&gt;&lt;/value&gt;&lt;/value&gt;&lt;/acl&gt;&lt;/value&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;  the first two words are:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;match method&amp;gt;:   the match method applied. it can be &amp;quot;found&amp;quot;, &amp;quot;bool&amp;quot;,
                  &amp;quot;int&amp;quot;, &amp;quot;ip&amp;quot;, &amp;quot;bin&amp;quot;, &amp;quot;len&amp;quot;, &amp;quot;str&amp;quot;, &amp;quot;beg&amp;quot;, &amp;quot;sub&amp;quot;, &amp;quot;dir&amp;quot;,
                  &amp;quot;dom&amp;quot;, &amp;quot;end&amp;quot; or &amp;quot;reg&amp;quot;.

&amp;lt;match result&amp;gt;:   the result. can be &amp;quot;match&amp;quot; or &amp;quot;no-match&amp;quot;.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the following words are returned only if the pattern matches an entry.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;index type&amp;gt;:     &amp;quot;tree&amp;quot; or &amp;quot;list&amp;quot;. the internal lookup algorithm.

&amp;lt;case&amp;gt;:           &amp;quot;case-insensitive&amp;quot; or &amp;quot;case-sensitive&amp;quot;. the
                  interpretation of the case.

&amp;lt;entry matched&amp;gt;:  match=&amp;quot;&amp;lt;entry&amp;gt;&amp;quot;. return the matched pattern. it is
                  useful with regular expressions.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  the two last word are used to show the returned value and its type. with the&lt;br&gt;  “acl” case, the pattern doesn’t exist.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return=nothing:        no return because there are no &amp;quot;map&amp;quot;.
return=&amp;quot;&amp;lt;value&amp;gt;&amp;quot;:      the value returned in the string format.
return=cannot-display: the value cannot be converted as string.

type=&amp;quot;&amp;lt;type&amp;gt;&amp;quot;:         the type of the returned sample.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;get weight &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  report the current weight and the initial weight of server &lt;server&gt; in&lt;br&gt;  backend &lt;backend&gt; or an error if either doesn’t exist. the initial weight is&lt;br&gt;  the one that appears in the configuration file. both are normally equal&lt;br&gt;  unless the current weight has been changed. both the backend and the server&lt;br&gt;  may be specified either by their name or by their numeric id, prefixed with a&lt;br&gt;  sharp (‘#’).&lt;/backend&gt;&lt;/server&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;help&lt;br&gt;  print the list of known keywords and their basic usage. the same help screen&lt;br&gt;  is also displayed for unknown commands.&lt;/p&gt;
&lt;p&gt;prompt&lt;br&gt;  toggle the prompt at the beginning of the line and enter or leave interactive&lt;br&gt;  mode. in interactive mode, the connection is not closed after a command&lt;br&gt;  completes. instead, the prompt will appear again, indicating the user that&lt;br&gt;  the interpreter is waiting for a new command. the prompt consists in a right&lt;br&gt;  angle bracket followed by a space “&amp;gt; “. this mode is particularly convenient&lt;br&gt;  when one wants to periodically check information such as stats or errors.&lt;br&gt;  it is also a good idea to enter interactive mode before issuing a “help”&lt;br&gt;  command.&lt;/p&gt;
&lt;p&gt;quit&lt;br&gt;  close the connection when in interactive mode.&lt;/p&gt;
&lt;p&gt;set map &lt;map&gt; [&lt;key&gt;|#&lt;ref&gt;] &lt;value&gt;&lt;br&gt;  modify the value corresponding to each key &lt;key&gt; in a map &lt;map&gt;. &lt;map&gt; is the&lt;/map&gt;&lt;/map&gt;&lt;/key&gt;&lt;/value&gt;&lt;/ref&gt;&lt;/key&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;  #&lt;id&gt; or &lt;file&gt; returned by “show map”. if the &lt;ref&gt; is used in place of&lt;br&gt;  &lt;key&gt;, only the entry pointed by &lt;ref&gt; is changed. the new value is &lt;value&gt;.&lt;/value&gt;&lt;/ref&gt;&lt;/key&gt;&lt;/ref&gt;&lt;/file&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;set maxconn frontend &lt;frontend&gt; &lt;value&gt;&lt;br&gt;  dynamically change the specified frontend’s maxconn setting. any positive&lt;br&gt;  value is allowed including zero, but setting values larger than the global&lt;br&gt;  maxconn does not make much sense. if the limit is increased and connections&lt;br&gt;  were pending, they will immediately be accepted. if it is lowered to a value&lt;br&gt;  below the current number of connections, new connections acceptation will be&lt;br&gt;  delayed until the threshold is reached. the frontend might be specified by&lt;br&gt;  either its name or its numeric id prefixed with a sharp (‘#’).&lt;/value&gt;&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;set maxconn global &lt;maxconn&gt;&lt;br&gt;  dynamically change the global maxconn setting within the range defined by the&lt;br&gt;  initial global maxconn setting. if it is increased and connections were&lt;br&gt;  pending, they will immediately be accepted. if it is lowered to a value below&lt;br&gt;  the current number of connections, new connections acceptation will be&lt;br&gt;  delayed until the threshold is reached. a value of zero restores the initial&lt;br&gt;  setting.&lt;/maxconn&gt;&lt;/p&gt;
&lt;p&gt;set rate-limit connections global &lt;value&gt;&lt;br&gt;  change the process-wide connection rate limit, which is set by the global&lt;br&gt;  ‘maxconnrate’ setting. a value of zero disables the limitation. this limit&lt;br&gt;  applies to all frontends and the change has an immediate effect. the value&lt;br&gt;  is passed in number of connections per second.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;set rate-limit http-compression global &lt;value&gt;&lt;br&gt;  change the maximum input compression rate, which is set by the global&lt;br&gt;  ‘maxcomprate’ setting. a value of zero disables the limitation. the value is&lt;br&gt;  passed in number of kilobytes per second. the value is available in the “show&lt;br&gt;  info” on the line “compressbpsratelim” in bytes.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;set rate-limit sessions global &lt;value&gt;&lt;br&gt;  change the process-wide session rate limit, which is set by the global&lt;br&gt;  ‘maxsessrate’ setting. a value of zero disables the limitation. this limit&lt;br&gt;  applies to all frontends and the change has an immediate effect. the value&lt;br&gt;  is passed in number of sessions per second.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;set rate-limit ssl-sessions global &lt;value&gt;&lt;br&gt;  change the process-wide ssl session rate limit, which is set by the global&lt;br&gt;  ‘maxsslrate’ setting. a value of zero disables the limitation. this limit&lt;br&gt;  applies to all frontends and the change has an immediate effect. the value&lt;br&gt;  is passed in number of sessions per second sent to the ssl stack. it applies&lt;br&gt;  before the handshake in order to protect the stack against handshake abuses.&lt;/value&gt;&lt;/p&gt;
&lt;p&gt;set server &lt;backend&gt;/&lt;server&gt; addr &lt;ip4 or=&quot;&quot; ip6=&quot;&quot; address=&quot;&quot;&gt;&lt;br&gt;  replace the current ip address of a server by the one provided.&lt;/ip4&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;set server &lt;backend&gt;/&lt;server&gt; agent [ up | down ]&lt;br&gt;  force a server’s agent to a new state. this can be useful to immediately&lt;br&gt;  switch a server’s state regardless of some slow agent checks for example.&lt;br&gt;  note that the change is propagated to tracking servers if any.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;set server &lt;backend&gt;/&lt;server&gt; health [ up | stopping | down ]&lt;br&gt;  force a server’s health to a new state. this can be useful to immediately&lt;br&gt;  switch a server’s state regardless of some slow health checks for example.&lt;br&gt;  note that the change is propagated to tracking servers if any.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;set server &lt;backend&gt;/&lt;server&gt; state [ ready | drain | maint ]&lt;br&gt;  force a server’s administrative state to a new state. this can be useful to&lt;br&gt;  disable load balancing and/or any traffic to a server. setting the state to&lt;br&gt;  “ready” puts the server in normal mode, and the command is the equivalent of&lt;br&gt;  the “enable server” command. setting the state to “maint” disables any traffic&lt;br&gt;  to the server as well as any health checks. this is the equivalent of the&lt;br&gt;  “disable server” command. setting the mode to “drain” only removes the server&lt;br&gt;  from load balancing but still allows it to be checked and to accept new&lt;br&gt;  persistent connections. changes are propagated to tracking servers if any.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;set server &lt;backend&gt;/&lt;server&gt; weight &lt;weight&gt;[%]&lt;br&gt;  change a server’s weight to the value passed in argument. this is the exact&lt;br&gt;  equivalent of the “set weight” command below.&lt;/weight&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;set ssl ocsp-response &lt;response&gt;&lt;br&gt;  this command is used to update an ocsp response for a certificate (see “crt”&lt;br&gt;  on “bind” lines). same controls are performed as during the initial loading of&lt;br&gt;  the response. the &lt;response&gt; must be passed as a base64 encoded string of the&lt;br&gt;  der encoded response from the ocsp server.&lt;/response&gt;&lt;/response&gt;&lt;/p&gt;
&lt;p&gt;  example:&lt;br&gt;    openssl ocsp -issuer issuer.pem -cert server.pem \&lt;br&gt;                 -host ocsp.issuer.com:80 -respout resp.der&lt;br&gt;    echo “set ssl ocsp-response $(base64 -w 10000 resp.der)” | \&lt;br&gt;                 socat stdio /var/run/haproxy.stat&lt;/p&gt;
&lt;p&gt;set ssl tls-key &lt;id&gt; &lt;tlskey&gt;&lt;br&gt;  set the next tls key for the &lt;id&gt; listener to &lt;tlskey&gt;. this key becomes the&lt;br&gt;  ultimate key, while the penultimate one is used for encryption (others just&lt;br&gt;  decrypt). the oldest tls key present is overwritten. &lt;id&gt; is either a numeric&lt;/id&gt;&lt;/tlskey&gt;&lt;/id&gt;&lt;/tlskey&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;  #&lt;id&gt; or &lt;file&gt; returned by “show tls-keys”. &lt;tlskey&gt; is a base64 encoded 48&lt;br&gt;  bit tls ticket key (ex. openssl rand -base64 48).&lt;/tlskey&gt;&lt;/file&gt;&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;set table &lt;table&gt; key &lt;key&gt; [data.&lt;data_type&gt; &lt;value&gt;]*&lt;br&gt;  create or update a stick-table entry in the table. if the key is not present,&lt;br&gt;  an entry is inserted. see stick-table in section 4.2 to find all possible&lt;br&gt;  values for &lt;data_type&gt;. the most likely use consists in dynamically entering&lt;br&gt;  entries for source ip addresses, with a flag in gpc0 to dynamically block an&lt;br&gt;  ip address or affect its quality of service. it is possible to pass multiple&lt;br&gt;  data_types in a single call.&lt;/data_type&gt;&lt;/value&gt;&lt;/data_type&gt;&lt;/key&gt;&lt;/table&gt;&lt;/p&gt;
&lt;p&gt;set timeout cli &lt;delay&gt;&lt;br&gt;  change the cli interface timeout for current connection. this can be useful&lt;br&gt;  during long debugging sessions where the user needs to constantly inspect&lt;br&gt;  some indicators without being disconnected. the delay is passed in seconds.&lt;/delay&gt;&lt;/p&gt;
&lt;p&gt;set weight &lt;backend&gt;/&lt;server&gt; &lt;weight&gt;[%]&lt;br&gt;  change a server’s weight to the value passed in argument. if the value ends&lt;br&gt;  with the ‘%’ sign, then the new weight will be relative to the initially&lt;br&gt;  configured weight.  absolute weights are permitted between 0 and 256.&lt;br&gt;  relative weights must be positive with the resulting absolute weight is&lt;br&gt;  capped at 256.  servers which are part of a farm running a static&lt;br&gt;  load-balancing algorithm have stricter limitations because the weight&lt;br&gt;  cannot change once set. thus for these servers, the only accepted values&lt;br&gt;  are 0 and 100% (or 0 and the initial weight). changes take effect&lt;br&gt;  immediately, though certain lb algorithms require a certain amount of&lt;br&gt;  requests to consider changes. a typical usage of this command is to&lt;br&gt;  disable a server during an update by setting its weight to zero, then to&lt;br&gt;  enable it again after the update by setting it back to 100%. this command&lt;br&gt;  is restricted and can only be issued on sockets configured for level&lt;br&gt;  “admin”. both the backend and the server may be specified either by their&lt;br&gt;  name or by their numeric id, prefixed with a sharp (‘#’).&lt;/weight&gt;&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;show errors [&lt;iid&gt;]&lt;br&gt;  dump last known request and response errors collected by frontends and&lt;br&gt;  backends. if &lt;iid&gt; is specified, the limit the dump to errors concerning&lt;br&gt;  either frontend or backend whose id is &lt;iid&gt;. this command is restricted&lt;br&gt;  and can only be issued on sockets configured for levels “operator” or&lt;br&gt;  “admin”.&lt;/iid&gt;&lt;/iid&gt;&lt;/iid&gt;&lt;/p&gt;
&lt;p&gt;  the errors which may be collected are the last request and response errors&lt;br&gt;  caused by protocol violations, often due to invalid characters in header&lt;br&gt;  names. the report precisely indicates what exact character violated the&lt;br&gt;  protocol. other important information such as the exact date the error was&lt;br&gt;  detected, frontend and backend names, the server name (when known), the&lt;br&gt;  internal session id and the source address which has initiated the session&lt;br&gt;  are reported too.&lt;/p&gt;
&lt;p&gt;  all characters are returned, and non-printable characters are encoded. the&lt;br&gt;  most common ones (\t = 9, \n = 10, \r = 13 and \e = 27) are encoded as one&lt;br&gt;  letter following a backslash. the backslash itself is encoded as ‘\‘ to&lt;br&gt;  avoid confusion. other non-printable characters are encoded ‘\xnn’ where&lt;br&gt;  nn is the two-digits hexadecimal representation of the character’s ascii&lt;br&gt;  code.&lt;/p&gt;
&lt;p&gt;  lines are prefixed with the position of their first character, starting at 0&lt;br&gt;  for the beginning of the buffer. at most one input line is printed per line,&lt;br&gt;  and large lines will be broken into multiple consecutive output lines so that&lt;br&gt;  the output never goes beyond 79 characters wide. it is easy to detect if a&lt;br&gt;  line was broken, because it will not end with ‘\n’ and the next line’s offset&lt;br&gt;  will be followed by a ‘+’ sign, indicating it is a continuation of previous&lt;br&gt;  line.&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        $ echo “show errors” | socat stdio /tmp/sock1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [04/mar/2009:15:46:56.081] backend http-in (#2) : invalid response
      src 127.0.0.1, session #54, frontend fe-eth0 (#1), server s2 (#1)
      response length 213 bytes, error at position 23:

      00000  http/1.0 200 ok\r\n
      00017  header/bizarre:blah\r\n
      00038  location: blah\r\n
      00054  long-line: this is a very long line which should b
      00104+ e broken into multiple lines on the output buffer,
      00154+  otherwise it would be too large to print in a ter
      00204+ minal\r\n
      00211  \r\n

in the example above, we see that the backend &amp;quot;http-in&amp;quot; which has internal
id 2 has blocked an invalid response from its server s2 which has internal
id 1\. the request was on session 54 initiated by source 127.0.0.1 and
received by frontend fe-eth0 whose id is 1\. the total response length was
213 bytes when the error was detected, and the error was at byte 23\. this
is the slash (&amp;apos;/&amp;apos;) in header name &amp;quot;header/bizarre&amp;quot;, which is not a valid
http character for a header name.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;show info&lt;br&gt;  dump info about haproxy status on current process.&lt;/p&gt;
&lt;p&gt;show map [&lt;map&gt;]&lt;br&gt;  dump info about map converters. without argument, the list of all available&lt;br&gt;  maps is returned. if a &lt;map&gt; is specified, its contents are dumped. &lt;map&gt; is&lt;br&gt;  the #&lt;id&gt; or &lt;file&gt;. the first column is a unique identifier. it can be used&lt;br&gt;  as reference for the operation “del map” and “set map”. the second column is&lt;br&gt;  the pattern and the third column is the sample if available. the data returned&lt;br&gt;  are not directly a list of available maps, but are the list of all patterns&lt;br&gt;  composing any map. many of these patterns can be shared with acl.&lt;/file&gt;&lt;/id&gt;&lt;/map&gt;&lt;/map&gt;&lt;/map&gt;&lt;/p&gt;
&lt;p&gt;show acl [&lt;acl&gt;]&lt;br&gt;  dump info about acl converters. without argument, the list of all available&lt;br&gt;  acls is returned. if a &lt;acl&gt; is specified, its contents are dumped. &lt;acl&gt; if&lt;br&gt;  the #&lt;id&gt; or &lt;file&gt;. the dump format is the same than the map even for the&lt;br&gt;  sample value. the data returned are not a list of available acl, but are the&lt;br&gt;  list of all patterns composing any acl. many of these patterns can be shared&lt;br&gt;  with maps.&lt;/file&gt;&lt;/id&gt;&lt;/acl&gt;&lt;/acl&gt;&lt;/acl&gt;&lt;/p&gt;
&lt;p&gt;show pools&lt;br&gt;  dump the status of internal memory pools. this is useful to track memory&lt;br&gt;  usage when suspecting a memory leak for example. it does exactly the same&lt;br&gt;  as the sigquit when running in foreground except that it does not flush&lt;br&gt;  the pools.&lt;/p&gt;
&lt;p&gt;show sess&lt;br&gt;  dump all known sessions. avoid doing this on slow connections as this can&lt;br&gt;  be huge. this command is restricted and can only be issued on sockets&lt;br&gt;  configured for levels “operator” or “admin”.&lt;/p&gt;
&lt;p&gt;show sess &lt;id&gt;&lt;br&gt;  display a lot of internal information about the specified session identifier.&lt;br&gt;  this identifier is the first field at the beginning of the lines in the dumps&lt;br&gt;  of “show sess” (it corresponds to the session pointer). those information are&lt;br&gt;  useless to most users but may be used by haproxy developers to troubleshoot a&lt;br&gt;  complex bug. the output format is intentionally not documented so that it can&lt;br&gt;  freely evolve depending on demands. you may find a description of all fields&lt;br&gt;  returned in src/dumpstats.c&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;  the special id “all” dumps the states of all sessions, which must be avoided&lt;br&gt;  as much as possible as it is highly cpu intensive and can take a lot of time.&lt;/p&gt;
&lt;p&gt;show stat [&lt;iid&gt; &lt;type&gt; &lt;sid&gt;]&lt;br&gt;  dump statistics in the csv format. by passing &lt;id&gt;, &lt;type&gt; and &lt;sid&gt;, it is&lt;br&gt;  possible to dump only selected items :&lt;/sid&gt;&lt;/type&gt;&lt;/id&gt;&lt;/sid&gt;&lt;/type&gt;&lt;/iid&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- &amp;lt;iid&amp;gt; is a proxy id, -1 to dump everything
- &amp;lt;type&amp;gt; selects the type of dumpable objects : 1 for frontends, 2 for
   backends, 4 for servers, -1 for everything. these values can be ored,
   for example:
      1 + 2     = 3   -&amp;gt; frontend + backend.
      1 + 2 + 4 = 7   -&amp;gt; frontend + backend + server.
- &amp;lt;sid&amp;gt; is a server id, -1 to dump everything from the selected proxy.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  example :&lt;br&gt;        $ echo “show info;show stat” | socat stdio unix-connect:/tmp/sock1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; name: haproxy
    version: 1.4-dev2-49
    release_date: 2009/09/23
    nbproc: 1
    process_num: 1
    (...)

    # pxname,svname,qcur,qmax,scur,smax,slim,stot,bin,bout,dreq,  (...)
    stats,frontend,,,0,0,1000,0,0,0,0,0,0,,,,,open,,,,,,,,,1,1,0, (...)
    stats,backend,0,0,0,0,1000,0,0,0,0,0,,0,0,0,0,up,0,0,0,,0,250,(...)
    (...)
    www1,backend,0,0,0,0,1000,0,0,0,0,0,,0,0,0,0,up,1,1,0,,0,250, (...)

    $

here, two commands have been issued at once. that way it&amp;apos;s easy to find
which process the stats apply to in multi-process mode. notice the empty
line after the information output which marks the end of the first block.
a similar empty line appears at the end of the second block (stats) so that
the reader knows the output has not been truncated.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;show stat resolvers &lt;resolvers section=&quot;&quot; id=&quot;&quot;&gt;&lt;br&gt;  dump statistics for the given resolvers section.&lt;br&gt;  for each name server, the following counters are reported:&lt;br&gt;    sent: number of dns requests sent to this server&lt;br&gt;    valid: number of dns valid responses received from this server&lt;br&gt;    update: number of dns responses used to update the server’s ip address&lt;br&gt;    cname: number of cname responses&lt;br&gt;    cname_error: cname errors encountered with this server&lt;br&gt;    any_err: number of empty response (ie: server does not support any type)&lt;br&gt;    nx: non existent domain response received from this server&lt;br&gt;    timeout: how many time this server did not answer in time&lt;br&gt;    refused: number of requests refused by this server&lt;br&gt;    other: any other dns errors&lt;br&gt;    invalid: invalid dns response (from a protocol point of view)&lt;br&gt;    too_big: too big response&lt;br&gt;    outdated: number of response arrived too late (after an other name server)&lt;br&gt;show table&lt;br&gt;  dump general information on all known stick-tables. their name is returned&lt;br&gt;  (the name of the proxy which holds them), their type (currently zero, always&lt;br&gt;  ip), their size in maximum possible number of entries, and the number of&lt;br&gt;  entries currently in use.&lt;/resolvers&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        $ echo “show table” | socat stdio /tmp/sock1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # table: front_pub, type: ip, size:204800, used:171454
&amp;gt;&amp;gt;&amp;gt; # table: back_rdp, type: ip, size:204800, used:0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;show table &lt;name&gt; [ data.&lt;type&gt; &lt;operator&gt; &lt;value&gt; ] | [ key &lt;key&gt; ]&lt;br&gt;  dump contents of stick-table &lt;name&gt;. in this mode, a first line of generic&lt;br&gt;  information about the table is reported as with “show table”, then all&lt;br&gt;  entries are dumped. since this can be quite heavy, it is possible to specify&lt;br&gt;  a filter in order to specify what entries to display.&lt;/name&gt;&lt;/key&gt;&lt;/value&gt;&lt;/operator&gt;&lt;/type&gt;&lt;/name&gt;&lt;/p&gt;
&lt;p&gt;  when the “data.” form is used the filter applies to the stored data (see&lt;br&gt;  “stick-table” in section 4.2).  a stored data type must be specified&lt;br&gt;  in &lt;type&gt;, and this data type must be stored in the table otherwise an&lt;br&gt;  error is reported. the data is compared according to &lt;operator&gt; with the&lt;br&gt;  64-bit integer &lt;value&gt;.  operators are the same as with the acls :&lt;/value&gt;&lt;/operator&gt;&lt;/type&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- eq : match entries whose data is equal to this value
- ne : match entries whose data is not equal to this value
- le : match entries whose data is less than or equal to this value
- ge : match entries whose data is greater than or equal to this value
- lt : match entries whose data is less than this value
- gt : match entries whose data is greater than this value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when the key form is used the entry &lt;key&gt; is shown.  the key must be of the&lt;br&gt;  same type as the table, which currently is limited to ipv4, ipv6, integer,&lt;br&gt;  and string.&lt;/key&gt;&lt;/p&gt;
&lt;p&gt;  example :&lt;br&gt;        $ echo “show table http_proxy” | socat stdio /tmp/sock1&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:2
&amp;gt;&amp;gt;&amp;gt; 0x80e6a4c: key=127.0.0.1 use=0 exp=3594729 gpc0=0 conn_rate(30000)=1  \
      bytes_out_rate(60000)=187
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191

    $ echo &amp;quot;show table http_proxy data.gpc0 gt 0&amp;quot; | socat stdio /tmp/sock1
&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:2
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191

    $ echo &amp;quot;show table http_proxy data.conn_rate gt 5&amp;quot; | \
        socat stdio /tmp/sock1
&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:2
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191

    $ echo &amp;quot;show table http_proxy key 127.0.0.2&amp;quot; | \
        socat stdio /tmp/sock1
&amp;gt;&amp;gt;&amp;gt; # table: http_proxy, type: ip, size:204800, used:2
&amp;gt;&amp;gt;&amp;gt; 0x80e6a80: key=127.0.0.2 use=0 exp=3594740 gpc0=1 conn_rate(30000)=10 \
      bytes_out_rate(60000)=191
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  when the data criterion applies to a dynamic value dependent on time such as&lt;br&gt;  a bytes rate, the value is dynamically computed during the evaluation of the&lt;br&gt;  entry in order to decide whether it has to be dumped or not. this means that&lt;br&gt;  such a filter could match for some time then not match anymore because as&lt;br&gt;  time goes, the average event rate drops.&lt;/p&gt;
&lt;p&gt;  it is possible to use this to extract lists of ip addresses abusing the&lt;br&gt;  service, in order to monitor them or even blacklist them in a firewall.&lt;br&gt;  example :&lt;br&gt;        $ echo “show table http_proxy data.gpc0 gt 0” \&lt;br&gt;          | socat stdio /tmp/sock1 \&lt;br&gt;          | fgrep ‘key=’ | cut -d’ ‘ -f2 | cut -d= -f2 &amp;gt; abusers-ip.txt&lt;br&gt;          ( or | awk ‘/key/{ print a[split($2,a,”=”)]; }’ )&lt;/p&gt;
&lt;p&gt;show tls-keys&lt;br&gt;  dump all loaded tls ticket keys. the tls ticket key reference id and the&lt;br&gt;  file from which the keys have been loaded is shown. both of those can be&lt;br&gt;  used to update the tls keys using “set ssl tls-key”.&lt;/p&gt;
&lt;p&gt;shutdown frontend &lt;frontend&gt;&lt;br&gt;  completely delete the specified frontend. all the ports it was bound to will&lt;br&gt;  be released. it will not be possible to enable the frontend anymore after&lt;br&gt;  this operation. this is intended to be used in environments where stopping a&lt;br&gt;  proxy is not even imaginable but a misconfigured proxy must be fixed. that&lt;br&gt;  way it’s possible to release the port and bind it into another process to&lt;br&gt;  restore operations. the frontend will not appear at all on the stats page&lt;br&gt;  once it is terminated.&lt;/frontend&gt;&lt;/p&gt;
&lt;p&gt;  the frontend may be specified either by its name or by its numeric id,&lt;br&gt;  prefixed with a sharp (‘#’).&lt;/p&gt;
&lt;p&gt;  this command is restricted and can only be issued on sockets configured for&lt;br&gt;  level “admin”.&lt;/p&gt;
&lt;p&gt;shutdown session &lt;id&gt;&lt;br&gt;  immediately terminate the session matching the specified session identifier.&lt;br&gt;  this identifier is the first field at the beginning of the lines in the dumps&lt;br&gt;  of “show sess” (it corresponds to the session pointer). this can be used to&lt;br&gt;  terminate a long-running session without waiting for a timeout or when an&lt;br&gt;  endless transfer is ongoing. such terminated sessions are reported with a ‘k’&lt;br&gt;  flag in the logs.&lt;/id&gt;&lt;/p&gt;
&lt;p&gt;shutdown sessions server &lt;backend&gt;/&lt;server&gt;&lt;br&gt;  immediately terminate all the sessions attached to the specified server. this&lt;br&gt;  can be used to terminate long-running sessions after a server is put into&lt;br&gt;  maintenance mode, for instance. such terminated sessions are reported with a&lt;br&gt;  ‘k’ flag in the logs.&lt;/server&gt;&lt;/backend&gt;&lt;/p&gt;
&lt;p&gt;/*&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;local variables:&lt;/li&gt;
&lt;li&gt;fill-column: 79&lt;/li&gt;
&lt;li&gt;end:&lt;br&gt;*/&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;pre&gt;&lt;code&gt;       haproxy
 configuration manual
----------------------
     version 1.6
    willy tarreau
     2015/07/22
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
